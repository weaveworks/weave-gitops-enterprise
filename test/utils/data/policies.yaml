apiVersion: pac.weave.works/v1
kind: Policy
metadata:
  name: weave.policies.container-running-as-root-acceptance-test
spec:
  id: weave.policies.container-running-as-root-acceptance-test
  name: Container Running As Root acceptance test
  description: |
    Running as root gives the container full access to all resources in the VM it is running on. Containers should not run with such access rights unless required by design. This Policy enforces that the `securityContext.runAsNonRoot` attribute is set to `true`.
  how_to_solve: |
    You should set `securityContext.runAsNonRoot` to `true`. Not setting it will default to giving the container root user rights on the VM that it is running on.
    ```
    ...
      spec:
        securityContext:
          runAsNonRoot: true
    ```
    https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  category: weave.categories.pod-security
  severity: high
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  controls:
    - weave.controls.pci-dss.2.2.4
    - weave.controls.pci-dss.2.2.5
    - weave.controls.cis-benchmark.5.2.6
    - weave.controls.mitre-attack.4.1
    - weave.controls.nist-800-190.3.3.1
    - weave.controls.gdpr.24
    - weave.controls.gdpr.25
    - weave.controls.gdpr.32
  tags: [pci-dss, cis-benchmark, mitre-attack, nist800-190, gdpr, default]
  parameters:
    - name: exclude_namespace
      type: array
      required: false
      value: ["kube-system", "wego-system", "flux-system", "test-systems"]
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |-
    package weave.advisor.podSecurity.runningAsRoot
    import future.keywords.in

    excluded_namespaces := input.parameters.exclude_namespace
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value
    # Check for missing securityContext.runAsNonRoot (missing in both, pod and container)
    violation[result] {
    	not controller_input.metadata.namespace in excluded_namespaces
    	not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
    	controller_spec.securityContext
    	not controller_spec.securityContext.runAsNonRoot
    	not controller_spec.securityContext.runAsNonRoot == false
    	some i
    	containers := controller_spec.containers[i]
    	containers.securityContext
    	not containers.securityContext.runAsNonRoot
    	not containers.securityContext.runAsNonRoot == false
    	result = {
    		"issue detected": true,
    		"msg": sprintf("Container missing spec.template.spec.containers[%v].securityContext.runAsNonRoot while Pod spec.template.spec.securityContext.runAsNonRoot is not defined as well.", [i]),
    		"violating_key": sprintf("spec.template.spec.containers[%v].securityContext", [i]),
    	}
    }
    # Container security context
    # Check if containers.securityContext.runAsNonRoot exists and = false
    violation[result] {
    	not controller_input.metadata.namespace in excluded_namespaces
    	not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
    	some i
    	containers := controller_spec.containers[i]
    	containers.securityContext
    	containers.securityContext.runAsNonRoot == false
    	result = {
    		"issue detected": true,
    		"msg": sprintf("Container spec.template.spec.containers[%v].securityContext.runAsNonRoot should be set to true ", [i]),
    		"violating_key": sprintf("spec.template.spec.containers[%v].securityContext.runAsNonRoot", [i]),
    		"recommended_value": true,
    	}
    }
    # Pod security context
    # Check if spec.securityContext.runAsNonRoot exists and = false
    violation[result] {
    	not controller_input.metadata.namespace in excluded_namespaces
    	not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
    	controller_spec.securityContext
    	controller_spec.securityContext.runAsNonRoot == false
    	result = {
    		"issue detected": true,
    		"msg": "Pod spec.template.spec.securityContext.runAsNonRoot should be set to true",
    		"violating_key": "spec.template.spec.securityContext.runAsNonRoot",
    		"recommended_value": true,
    	}
    }
    controller_input = input.review.object
    controller_spec = controller_input.spec.template.spec {
    	contains(controller_input.kind, {"StatefulSet", "DaemonSet", "Deployment", "Job", "ReplicaSet"})
    } else = controller_input.spec {
    	controller_input.kind == "Pod"
    } else = controller_input.spec.jobTemplate.spec.template.spec {
    	controller_input.kind == "CronJob"
    }
    contains(kind, kinds) {
    	kinds[_] = kind
    }
---
apiVersion: pac.weave.works/v1
kind: Policy
metadata:
  name: weave.policies.containers-read-only-root-filesystem-acceptance-test
spec:
  id: weave.policies.containers-read-only-root-filesystem-acceptance-test
  name: Containers Read Only Root Filesystem acceptance test
  description: |
    This Policy will cause a violation if the root file system is not mounted as specified. As a security practice, the root file system should be read-only or expose risk to your nodes if compromised.
    This Policy requires containers must run with a read-only root filesystem (i.e. no writable layer).
  how_to_solve: |
    Set `readOnlyRootFilesystem` in your `securityContext` to the value specified in the Policy.
    ```
    ...
      spec:
        containers:
          - securityContext:
              readOnlyRootFilesystem: <read_only>
    ```
    https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
  category: weave.categories.pod-security
  severity: high
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet, StatefulSet, CronJob]}
  controls:
    - weave.controls.mitre-attack.3.2
    - weave.controls.nist-800-190.4.4.4
  tags: [mitre-attack, nist800-190]
  parameters:
    - name: read_only
      type: boolean
      required: true
      value: true
    - name: exclude_namespace
      type: array
      required: false
      value: ["kube-system", "wego-system", "flux-system", "test-systems"]
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |-
    package weave.advisor.podSecurity.enforce_ro_fs
    import future.keywords.in
    read_only = input.parameters.read_only
    excluded_namespaces := input.parameters.exclude_namespace
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value
    violation[result] {
      not controller_input.metadata.namespace in excluded_namespaces
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      some i
      containers := controller_spec.containers[i]
      root_fs := containers.securityContext.readOnlyRootFilesystem
      not root_fs == read_only
      result = {
        "issue detected": true,
        "msg": sprintf("readOnlyRootFilesystem should equal '%v'; detected '%v'", [read_only, root_fs]),
        "recommended_value": read_only,
        "violating_key": sprintf("spec.template.spec.containers[%v].securityContext.readOnlyRootFilesystem", [i])
      }
    }
    # Controller input
    controller_input = input.review.object
    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec.template.spec {
      contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
    } else = controller_input.spec {
      controller_input.kind == "Pod"
    } else = controller_input.spec.jobTemplate.spec.template.spec {
      controller_input.kind == "CronJob"
    }
    contains_kind(kind, kinds) {
      kinds[_] = kind
    }
---
apiVersion: pac.weave.works/v1
kind: Policy
metadata:
  name: weave.policies.container-image-pull-policy-acceptance-test
spec:
  id: weave.policies.container-image-pull-policy-acceptance-test
  name: Container Image Pull Policy acceptance-test
  description: |
    This Policy is to ensure you are setting a value for your `imagePullPolicy`.
    The `imagePullPolicy` and the tag of the image affect when the kubelet attempts to pull the specified image.
    `imagePullPolicy`: IfNotPresent: the image is pulled only if it is not already present locally.
    `imagePullPolicy`: Always: every time the kubelet launches a container, the kubelet queries the container image registry to resolve the name to an image digest. If the kubelet has a container image with that exact digest cached locally, the kubelet uses its cached image; otherwise, the kubelet downloads (pulls) the image with the resolved digest, and uses that image to launch the container.
    `imagePullPolicy` is omitted and either the image tag is :latest or it is omitted: `imagePullPolicy` is automatically set to Always. Note that this will not be updated to IfNotPresent if the tag changes value.
    `imagePullPolicy` is omitted and the image tag is present but not :latest: `imagePullPolicy` is automatically set to IfNotPresent. Note that this will not be updated to Always if the tag is later removed or changed to :latest.
    `imagePullPolicy`: Never: the image is assumed to exist locally. No attempt is made to pull the image.
  how_to_solve: |
    Ensure you have an imagePullPolicy set that matches your policy.
    ```
    ...
      spec:
        containers:
        - imagePullPolicy: <policy>
    ```
    https://kubernetes.io/docs/concepts/configuration/overview/#container-images
  category: weave.categories.software-supply-chain
  severity: medium
  targets: {kinds: [Deployment, Job, ReplicationController, ReplicaSet, DaemonSet,
      StatefulSet, CronJob]}
  parameters:
  - name: policy
    type: string
    required: true
    value: Always
  - name: exclude_namespace
    type: array
    required: true
    value: ["kube-system", "wego-system", "flux-system", "test-systems"]
  - name: exclude_label_key
    type: string
    required: false
    value:
  - name: exclude_label_value
    type: string
    required: false
    value:
  code: |-
    package weave.advisor.images.image_pull_enforce
    import future.keywords.in
    policy := input.parameters.policy
    excluded_namespaces := input.parameters.exclude_namespace
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value
    violation[result] {
      not controller_input.metadata.namespace in excluded_namespaces
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      some i
      containers := controller_spec.containers[i]
      image_policy := containers.imagePullPolicy
      not containers.imagePullPolicy == policy
        result = {
          "issue detected": true,
          "msg": sprintf("imagePolicyPolicy must be '%v'; found '%v'",[policy, image_policy]),
          "violating_key": sprintf("spec.template.spec.containers[%v].imagePullPolicy", [i]),
          "recommended_value": policy
        }
    }
    # Controller input
    controller_input = input.review.object
    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec.template.spec {
      contains_kind(controller_input.kind, {"StatefulSet" , "DaemonSet", "Deployment", "Job"})
    } else = controller_input.spec {
      controller_input.kind == "Pod"
    } else = controller_input.spec.jobTemplate.spec.template.spec {
      controller_input.kind == "CronJob"
    }
    contains_kind(kind, kinds) {
      kinds[_] = kind
    }
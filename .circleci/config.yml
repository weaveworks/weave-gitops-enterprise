version: 2.1

# https://circleci.com/blog/circleci-hacks-reuse-yaml-in-your-circleci-config-with-yaml/
defaults: &defaults
  docker:
    - image: docker.io/weaveworks/wkp-wks-build:WKP-2167-user-acceptance-test-8cb85019
      environment:
        GOFLAGS: -p=4 # see https://github.com/golang/go/issues/26186#issuecomment-435544512 for more info. Docker in Circle incorrectly reports number of CPUs and causes OOM errors
        GOPATH: /go/
        SRCDIR: /src/github.com/weaveworks/wks
  working_directory: /src/github.com/weaveworks/wks

integrationTestCommonEnv: &integrationTestCommonEnv
  GOURL: https://golang.org/dl/go1.16.5.linux-amd64.tar.gz
  GOCHECKSUM: b12c23023b68de22f74c0524f10b753e7b08b1504cb7e417eccebdd3fae49061
  GOROOT: /home/circleci/goroot
  GOPATH: /home/circleci/go
  SRCDIR: /home/circleci/src/github.com/weaveworks/wks
  KUBECTL_URL: https://dl.k8s.io/v1.14.1/kubernetes-client-linux-amd64.tar.gz
  KUBECTL_CHECKSUM: da2076ff28b2dae220558014fe5787e1a811900c0b01c1250ad713e3efea072f
  JK_URL: https://github.com/jkcfg/jk/releases/download/0.3.2/jk-linux-amd64
  JK_CHECKSUM: 84a22074f91d3a4502944a46bcf016fd9989b03e23e72d2bee5b46b31a0ee249
  KUBEBUILDER_URL: https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_linux_amd64.tar.gz
  KUBEBUILDER_CHECKSUM: ff496970f209706763f2aba2bdcefc2de8d00085b3b972b5790117b59ea4ed10
  POD_CIDR_BLOCK: '192.168.0.0/16'
  SERVICE_CIDR_BLOCK: '10.96.0.0/12'
  WKP_DEBUG: true


workflows:
  test-build-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - build-darwin:
          requires:
            - build
            - unit-tests
          filters:
            tags:
              only: /.*/
      - unit-tests
      - unit-tests-with-coverage
      - mccp-ui-backend-integration-tests
      - fast-integration-tests:
          requires:
            - build
      - fast-integration-tests-go-116:
          requires:
            - build
      - mccp-acceptance-tests:
          requires:
            - build
            - mccp-ui-backend-integration-tests
      - mccp-acceptance-tests-vm:
          requires:
            - build
            - mccp-ui-backend-integration-tests

commands:
  get-wk-binary:
    description: Get the wk binary from s3
    steps:
      - run:
          name: Get the wk binary from s3
          command: |
            DST_PATH=cmd/wk/wk
            mkdir -p cmd/wk
            curl -o "$DST_PATH" https://s3.amazonaws.com/weaveworks-wkp/wk-v2.5.0-linux-amd64
            chmod +x "$DST_PATH"
  get-mccp-binary:
    description: Get the mccp binary from workspace or s3
    steps:
      - run:
          name: Get the mccp binary from workspace or s3
          command: |
            DST_PATH=cmd/mccp/mccp

            # get a mccp binary from the attached workspace to use in the integration test
            SRC_PATH=/tmp/workspace/cmd/mccp/mccp
            if [ -f "$SRC_PATH" ]; then
              cp "$SRC_PATH" "$DST_PATH"
            else
              TAG=$(./tools/image-tag)
              # TAG=master
              curl -o "$DST_PATH" https://s3.amazonaws.com/weaveworks-wkp/mccp-${TAG}-linux-amd64
              chmod +x "$DST_PATH"
            fi
  get-wego-binary:
    description: Get the wego binary from github
    steps:
      - run:
          name: Get the wego binary from github
          command: |
            mkdir -p cmd/wego
            cd cmd/wego
            wget https://github.com/weaveworks/weave-gitops/releases/download/v0.2.2/wego-linux-x86_64
            mv wego-linux-x86_64 wego
            chmod +x wego
            cd -
  setup-selenium:
    description: Setup selenium standalone server
    steps:
      - run:
          name: Setup selenium stanalone server 
          command: |
            sudo apt-get update
            sudo apt-get install -y xvfb
            sudo apt-get install -y google-chrome-stable

            wget https://chromedriver.storage.googleapis.com/92.0.4515.107/chromedriver_linux64.zip
            unzip chromedriver_linux64.zip
            sudo mv -f chromedriver /usr/local/bin/chromedriver

            mkdir -p cmd/selenium
            cd cmd/selenium
            wget  https://selenium-release.storage.googleapis.com/3.14/selenium-server-standalone-3.14.0.jar
            mv selenium-server-standalone-3.14.0.jar selenium-server-standalone.jar
            cd -

  install-integration-test-deps:
    description: Install go, kubectl and hub for the integration tests
    steps:
      - run:
          name: Install deps
          command: |
            # install go
            (cd ~ && curl --silent -L $GOURL -o go.tar.gz && echo "$GOCHECKSUM go.tar.gz" | sha256sum -c)
            mkdir -p $GOROOT && tar xf ~/go.tar.gz -C $GOROOT --strip-components 1

            # install kubectl
            curl --silent -L $KUBECTL_URL -o kubectl.tar.gz
            echo "$KUBECTL_CHECKSUM kubectl.tar.gz" | sha256sum -c
            tar xvzf kubectl.tar.gz --strip-components=3
            sudo mv kubectl /usr/local/bin

            # install clusterctl
            curl -L https://github.com/kubernetes-sigs/cluster-api/releases/download/v0.4.0/clusterctl-linux-amd64 -o clusterctl
            chmod +x ./clusterctl
            sudo mv ./clusterctl /usr/local/bin/clusterctl
            clusterctl version

            # install hub
            curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
            sudo mv bin/hub /usr/local/bin

            # TODO: Move this to the build image
            # install kubebuilder
            curl --silent -L $KUBEBUILDER_URL -o kubebuilder.tar.gz
            echo "$KUBEBUILDER_CHECKSUM kubebuilder.tar.gz" | sha256sum -c
            tar xvzf kubebuilder.tar.gz --strip-components=1
            sudo mkdir -p /usr/local/kubebuilder
            sudo mv bin /usr/local/kubebuilder
      - run:
          name: Install jk
          command: |
            curl --silent -L $JK_URL -o jk
            echo "$JK_CHECKSUM jk" | sha256sum -c
            chmod a+x jk
            sudo mv jk /usr/local/bin

  go-mod-cached:
    description: Download or use cached modules
    steps:
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Download Go modules
          command: |
            export PATH=$GOROOT/bin:$PATH
            go mod download
      - save_cache:
          key: go-mod-v2-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/go/pkg/mod

  reload-wkp-ssh-keys:
    description: reload wkp ssh keys into eng
    steps:
      - run:
          name: load ssh keys
          command: |
            # remove the circle config which locks down github keys
            # mv ~/.ssh/config{,.old}
            echo $WKP_GITHUB_PRIVATE_KEY | base64 -d > user-ssh-key
            chmod 600 user-ssh-key
            ssh-agent -s | grep -v echo >> $BASH_ENV
            source $BASH_ENV
            ssh-add -D
            ssh-add user-ssh-key

  setup-integration-test-env:
    description: 'Common steps to integration tests'
    steps:
      - checkout
      - install-integration-test-deps
      - go-mod-cached
      - reload-wkp-ssh-keys
      - attach_workspace:
          at: /tmp/workspace
      - get-wk-binary
      - get-mccp-binary

  install-kind:
    description: 'Installs kind'
    steps:
      - run:
          name: download kind
          command: |
            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.10.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind

jobs:
  build:
    <<: *defaults
    # For nvm stuff
    environment:
      BASH_ENV: ~/.bashrc
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Build all the services"
          command: |
            export GITHUB_TOKEN=$WGE_NPM_GITHUB_TOKEN
            make -j4 BUILD_IN_CONTAINER=false
      - deploy:
          name: Push mccp to S3
          command: |
            TAG=$(./tools/image-tag)

            # aws gets its credential through the AWS_ACCESS_KEY_ID and
            # AWS_SECRET_ACCESS_KEY environment variables.
            export AWS_ACCESS_KEY_ID=$WKP_S3_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$WKP_S3_AWS_SECRET_ACCESS_KEY

            # Upload uniquely tagged binaries
            aws s3 cp cmd/mccp/mccp s3://weaveworks-wkp/mccp-${TAG}-linux-amd64

            # Upload a "master" binary for easy access to latest master build
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws s3 cp cmd/mccp/mccp s3://weaveworks-wkp/mccp-master-linux-amd64
            fi
      - run:
          name: Install helm v3
          command: |
            # install helm
            curl -L https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz | tar xvz
            sudo mv linux-amd64/helm /usr/bin/helm
            sudo chmod +x /usr/bin/helm
      - run:
          name: Publish helm v3 charts
          command: |
            export AWS_ACCESS_KEY_ID=$WKP_S3_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$WKP_S3_AWS_SECRET_ACCESS_KEY

            TAG=$(git describe --always --match "v*")
            IMAGE_TAG=$(./tools/image-tag)
            
            CHART_VALUES_PATH=./charts/mccp/values.yaml
            # Update the MCCP chart values.yaml file with the current image tag
            make update-mccp-chart-values CHART_VALUES_PATH=$CHART_VALUES_PATH

            # Publish the MCCP Helm v3 chart
            ./bin/publish-chart-to-s3.sh $TAG $IMAGE_TAG ./charts/mccp 3
      - persist_to_workspace:
          root: .
          paths:
            - kubectl
            - cmd/mccp/mccp
      - run: docker login -u "$DOCKER_IO_USER" -p "$DOCKER_IO_PASSWORD" docker.io
      - run: make push

  build-darwin:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Build mccp darwin binaries
          command: |
            LOCAL_BINARIES_GOOS=darwin make cmd/mccp/mccp BUILD_IN_CONTAINER=false
            mv cmd/mccp/mccp cmd/mccp/mccp-darwin-amd64
      - deploy:
          name: Push mccp to S3
          command: |
            TAG=$(./tools/image-tag)

            # aws gets its credential through the AWS_ACCESS_KEY_ID and
            # AWS_SECRET_ACCESS_KEY environment variables.
            export AWS_ACCESS_KEY_ID=$WKP_S3_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$WKP_S3_AWS_SECRET_ACCESS_KEY

            # Upload uniquely tagged binaries
            aws s3 cp cmd/mccp/mccp-darwin-amd64 s3://weaveworks-wkp/mccp-${TAG}-darwin-amd64

            # Upload a "master" binary for easy access to latest master build
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws s3 cp cmd/mccp/mccp-darwin-amd64 s3://weaveworks-wkp/mccp-master-darwin-amd64
            fi

  unit-tests:
    <<: *defaults
    working_directory: /src/github.com/weaveworks/wks
    steps:
      - checkout
      - run:
          name: Install kubectl
          command: |
            export KUBECTL_URL=https://dl.k8s.io/v1.14.1/kubernetes-client-linux-amd64.tar.gz
            export KUBECTL_CHECKSUM=da2076ff28b2dae220558014fe5787e1a811900c0b01c1250ad713e3efea072f
            curl --silent -L $KUBECTL_URL -o kubectl.tar.gz
            echo "$KUBECTL_CHECKSUM kubectl.tar.gz" | sha256sum -c
            tar xvzf kubectl.tar.gz --strip-components=3
            sudo mv kubectl /usr/local/bin
      - run:
          name: Run unit tests
          command: |
            go version
            export KUBESEAL_BINARY_PATH=/src/github.com/weaveworks/wks/setup/wk-quickstart/bin/kubeseal # used in unit-tests of workspaces/create_test.go
            export SEALED_SECRETS_CERT_PATH=/src/github.com/weaveworks/wks/test/integration/test/test-sealed-secrets-cert.crt # used in unit-tests of workspaces/create_test.go
            export WKP_NO_SCOPES_GITHUB_TOKEN=$WKP_NO_SCOPES_GITHUB_TOKEN
            make unit-tests BUILD_IN_CONTAINER=false
      - run:
          name: Lint
          command: |
            make lint BUILD_IN_CONTAINER=false

  unit-tests-with-coverage:
    <<: *defaults
    working_directory: /src/github.com/weaveworks/wks
    steps:
      - checkout
      - run:
          name: Install kubectl
          command: |
            export KUBECTL_URL=https://dl.k8s.io/v1.14.1/kubernetes-client-linux-amd64.tar.gz
            export KUBECTL_CHECKSUM=da2076ff28b2dae220558014fe5787e1a811900c0b01c1250ad713e3efea072f
            curl --silent -L $KUBECTL_URL -o kubectl.tar.gz
            echo "$KUBECTL_CHECKSUM kubectl.tar.gz" | sha256sum -c
            tar xvzf kubectl.tar.gz --strip-components=3
            sudo mv kubectl /usr/local/bin
      - run:
          name: Run unit tests
          command: |
            go version
            export KUBESEAL_BINARY_PATH=/src/github.com/weaveworks/wks/setup/wk-quickstart/bin/kubeseal # used in unit-tests of workspaces/create_test.go
            export SEALED_SECRETS_CERT_PATH=/src/github.com/weaveworks/wks/test/integration/test/test-sealed-secrets-cert.crt # used in unit-tests of workspaces/create_test.go
            export WKP_NO_SCOPES_GITHUB_TOKEN=$WKP_NO_SCOPES_GITHUB_TOKEN
            go get github.com/mattn/goveralls

            # Run the tests
            make unit-tests-with-coverage BUILD_IN_CONTAINER=false

            # submit the coverage 1 by 1, seems important that they have a -flagname
            goveralls -coverprofile=.coverprofile -flagname wks -parallel -service=circle-ci -repotoken $WKP_COVERALLS_TOKEN
            (cd cmd/event-writer; goveralls -coverprofile=.coverprofile -flagname event-writer -parallel -service=circle-ci -repotoken $WKP_COVERALLS_TOKEN)
            (cd common; goveralls -coverprofile=.coverprofile -flagname common -parallel -service=circle-ci -repotoken $WKP_COVERALLS_TOKEN)

            # We've finished submitting the coverage
            curl -k "https://coveralls.io/webhook?repo_token=$WKP_COVERALLS_TOKEN" \
              -d "payload[build_num]=$CIRCLE_BUILD_NUM&payload[status]=done"

  # Can be a bit faster
  fast-integration-tests:
    docker:
      - image: docker.io/weaveworks/wkp-wks-build:WKP-2167-user-acceptance-test-8cb85019
    environment:
      <<: *integrationTestCommonEnv
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          name: Run e2e tests
          command: |
            export PATH=$GOROOT/bin:$PATH
            cd test/integration/test
            go test -v -run TestAgent

  fast-integration-tests-go-116:
    docker:
      - image: docker.io/weaveworks/wkp-wks-build:WKP-2167-user-acceptance-test-8cb85019
    environment:
      <<: *integrationTestCommonEnv
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          name: Run e2e tests
          command: |
            export PATH=$GOROOT/bin:$PATH
            # wkp-ci-test-bot / circle-ci-tests token
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            # wkp-ws-test
            export GITHUB_ORG=$WKP_GITHUB_ORG
            # wkp-ci-test-bot
            export GITHUB_USER=$WKP_GITHUB_USER

            go version
            cd $CIRCLE_WORKING_DIRECTORY/cmd/capi-server
            make tests

  mccp-acceptance-tests:
    docker:
      - image: docker.io/weaveworks/wkp-wks-build:build-in-container-ade34cca
        environment:
          <<: *integrationTestCommonEnv
          IMAGE_NAME: centos-cloud/centos-7
          NUM_MASTERS: 1
          NUM_WORKERS: 1
          USE_LB: false
          SKIP_COMPONENTS: true
          MCCP_BIN_PATH: /home/circleci/src/github.com/weaveworks/wks/cmd/mccp/mccp
          # Only run MCCP Acceptance tests (not wkp)
          MCCP_ACCEPTANCE: true
          MCCP_GCE_LEAF_KUBECONFIG: '/tmp/mccp-gce-leaf-kubeconfig'
          MCCP_EKS_LEAF_KUBECONFIG: '/tmp/mccp-eks-leaf-kubeconfig'
          # Uses a pre existing GCE cluster
          # Its cluster repo is at https://github.com/wkp-example-org/mccp-acceptance-tests-gce
          # If the env var below is set, the test will connect the gce cluster to mccp
          CONNECT_GCE_LEAF_TEST: 'true'
          # Uses a pre existing EKS cluster
          # This is not a WKP cluster.
          # If the env var below is set, the test will connect the eks cluster to mccp
          CONNECT_EKS_LEAF_TEST: 'true'
          CONNECT_KIND_WKP_LEAF_TEST: 'true'
          MCCP_KIND_WKP_LEAF_KUBECONFIG: '/tmp/mccp-kind-wkp-leaf-kubeconfig'
          RUN_MCCP_SUITE_WITH_POSTGRES: 'false'
      - image: selenium/standalone-chrome:latest
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    resource_class: large
    steps:
      - setup-integration-test-env
      - install-kind
      - run:
          name: Install helm
          command: |
            # install helm
            curl -L https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz | tar xvz
            sudo mv linux-amd64/helm /usr/bin/helm
            sudo chmod +x /usr/bin/helm
      - setup_remote_docker
      - run:
          name: Setup base config.yaml
          command: |
            cd test/integration/test
            export CLUSTER_NAME="$CIRCLE_JOB-$CIRCLE_BUILD_NUM"
            # create file with docker password
            echo "$DOCKER_IO_PASSWORD" > /tmp/workspace/docker-io-password
            sed -i "s/gitProviderOrg:.*/gitProviderOrg: $WKP_GITHUB_ORG/" config.yaml
            sed -i "s/dockerIOUser:.*/dockerIOUser: $DOCKER_IO_USER/" config.yaml
            sed -i "s|dockerIOPasswordFile:.*|dockerIOPasswordFile: /tmp/workspace/docker-io-password|" config.yaml
            sed -i "s/clusterName:.*/clusterName: $CLUSTER_NAME/" config.yaml
            sed -i "s/track:.*/track: wks-ssh/" config.yaml
            sed -i "s/sshUser:.*/sshUser: weaveworks-cit/" config.yaml
            sed -i "s|sshKeyFile:.*|sshKeyFile: /root/.ssh/weaveworks_cit_id_rsa|" config.yaml
            sed -i "s|podCIDRBlocks:.*|podCIDRBlocks: [$POD_CIDR_BLOCK]|" config.yaml
            sed -i "s|serviceCIDRBlocks:.*|serviceCIDRBlocks: [$SERVICE_CIDR_BLOCK]|" config.yaml
      - run:
          name: Run Acceptance Tests
          no_output_timeout: 20m
          command: |
            export PATH=$GOROOT/bin:$PATH
            # This needs to be set to false otherwise the local repo is deleted at the end of the creation test
            export CLEANUP_REPO=false
            cd test/integration/test

            # install iam-auth
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.8/2020-09-18/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin
            export AWS_ACCESS_KEY_ID=$WKP_EKS_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$WKP_EKS_AWS_SECRET_ACCESS_KEY

            lb_count=$([ "$USE_LB" == "true" ] && echo "1" || echo "0")
            export NUM_HOSTS=$(($NUM_MASTERS + $NUM_WORKERS + $lb_count))
            export USE_IMAGE=0
            # provision $NUM_HOSTS GCE VMs
            ../bin/internal/run-integration-tests.sh up
            ../bin/internal/update-config-with-node-info.sh $NUM_MASTERS $USE_LB

            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            export WORKSPACES_ORG_ADMIN_TOKEN=$WKP_GITHUB_TOKEN
            # create unique cluster config repository name
            export GITHUB_ORG=$WKP_GITHUB_ORG
            export CLUSTER_REPOSITORY=mccp-capi-template-$(openssl rand -hex 8)
            export GIT_REPOSITORY_URL="https://github.com/$GITHUB_ORG/$CLUSTER_REPOSITORY"

            # decode GCE kubeconfig and store at path set in MCCP_GCE_LEAF_KUBECONFIG
            echo $WKP_ACCEPTANCE_GCE_KUBECONFIG
            echo $WKP_ACCEPTANCE_GCE_KUBECONFIG | base64 -d > $MCCP_GCE_LEAF_KUBECONFIG

            # decode EKS kubeconfig and store at path set in MCCP_EKS_LEAF_KUBECONFIG
            echo $WKP_ACCEPTANCE_EKS_KUBECONFIG
            echo $WKP_ACCEPTANCE_EKS_KUBECONFIG | base64 -d > $MCCP_EKS_LEAF_KUBECONFIG

            go test -v -run TestClusterCreation --timeout=99999s
            # Delete flux, it tries to update all the docker images and fails
            # as it doesn't have auth and then we blow through our docker hub api quota
            kubectl delete deployment flux --namespace weavek8sops

            # Update the natsURL in components.js to the node's public IP for the agent in the
            # GCE cluster to be able to connect
            cd /tmp/cluster_dir
            WORKER_NODE_EXTERNAL_IP=$(grep "publicAddress" setup/config.yaml | tail -n 1 | xargs | cut -f 2 -d ' ')
            echo "found worker node ip in config.yaml ${WORKER_NODE_EXTERNAL_IP}"
            NATS_NODEPORT=31490
            cd -

            kubectl create namespace prom
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm repo update
            helm install my-prom prometheus-community/kube-prometheus-stack \
              --namespace prom \
              --version 14.4.0 \
              --values ../../utils/data/mccp-prometheus-values.yaml

            kubectl create namespace mccp
            kubectl create secret docker-registry docker-io-pull-secret \
              --namespace mccp \
              --docker-username="${DOCKER_IO_USER}" \
              --docker-password="${DOCKER_IO_PASSWORD}" 
            kubectl create secret generic git-provider-credentials \
              --namespace=mccp \
              --from-literal="GIT_PROVIDER_TOKEN=${GITHUB_TOKEN}"
            CHART_VERSION=$(git describe --always | sed 's/^[^0-9]*//')
            helm repo add wkpv3 https://s3.us-east-1.amazonaws.com/weaveworks-wkp/charts-v3/
            helm repo update
            helm install my-mccp wkpv3/mccp --version "${CHART_VERSION}" --namespace mccp \
              --set "imagePullSecrets[0].name=docker-io-pull-secret" \
              --set "wkp-ui.image.pullSecrets[0]=docker-io-pull-secret" \
              --set "nats.client.service.nodePort=${NATS_NODEPORT}" \
              --set "agentTemplate.natsURL=${WORKER_NODE_EXTERNAL_IP}:${NATS_NODEPORT}" \
              --set "config.capi.repositoryURL=${GIT_REPOSITORY_URL}" \
              --set "config.capi.baseBranch=main"

            kubectl get pods -A
            # Wait for cluster to settle
            sleep 60

            set -x
            # Install socat locally and start port-forwarding service (required for CircleCI)
            apt-get install -y curl ca-certificates liblz4-tool rsync socat
            ../../utils/scripts/start-portforward-service.sh start

            # Create a kind cluster
            kind create cluster --name my-kind-cluster-01 --config kind-config.yaml --kubeconfig $MCCP_KIND_WKP_LEAF_KUBECONFIG
            # Start port-forward session (required for CircleCI)
            APISERVER_PORT_WKP=$(kubectl --kubeconfig $MCCP_KIND_WKP_LEAF_KUBECONFIG config view -o jsonpath='{.clusters[].cluster.server}' | cut -d: -f 3 -)
            ../../utils/scripts/portforward.sh $APISERVER_PORT_WKP
            # Install cluster components
            export KUBECONFIG=$MCCP_KIND_WKP_LEAF_KUBECONFIG
            export SKIP_PROMPT=1
            export CLUSTER_NAME="$CIRCLE_JOB-$CIRCLE_BUILD_NUM-$RANDOM"
            wkp_kind_cluster_dir=$(mktemp -d)
            cd $wkp_kind_cluster_dir
            $CIRCLE_WORKING_DIRECTORY/cmd/wk/wk setup install --entitlements=$CIRCLE_WORKING_DIRECTORY/test/ci-wks-unlimited.entitlements
            echo "$DOCKER_IO_PASSWORD" > /tmp/workspace/docker-io-password
            sed -i "s/track:.*/track: wks-components/" $wkp_kind_cluster_dir/setup/config.yaml
            sed -i "s/clusterName:.*/clusterName: $CLUSTER_NAME/" $wkp_kind_cluster_dir/setup/config.yaml
            sed -i "s/gitProvider:.*/gitProvider: github/" $wkp_kind_cluster_dir/setup/config.yaml
            sed -i "s/gitProviderOrg:.*/gitProviderOrg: $WKP_GITHUB_ORG/" $wkp_kind_cluster_dir/setup/config.yaml
            sed -i "s/dockerIOUser:.*/dockerIOUser: $DOCKER_IO_USER/" $wkp_kind_cluster_dir/setup/config.yaml 
            sed -i "s|dockerIOPasswordFile:.*|dockerIOPasswordFile: /tmp/workspace/docker-io-password|" $wkp_kind_cluster_dir/setup/config.yaml 
            # don't skip the components we need those
            export SKIP_COMPONENTS=false
            $CIRCLE_WORKING_DIRECTORY/cmd/wk/wk setup run --entitlements=$CIRCLE_WORKING_DIRECTORY/test/ci-wks-unlimited.entitlements
            # Wait until pods are running
            kubectl wait nodes --all --for=condition=ready --timeout=120s || true
            kubectl wait pods -n kube-system -l tier=control-plane --for=condition=ready --timeout=120s || true
            kubectl wait deployment.apps/coredns -n kube-system --for=condition=available --timeout=120s || true
            kubectl get pods -A
            kubectl get nodes
            $CIRCLE_WORKING_DIRECTORY/cmd/wk/wk workspaces add-provider \
                --type github \
                --token "${WORKSPACES_ORG_ADMIN_TOKEN}" \
                --secret-name github-token \
                --git-commit-push \
                --entitlements=$CIRCLE_WORKING_DIRECTORY/test/ci-wks-unlimited.entitlements
            # Unset KUBECONFIG to let kubectl point back to the MCCP cluster under test
            unset KUBECONFIG
 
            cd $CIRCLE_WORKING_DIRECTORY/test/integration/test
            
            kubectl get pods -A
            export SELENIUM_DEBUG=true
            kubectl port-forward -n mccp svc/my-mccp-nginx-ingress-controller 8090:80 &
            cd ../../acceptance/test/
            export ACCEPTANCE_TESTS_DATABASE_TYPE=sqlite
            go test -ginkgo.skip=@VM -ginkgo.v -v --timeout=99999s
            
            if [ ${RUN_MCCP_SUITE_WITH_POSTGRES} == "true" ]; then
              # Deploy postgres
              kubectl apply -f postgres-manifests.yaml

              # Wait for the postgres deployment to rollout
              kubectl wait --for=condition=available --timeout=600s deployment/postgres

              cd /tmp/cluster_dir
              # Get the IP of the postgres service
              POSTGRES_CLUSTER_IP=$(kubectl get service postgres -ojsonpath={.spec.clusterIP})
              sed -i "s/databaseType:.*/databaseType: postgres/" setup/config.yaml
              sed -i "s/databaseURI:.*/databaseURI: $POSTGRES_CLUSTER_IP/" setup/config.yaml
              git pull
              git add setup/config.yaml
              git commit -m "Set database type to postgres"
              git push origin master

              kubectl create secret generic -n wkp-gitops-repo-broker mccp-db-credentials --from-literal=username=postgres --from-literal=password=password -oyaml --dry-run > mccp-db-credentials.yaml
              kubectl apply -f mccp-db-credentials.yaml

              kubectl get pods -A

              RETRIES=0
              MAX_RETRIES=10
              until [ ${DB_TYPE} == 'postgres' ]
              do
                DB_TYPE=$(kubectl get deployment -n wkp-gitops-repo-broker wkp-event-writer -ojsonpath='{.spec.template.spec.containers[0].env[?(@.name=="DB_TYPE")].value}')
                echo "Database type should be postgres: ${DB_TYPE}"
                sleep 5
                RETRIES=$((RETRIES+1))
                if [ $RETRIES -ge $MAX_RETRIES ]; then
                  echo "database type did not update to postgres"
                  exit 1
                fi
              done

              # Run acceptance-tests again with postgres
              cd $CIRCLE_WORKING_DIRECTORY/test/acceptance/test
              ACCEPTANCE_TESTS_DATABASE_TYPE=postgres
              go test -ginkgo.skip=@VM -v --timeout=99999s
            fi

            # Delete the repo backing one of the kind clusters
            hub delete -y "${WKP_GITHUB_ORG}/${CLUSTER_NAME}"
            if [ $CLEANUP_REPO != "false" ]; then
              hub delete -y "${WKP_GITHUB_USER}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"
            fi

            cd ../../integration/test

            ../bin/internal/run-integration-tests.sh destroy
      - run:
          # Ensures that the GCP resources are deleted even if the previous step fails
          name: Destroy GCP resources
          command: |
            cd test/integration/test
            ../bin/internal/run-integration-tests.sh destroy
          when: on_fail
      - store_artifacts:
          path: /tmp/workspace/test
      - store_test_results:
          path: /tmp/workspace/test

  mccp-acceptance-tests-vm:
    machine:
      image: ubuntu-1604:202007-01
    environment:
      <<: *integrationTestCommonEnv
      MCCP_BIN_PATH: /home/circleci/src/github.com/weaveworks/wks/cmd/mccp/mccp
      WEGO_BIN_PATH: /home/circleci/src/github.com/weaveworks/wks/cmd/wego/wego
      SELENIUM_SERVER_JAR_PATH: /home/circleci/src/github.com/weaveworks/wks/cmd/selenium/selenium-server-standalone.jar
      MCCP_ACCEPTANCE: true
      RUN_MCCP_SUITE_WITH_POSTGRES: 'false'
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    resource_class: large
    steps:
      - setup-integration-test-env
      - install-kind
      - get-wego-binary
      - setup-selenium
      - run:
          name: Configure Git
          command: |
            git config --global user.email "test@wkp.org"
            git config --global user.name "Test Wkp"
      - run:
          name: Install helm
          command: |
            # install helm
            curl -L https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz | tar xvz
            sudo mv linux-amd64/helm /usr/bin/helm
            sudo chmod +x /usr/bin/helm
      - run:
          name: Run Acceptance Tests on VM
          no_output_timeout: 20m
          command: |
            export PATH=$GOROOT/bin:$PATH
            cd $CIRCLE_WORKING_DIRECTORY/test/acceptance/test/

            set -x

            # Start selenium server in standalone mode
            xvfb-run -a --server-args="-screen 0 1280x1024x24" java -jar $SELENIUM_SERVER_JAR_PATH &

            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            export WORKSPACES_ORG_ADMIN_TOKEN=$WKP_GITHUB_TOKEN
            # create unique cluster config repository name
            export GITHUB_ORG=$WKP_GITHUB_ORG
            export CLUSTER_REPOSITORY=mccp-capi-template-$(openssl rand -hex 8)
            export GIT_REPOSITORY_URL="https://github.com/$GITHUB_ORG/$CLUSTER_REPOSITORY"
 
            # Create MCCP Kind cluster
            kind create cluster --name my-kind-mccp-cluster --config ../../utils/data/local-mccp-kind-config.yaml
            WORKER_NODE=$(kubectl get node --selector='!node-role.kubernetes.io/master' -o name)
            kubectl label "${WORKER_NODE}" wkp-database-volume-node=true

            WORKER_NODE_EXTERNAL_IP=$(ifconfig ens4 | grep -i MASK | awk '{print $2}' | cut -f2 -d:)
            echo "Worker node ip is ${WORKER_NODE_EXTERNAL_IP}"
            NATS_NODEPORT=31490            

            kubectl create namespace prom
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm repo update
            helm install my-prom prometheus-community/kube-prometheus-stack \
              --namespace prom \
              --version 14.4.0 \
              --values ../../utils/data/mccp-prometheus-values.yaml

            kubectl create namespace mccp
            kubectl create secret docker-registry docker-io-pull-secret \
              --namespace mccp \
              --docker-username="${DOCKER_IO_USER}" \
              --docker-password="${DOCKER_IO_PASSWORD}" 
            kubectl create secret generic git-provider-credentials \
              --namespace=mccp \
              --from-literal="GIT_PROVIDER_TOKEN=${GITHUB_TOKEN}"
            CHART_VERSION=$(git describe --always | sed 's/^[^0-9]*//')
            helm repo add wkpv3 https://s3.us-east-1.amazonaws.com/weaveworks-wkp/charts-v3/
            helm repo update
            helm install my-mccp wkpv3/mccp --version "${CHART_VERSION}" --namespace mccp \
              --set "imagePullSecrets[0].name=docker-io-pull-secret" \
              --set "wkp-ui.image.pullSecrets[0]=docker-io-pull-secret" \
              --set "nats.client.service.nodePort=${NATS_NODEPORT}" \
              --set "agentTemplate.natsURL=${WORKER_NODE_EXTERNAL_IP}:${NATS_NODEPORT}" \
              --set "config.capi.repositoryURL=${GIT_REPOSITORY_URL}" \
              --set "config.capi.baseBranch=main"

            # Wait for cluster to settle
            kubectl wait --for=condition=Ready --timeout=120s -n mccp --all pod

            kubectl get pods -A
            export SELENIUM_DEBUG=true
            kubectl port-forward -n mccp svc/my-mccp-nginx-ingress-controller 8090:80 &
            export ACCEPTANCE_TESTS_DATABASE_TYPE=sqlite
            go test -ginkgo.focus=@VM -ginkgo.v -v --timeout=99999s
            
            if [ ${RUN_MCCP_SUITE_WITH_POSTGRES} == "true" ]; then
              # Deploy postgres
              kubectl apply -f postgres-manifests.yaml

              # Wait for the postgres deployment to rollout
              kubectl wait --for=condition=available --timeout=600s deployment/postgres

              # Get the IP of the postgres service
              POSTGRES_CLUSTER_IP=$(kubectl get service postgres -ojsonpath={.spec.clusterIP})
              kubectl create secret generic mccp-db-credentials --namespace mccp --from-literal=username=postgres --from-literal=password=password

              helm upgrade install my-mccp wkpv3/mccp --version "${CHART_VERSION}" --namespace mccp \
              --set "imagePullSecrets[0].name=docker-io-pull-secret" \
              --set "wkp-ui.image.pullSecrets[0]=docker-io-pull-secret" \
              --set "nats.client.service.nodePort=${NATS_NODEPORT}" \
              --set "agentTemplate.natsURL=${WORKER_NODE_EXTERNAL_IP}:${NATS_NODEPORT}" \
              --set "nginx-ingress-controller.service.type=NodePort" \
              --set "nginx-ingress-controller.service.nodePorts.http=${UI_NODEPORT}" \
              --set "config.capi.repositoryURL=${GIT_REPOSITORY_URL}" \
              --set "config.capi.baseBranch=main" \
              --set "dbConfig.databaseType=postgres" \
              --set "dbConfig.databaseURI=${POSTGRES_CLUSTER_IP}" \
              --set "postgresConfig.databaseName=postgres" 

              kubectl get pods -A

              RETRIES=0
              MAX_RETRIES=10
              until [ ${DB_TYPE} == 'postgres' ]
              do
                DB_TYPE=$(kubectl get deployment -n wkp-gitops-repo-broker wkp-event-writer -ojsonpath='{.spec.template.spec.containers[0].env[?(@.name=="DB_TYPE")].value}')
                echo "Database type should be postgres: ${DB_TYPE}"
                sleep 5
                RETRIES=$((RETRIES+1))
                if [ $RETRIES -ge $MAX_RETRIES ]; then
                  echo "database type did not update to postgres"
                  exit 1
                fi
              done

              # Run acceptance-tests again with postgres
              # cd $CIRCLE_WORKING_DIRECTORY/test/acceptance/test
              ACCEPTANCE_TESTS_DATABASE_TYPE=postgres
              go test -ginkgo.focus=@VM -v --timeout=99999s
            fi
      - store_artifacts:
          path: /tmp/workspace/test
      - store_test_results:
          path: /tmp/workspace/test
          
  mccp-ui-backend-integration-tests:
    docker:
      - image: docker.io/weaveworks/wkp-wks-build:WKP-2167-user-acceptance-test-8cb85019
        environment:
          <<: *integrationTestCommonEnv
      - image: selenium/standalone-chrome:latest
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          name: Run tests
          command: |
            export PATH=$GOROOT/bin:$PATH
            export SELENIUM_DEBUG=true

            export GITHUB_TOKEN=$WGE_NPM_GITHUB_TOKEN
            make ui-build-for-tests
            cd test/integration/test
            go test -ginkgo.v -v -run TestMccpUI -ginkgo.skip=@Integration --timeout=99999s
      - store_artifacts:
          path: /tmp/workspace/test
      - store_test_results:
          path: /tmp/workspace/test

// Code generated by counterfeiter. DO NOT EDIT.
package cachefakes

import (
	"context"
	"sync"

	"github.com/weaveworks/weave-gitops-enterprise/cmd/clusters-service/pkg/protos/profiles"
	"github.com/weaveworks/weave-gitops-enterprise/pkg/helm/watcher/cache"
)

type FakeCache struct {
	DeleteStub        func(context.Context, string, string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetProfileValuesStub        func(context.Context, string, string, string, string) ([]byte, error)
	getProfileValuesMutex       sync.RWMutex
	getProfileValuesArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}
	getProfileValuesReturns struct {
		result1 []byte
		result2 error
	}
	getProfileValuesReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	ListAvailableVersionsForProfileStub        func(context.Context, string, string, string) ([]string, error)
	listAvailableVersionsForProfileMutex       sync.RWMutex
	listAvailableVersionsForProfileArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	listAvailableVersionsForProfileReturns struct {
		result1 []string
		result2 error
	}
	listAvailableVersionsForProfileReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	ListProfilesStub        func(context.Context, string, string) ([]*profiles.Profile, error)
	listProfilesMutex       sync.RWMutex
	listProfilesArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	listProfilesReturns struct {
		result1 []*profiles.Profile
		result2 error
	}
	listProfilesReturnsOnCall map[int]struct {
		result1 []*profiles.Profile
		result2 error
	}
	PutStub        func(context.Context, string, string, cache.Data) error
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 cache.Data
	}
	putReturns struct {
		result1 error
	}
	putReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCache) Delete(arg1 context.Context, arg2 string, arg3 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2, arg3})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCache) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeCache) DeleteCalls(stub func(context.Context, string, string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeCache) DeleteArgsForCall(i int) (context.Context, string, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCache) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCache) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCache) GetProfileValues(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 string) ([]byte, error) {
	fake.getProfileValuesMutex.Lock()
	ret, specificReturn := fake.getProfileValuesReturnsOnCall[len(fake.getProfileValuesArgsForCall)]
	fake.getProfileValuesArgsForCall = append(fake.getProfileValuesArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.GetProfileValuesStub
	fakeReturns := fake.getProfileValuesReturns
	fake.recordInvocation("GetProfileValues", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.getProfileValuesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCache) GetProfileValuesCallCount() int {
	fake.getProfileValuesMutex.RLock()
	defer fake.getProfileValuesMutex.RUnlock()
	return len(fake.getProfileValuesArgsForCall)
}

func (fake *FakeCache) GetProfileValuesCalls(stub func(context.Context, string, string, string, string) ([]byte, error)) {
	fake.getProfileValuesMutex.Lock()
	defer fake.getProfileValuesMutex.Unlock()
	fake.GetProfileValuesStub = stub
}

func (fake *FakeCache) GetProfileValuesArgsForCall(i int) (context.Context, string, string, string, string) {
	fake.getProfileValuesMutex.RLock()
	defer fake.getProfileValuesMutex.RUnlock()
	argsForCall := fake.getProfileValuesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCache) GetProfileValuesReturns(result1 []byte, result2 error) {
	fake.getProfileValuesMutex.Lock()
	defer fake.getProfileValuesMutex.Unlock()
	fake.GetProfileValuesStub = nil
	fake.getProfileValuesReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCache) GetProfileValuesReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getProfileValuesMutex.Lock()
	defer fake.getProfileValuesMutex.Unlock()
	fake.GetProfileValuesStub = nil
	if fake.getProfileValuesReturnsOnCall == nil {
		fake.getProfileValuesReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getProfileValuesReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCache) ListAvailableVersionsForProfile(arg1 context.Context, arg2 string, arg3 string, arg4 string) ([]string, error) {
	fake.listAvailableVersionsForProfileMutex.Lock()
	ret, specificReturn := fake.listAvailableVersionsForProfileReturnsOnCall[len(fake.listAvailableVersionsForProfileArgsForCall)]
	fake.listAvailableVersionsForProfileArgsForCall = append(fake.listAvailableVersionsForProfileArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListAvailableVersionsForProfileStub
	fakeReturns := fake.listAvailableVersionsForProfileReturns
	fake.recordInvocation("ListAvailableVersionsForProfile", []interface{}{arg1, arg2, arg3, arg4})
	fake.listAvailableVersionsForProfileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCache) ListAvailableVersionsForProfileCallCount() int {
	fake.listAvailableVersionsForProfileMutex.RLock()
	defer fake.listAvailableVersionsForProfileMutex.RUnlock()
	return len(fake.listAvailableVersionsForProfileArgsForCall)
}

func (fake *FakeCache) ListAvailableVersionsForProfileCalls(stub func(context.Context, string, string, string) ([]string, error)) {
	fake.listAvailableVersionsForProfileMutex.Lock()
	defer fake.listAvailableVersionsForProfileMutex.Unlock()
	fake.ListAvailableVersionsForProfileStub = stub
}

func (fake *FakeCache) ListAvailableVersionsForProfileArgsForCall(i int) (context.Context, string, string, string) {
	fake.listAvailableVersionsForProfileMutex.RLock()
	defer fake.listAvailableVersionsForProfileMutex.RUnlock()
	argsForCall := fake.listAvailableVersionsForProfileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCache) ListAvailableVersionsForProfileReturns(result1 []string, result2 error) {
	fake.listAvailableVersionsForProfileMutex.Lock()
	defer fake.listAvailableVersionsForProfileMutex.Unlock()
	fake.ListAvailableVersionsForProfileStub = nil
	fake.listAvailableVersionsForProfileReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCache) ListAvailableVersionsForProfileReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listAvailableVersionsForProfileMutex.Lock()
	defer fake.listAvailableVersionsForProfileMutex.Unlock()
	fake.ListAvailableVersionsForProfileStub = nil
	if fake.listAvailableVersionsForProfileReturnsOnCall == nil {
		fake.listAvailableVersionsForProfileReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listAvailableVersionsForProfileReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCache) ListProfiles(arg1 context.Context, arg2 string, arg3 string) ([]*profiles.Profile, error) {
	fake.listProfilesMutex.Lock()
	ret, specificReturn := fake.listProfilesReturnsOnCall[len(fake.listProfilesArgsForCall)]
	fake.listProfilesArgsForCall = append(fake.listProfilesArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ListProfilesStub
	fakeReturns := fake.listProfilesReturns
	fake.recordInvocation("ListProfiles", []interface{}{arg1, arg2, arg3})
	fake.listProfilesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCache) ListProfilesCallCount() int {
	fake.listProfilesMutex.RLock()
	defer fake.listProfilesMutex.RUnlock()
	return len(fake.listProfilesArgsForCall)
}

func (fake *FakeCache) ListProfilesCalls(stub func(context.Context, string, string) ([]*profiles.Profile, error)) {
	fake.listProfilesMutex.Lock()
	defer fake.listProfilesMutex.Unlock()
	fake.ListProfilesStub = stub
}

func (fake *FakeCache) ListProfilesArgsForCall(i int) (context.Context, string, string) {
	fake.listProfilesMutex.RLock()
	defer fake.listProfilesMutex.RUnlock()
	argsForCall := fake.listProfilesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCache) ListProfilesReturns(result1 []*profiles.Profile, result2 error) {
	fake.listProfilesMutex.Lock()
	defer fake.listProfilesMutex.Unlock()
	fake.ListProfilesStub = nil
	fake.listProfilesReturns = struct {
		result1 []*profiles.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeCache) ListProfilesReturnsOnCall(i int, result1 []*profiles.Profile, result2 error) {
	fake.listProfilesMutex.Lock()
	defer fake.listProfilesMutex.Unlock()
	fake.ListProfilesStub = nil
	if fake.listProfilesReturnsOnCall == nil {
		fake.listProfilesReturnsOnCall = make(map[int]struct {
			result1 []*profiles.Profile
			result2 error
		})
	}
	fake.listProfilesReturnsOnCall[i] = struct {
		result1 []*profiles.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeCache) Put(arg1 context.Context, arg2 string, arg3 string, arg4 cache.Data) error {
	fake.putMutex.Lock()
	ret, specificReturn := fake.putReturnsOnCall[len(fake.putArgsForCall)]
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 cache.Data
	}{arg1, arg2, arg3, arg4})
	stub := fake.PutStub
	fakeReturns := fake.putReturns
	fake.recordInvocation("Put", []interface{}{arg1, arg2, arg3, arg4})
	fake.putMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCache) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *FakeCache) PutCalls(stub func(context.Context, string, string, cache.Data) error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = stub
}

func (fake *FakeCache) PutArgsForCall(i int) (context.Context, string, string, cache.Data) {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	argsForCall := fake.putArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCache) PutReturns(result1 error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = nil
	fake.putReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCache) PutReturnsOnCall(i int, result1 error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = nil
	if fake.putReturnsOnCall == nil {
		fake.putReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCache) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getProfileValuesMutex.RLock()
	defer fake.getProfileValuesMutex.RUnlock()
	fake.listAvailableVersionsForProfileMutex.RLock()
	defer fake.listAvailableVersionsForProfileMutex.RUnlock()
	fake.listProfilesMutex.RLock()
	defer fake.listProfilesMutex.RUnlock()
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCache) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cache.Cache = new(FakeCache)

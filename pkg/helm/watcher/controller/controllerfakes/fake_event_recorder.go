// Code generated by counterfeiter. DO NOT EDIT.
package controllerfakes

import (
	"sync"

	"k8s.io/apimachinery/pkg/runtime"
)

type FakeEventRecorder struct {
	AnnotatedEventfStub        func(runtime.Object, map[string]string, string, string, string, ...interface{})
	annotatedEventfMutex       sync.RWMutex
	annotatedEventfArgsForCall []struct {
		arg1 runtime.Object
		arg2 map[string]string
		arg3 string
		arg4 string
		arg5 string
		arg6 []interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventRecorder) AnnotatedEventf(arg1 runtime.Object, arg2 map[string]string, arg3 string, arg4 string, arg5 string, arg6 ...interface{}) {
	fake.annotatedEventfMutex.Lock()
	fake.annotatedEventfArgsForCall = append(fake.annotatedEventfArgsForCall, struct {
		arg1 runtime.Object
		arg2 map[string]string
		arg3 string
		arg4 string
		arg5 string
		arg6 []interface{}
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.AnnotatedEventfStub
	fake.recordInvocation("AnnotatedEventf", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.annotatedEventfMutex.Unlock()
	if stub != nil {
		fake.AnnotatedEventfStub(arg1, arg2, arg3, arg4, arg5, arg6...)
	}
}

func (fake *FakeEventRecorder) AnnotatedEventfCallCount() int {
	fake.annotatedEventfMutex.RLock()
	defer fake.annotatedEventfMutex.RUnlock()
	return len(fake.annotatedEventfArgsForCall)
}

func (fake *FakeEventRecorder) AnnotatedEventfCalls(stub func(runtime.Object, map[string]string, string, string, string, ...interface{})) {
	fake.annotatedEventfMutex.Lock()
	defer fake.annotatedEventfMutex.Unlock()
	fake.AnnotatedEventfStub = stub
}

func (fake *FakeEventRecorder) AnnotatedEventfArgsForCall(i int) (runtime.Object, map[string]string, string, string, string, []interface{}) {
	fake.annotatedEventfMutex.RLock()
	defer fake.annotatedEventfMutex.RUnlock()
	argsForCall := fake.annotatedEventfArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeEventRecorder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.annotatedEventfMutex.RLock()
	defer fake.annotatedEventfMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventRecorder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

// Code generated by counterfeiter. DO NOT EDIT.
package clustersfakes

import (
	"sync"

	"github.com/weaveworks/weave-gitops-enterprise/pkg/query/collector/clusters"
	"github.com/weaveworks/weave-gitops/core/clustersmngr"
)

type FakeSubscription struct {
	UnsubscribeStub        func()
	unsubscribeMutex       sync.RWMutex
	unsubscribeArgsForCall []struct {
	}
	UpdatesStub        func() chan clustersmngr.ClusterListUpdate
	updatesMutex       sync.RWMutex
	updatesArgsForCall []struct {
	}
	updatesReturns struct {
		result1 chan clustersmngr.ClusterListUpdate
	}
	updatesReturnsOnCall map[int]struct {
		result1 chan clustersmngr.ClusterListUpdate
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSubscription) Unsubscribe() {
	fake.unsubscribeMutex.Lock()
	fake.unsubscribeArgsForCall = append(fake.unsubscribeArgsForCall, struct {
	}{})
	stub := fake.UnsubscribeStub
	fake.recordInvocation("Unsubscribe", []interface{}{})
	fake.unsubscribeMutex.Unlock()
	if stub != nil {
		fake.UnsubscribeStub()
	}
}

func (fake *FakeSubscription) UnsubscribeCallCount() int {
	fake.unsubscribeMutex.RLock()
	defer fake.unsubscribeMutex.RUnlock()
	return len(fake.unsubscribeArgsForCall)
}

func (fake *FakeSubscription) UnsubscribeCalls(stub func()) {
	fake.unsubscribeMutex.Lock()
	defer fake.unsubscribeMutex.Unlock()
	fake.UnsubscribeStub = stub
}

func (fake *FakeSubscription) Updates() chan clustersmngr.ClusterListUpdate {
	fake.updatesMutex.Lock()
	ret, specificReturn := fake.updatesReturnsOnCall[len(fake.updatesArgsForCall)]
	fake.updatesArgsForCall = append(fake.updatesArgsForCall, struct {
	}{})
	stub := fake.UpdatesStub
	fakeReturns := fake.updatesReturns
	fake.recordInvocation("Updates", []interface{}{})
	fake.updatesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSubscription) UpdatesCallCount() int {
	fake.updatesMutex.RLock()
	defer fake.updatesMutex.RUnlock()
	return len(fake.updatesArgsForCall)
}

func (fake *FakeSubscription) UpdatesCalls(stub func() chan clustersmngr.ClusterListUpdate) {
	fake.updatesMutex.Lock()
	defer fake.updatesMutex.Unlock()
	fake.UpdatesStub = stub
}

func (fake *FakeSubscription) UpdatesReturns(result1 chan clustersmngr.ClusterListUpdate) {
	fake.updatesMutex.Lock()
	defer fake.updatesMutex.Unlock()
	fake.UpdatesStub = nil
	fake.updatesReturns = struct {
		result1 chan clustersmngr.ClusterListUpdate
	}{result1}
}

func (fake *FakeSubscription) UpdatesReturnsOnCall(i int, result1 chan clustersmngr.ClusterListUpdate) {
	fake.updatesMutex.Lock()
	defer fake.updatesMutex.Unlock()
	fake.UpdatesStub = nil
	if fake.updatesReturnsOnCall == nil {
		fake.updatesReturnsOnCall = make(map[int]struct {
			result1 chan clustersmngr.ClusterListUpdate
		})
	}
	fake.updatesReturnsOnCall[i] = struct {
		result1 chan clustersmngr.ClusterListUpdate
	}{result1}
}

func (fake *FakeSubscription) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.unsubscribeMutex.RLock()
	defer fake.unsubscribeMutex.RUnlock()
	fake.updatesMutex.RLock()
	defer fake.updatesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSubscription) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ clusters.Subscription = new(FakeSubscription)

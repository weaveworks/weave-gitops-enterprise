// Code generated by counterfeiter. DO NOT EDIT.
package clustersfakes

import (
	"sync"

	"github.com/weaveworks/weave-gitops-enterprise/pkg/query/collector/clusters"
	"github.com/weaveworks/weave-gitops/core/clustersmngr/cluster"
)

type FakeSubscriber struct {
	GetClustersStub        func() []cluster.Cluster
	getClustersMutex       sync.RWMutex
	getClustersArgsForCall []struct {
	}
	getClustersReturns struct {
		result1 []cluster.Cluster
	}
	getClustersReturnsOnCall map[int]struct {
		result1 []cluster.Cluster
	}
	SubscribeStub        func() clusters.Subscription
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct {
	}
	subscribeReturns struct {
		result1 clusters.Subscription
	}
	subscribeReturnsOnCall map[int]struct {
		result1 clusters.Subscription
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSubscriber) GetClusters() []cluster.Cluster {
	fake.getClustersMutex.Lock()
	ret, specificReturn := fake.getClustersReturnsOnCall[len(fake.getClustersArgsForCall)]
	fake.getClustersArgsForCall = append(fake.getClustersArgsForCall, struct {
	}{})
	stub := fake.GetClustersStub
	fakeReturns := fake.getClustersReturns
	fake.recordInvocation("GetClusters", []interface{}{})
	fake.getClustersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSubscriber) GetClustersCallCount() int {
	fake.getClustersMutex.RLock()
	defer fake.getClustersMutex.RUnlock()
	return len(fake.getClustersArgsForCall)
}

func (fake *FakeSubscriber) GetClustersCalls(stub func() []cluster.Cluster) {
	fake.getClustersMutex.Lock()
	defer fake.getClustersMutex.Unlock()
	fake.GetClustersStub = stub
}

func (fake *FakeSubscriber) GetClustersReturns(result1 []cluster.Cluster) {
	fake.getClustersMutex.Lock()
	defer fake.getClustersMutex.Unlock()
	fake.GetClustersStub = nil
	fake.getClustersReturns = struct {
		result1 []cluster.Cluster
	}{result1}
}

func (fake *FakeSubscriber) GetClustersReturnsOnCall(i int, result1 []cluster.Cluster) {
	fake.getClustersMutex.Lock()
	defer fake.getClustersMutex.Unlock()
	fake.GetClustersStub = nil
	if fake.getClustersReturnsOnCall == nil {
		fake.getClustersReturnsOnCall = make(map[int]struct {
			result1 []cluster.Cluster
		})
	}
	fake.getClustersReturnsOnCall[i] = struct {
		result1 []cluster.Cluster
	}{result1}
}

func (fake *FakeSubscriber) Subscribe() clusters.Subscription {
	fake.subscribeMutex.Lock()
	ret, specificReturn := fake.subscribeReturnsOnCall[len(fake.subscribeArgsForCall)]
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct {
	}{})
	stub := fake.SubscribeStub
	fakeReturns := fake.subscribeReturns
	fake.recordInvocation("Subscribe", []interface{}{})
	fake.subscribeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSubscriber) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *FakeSubscriber) SubscribeCalls(stub func() clusters.Subscription) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = stub
}

func (fake *FakeSubscriber) SubscribeReturns(result1 clusters.Subscription) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = nil
	fake.subscribeReturns = struct {
		result1 clusters.Subscription
	}{result1}
}

func (fake *FakeSubscriber) SubscribeReturnsOnCall(i int, result1 clusters.Subscription) {
	fake.subscribeMutex.Lock()
	defer fake.subscribeMutex.Unlock()
	fake.SubscribeStub = nil
	if fake.subscribeReturnsOnCall == nil {
		fake.subscribeReturnsOnCall = make(map[int]struct {
			result1 clusters.Subscription
		})
	}
	fake.subscribeReturnsOnCall[i] = struct {
		result1 clusters.Subscription
	}{result1}
}

func (fake *FakeSubscriber) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getClustersMutex.RLock()
	defer fake.getClustersMutex.RUnlock()
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSubscriber) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ clusters.Subscriber = new(FakeSubscriber)

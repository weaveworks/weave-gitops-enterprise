// Code generated by counterfeiter. DO NOT EDIT.
package storefakes

import (
	"sync"

	"github.com/weaveworks/weave-gitops-enterprise/pkg/query/internal/models"
	"github.com/weaveworks/weave-gitops-enterprise/pkg/query/store"
)

type FakeIterator struct {
	AllStub        func() ([]models.Object, error)
	allMutex       sync.RWMutex
	allArgsForCall []struct {
	}
	allReturns struct {
		result1 []models.Object
		result2 error
	}
	allReturnsOnCall map[int]struct {
		result1 []models.Object
		result2 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	NextStub        func() bool
	nextMutex       sync.RWMutex
	nextArgsForCall []struct {
	}
	nextReturns struct {
		result1 bool
	}
	nextReturnsOnCall map[int]struct {
		result1 bool
	}
	PageStub        func(int, int) ([]models.Object, error)
	pageMutex       sync.RWMutex
	pageArgsForCall []struct {
		arg1 int
		arg2 int
	}
	pageReturns struct {
		result1 []models.Object
		result2 error
	}
	pageReturnsOnCall map[int]struct {
		result1 []models.Object
		result2 error
	}
	RowStub        func() (models.Object, error)
	rowMutex       sync.RWMutex
	rowArgsForCall []struct {
	}
	rowReturns struct {
		result1 models.Object
		result2 error
	}
	rowReturnsOnCall map[int]struct {
		result1 models.Object
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIterator) All() ([]models.Object, error) {
	fake.allMutex.Lock()
	ret, specificReturn := fake.allReturnsOnCall[len(fake.allArgsForCall)]
	fake.allArgsForCall = append(fake.allArgsForCall, struct {
	}{})
	stub := fake.AllStub
	fakeReturns := fake.allReturns
	fake.recordInvocation("All", []interface{}{})
	fake.allMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIterator) AllCallCount() int {
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	return len(fake.allArgsForCall)
}

func (fake *FakeIterator) AllCalls(stub func() ([]models.Object, error)) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = stub
}

func (fake *FakeIterator) AllReturns(result1 []models.Object, result2 error) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = nil
	fake.allReturns = struct {
		result1 []models.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeIterator) AllReturnsOnCall(i int, result1 []models.Object, result2 error) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = nil
	if fake.allReturnsOnCall == nil {
		fake.allReturnsOnCall = make(map[int]struct {
			result1 []models.Object
			result2 error
		})
	}
	fake.allReturnsOnCall[i] = struct {
		result1 []models.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeIterator) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIterator) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeIterator) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeIterator) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIterator) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIterator) Next() bool {
	fake.nextMutex.Lock()
	ret, specificReturn := fake.nextReturnsOnCall[len(fake.nextArgsForCall)]
	fake.nextArgsForCall = append(fake.nextArgsForCall, struct {
	}{})
	stub := fake.NextStub
	fakeReturns := fake.nextReturns
	fake.recordInvocation("Next", []interface{}{})
	fake.nextMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIterator) NextCallCount() int {
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	return len(fake.nextArgsForCall)
}

func (fake *FakeIterator) NextCalls(stub func() bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = stub
}

func (fake *FakeIterator) NextReturns(result1 bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = nil
	fake.nextReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIterator) NextReturnsOnCall(i int, result1 bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = nil
	if fake.nextReturnsOnCall == nil {
		fake.nextReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.nextReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIterator) Page(arg1 int, arg2 int) ([]models.Object, error) {
	fake.pageMutex.Lock()
	ret, specificReturn := fake.pageReturnsOnCall[len(fake.pageArgsForCall)]
	fake.pageArgsForCall = append(fake.pageArgsForCall, struct {
		arg1 int
		arg2 int
	}{arg1, arg2})
	stub := fake.PageStub
	fakeReturns := fake.pageReturns
	fake.recordInvocation("Page", []interface{}{arg1, arg2})
	fake.pageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIterator) PageCallCount() int {
	fake.pageMutex.RLock()
	defer fake.pageMutex.RUnlock()
	return len(fake.pageArgsForCall)
}

func (fake *FakeIterator) PageCalls(stub func(int, int) ([]models.Object, error)) {
	fake.pageMutex.Lock()
	defer fake.pageMutex.Unlock()
	fake.PageStub = stub
}

func (fake *FakeIterator) PageArgsForCall(i int) (int, int) {
	fake.pageMutex.RLock()
	defer fake.pageMutex.RUnlock()
	argsForCall := fake.pageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIterator) PageReturns(result1 []models.Object, result2 error) {
	fake.pageMutex.Lock()
	defer fake.pageMutex.Unlock()
	fake.PageStub = nil
	fake.pageReturns = struct {
		result1 []models.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeIterator) PageReturnsOnCall(i int, result1 []models.Object, result2 error) {
	fake.pageMutex.Lock()
	defer fake.pageMutex.Unlock()
	fake.PageStub = nil
	if fake.pageReturnsOnCall == nil {
		fake.pageReturnsOnCall = make(map[int]struct {
			result1 []models.Object
			result2 error
		})
	}
	fake.pageReturnsOnCall[i] = struct {
		result1 []models.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeIterator) Row() (models.Object, error) {
	fake.rowMutex.Lock()
	ret, specificReturn := fake.rowReturnsOnCall[len(fake.rowArgsForCall)]
	fake.rowArgsForCall = append(fake.rowArgsForCall, struct {
	}{})
	stub := fake.RowStub
	fakeReturns := fake.rowReturns
	fake.recordInvocation("Row", []interface{}{})
	fake.rowMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIterator) RowCallCount() int {
	fake.rowMutex.RLock()
	defer fake.rowMutex.RUnlock()
	return len(fake.rowArgsForCall)
}

func (fake *FakeIterator) RowCalls(stub func() (models.Object, error)) {
	fake.rowMutex.Lock()
	defer fake.rowMutex.Unlock()
	fake.RowStub = stub
}

func (fake *FakeIterator) RowReturns(result1 models.Object, result2 error) {
	fake.rowMutex.Lock()
	defer fake.rowMutex.Unlock()
	fake.RowStub = nil
	fake.rowReturns = struct {
		result1 models.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeIterator) RowReturnsOnCall(i int, result1 models.Object, result2 error) {
	fake.rowMutex.Lock()
	defer fake.rowMutex.Unlock()
	fake.RowStub = nil
	if fake.rowReturnsOnCall == nil {
		fake.rowReturnsOnCall = make(map[int]struct {
			result1 models.Object
			result2 error
		})
	}
	fake.rowReturnsOnCall[i] = struct {
		result1 models.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeIterator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	fake.pageMutex.RLock()
	defer fake.pageMutex.RUnlock()
	fake.rowMutex.RLock()
	defer fake.rowMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIterator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.Iterator = new(FakeIterator)

// Code generated by counterfeiter. DO NOT EDIT.
package storefakes

import (
	"context"
	"sync"

	"github.com/weaveworks/weave-gitops-enterprise/pkg/query/internal/models"
	"github.com/weaveworks/weave-gitops-enterprise/pkg/query/store"
)

type FakeIndexer struct {
	AddStub        func(context.Context, []models.Object) error
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 context.Context
		arg2 []models.Object
	}
	addReturns struct {
		result1 error
	}
	addReturnsOnCall map[int]struct {
		result1 error
	}
	ListFacetsStub        func(context.Context) (store.Facets, error)
	listFacetsMutex       sync.RWMutex
	listFacetsArgsForCall []struct {
		arg1 context.Context
	}
	listFacetsReturns struct {
		result1 store.Facets
		result2 error
	}
	listFacetsReturnsOnCall map[int]struct {
		result1 store.Facets
		result2 error
	}
	RemoveStub        func(context.Context, []models.Object) error
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		arg1 context.Context
		arg2 []models.Object
	}
	removeReturns struct {
		result1 error
	}
	removeReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveByQueryStub        func(context.Context, string) error
	removeByQueryMutex       sync.RWMutex
	removeByQueryArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	removeByQueryReturns struct {
		result1 error
	}
	removeByQueryReturnsOnCall map[int]struct {
		result1 error
	}
	SearchStub        func(context.Context, store.Query, store.QueryOption) (store.Iterator, error)
	searchMutex       sync.RWMutex
	searchArgsForCall []struct {
		arg1 context.Context
		arg2 store.Query
		arg3 store.QueryOption
	}
	searchReturns struct {
		result1 store.Iterator
		result2 error
	}
	searchReturnsOnCall map[int]struct {
		result1 store.Iterator
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIndexer) Add(arg1 context.Context, arg2 []models.Object) error {
	var arg2Copy []models.Object
	if arg2 != nil {
		arg2Copy = make([]models.Object, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 context.Context
		arg2 []models.Object
	}{arg1, arg2Copy})
	stub := fake.AddStub
	fakeReturns := fake.addReturns
	fake.recordInvocation("Add", []interface{}{arg1, arg2Copy})
	fake.addMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIndexer) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeIndexer) AddCalls(stub func(context.Context, []models.Object) error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeIndexer) AddArgsForCall(i int) (context.Context, []models.Object) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIndexer) AddReturns(result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexer) AddReturnsOnCall(i int, result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexer) ListFacets(arg1 context.Context) (store.Facets, error) {
	fake.listFacetsMutex.Lock()
	ret, specificReturn := fake.listFacetsReturnsOnCall[len(fake.listFacetsArgsForCall)]
	fake.listFacetsArgsForCall = append(fake.listFacetsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListFacetsStub
	fakeReturns := fake.listFacetsReturns
	fake.recordInvocation("ListFacets", []interface{}{arg1})
	fake.listFacetsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIndexer) ListFacetsCallCount() int {
	fake.listFacetsMutex.RLock()
	defer fake.listFacetsMutex.RUnlock()
	return len(fake.listFacetsArgsForCall)
}

func (fake *FakeIndexer) ListFacetsCalls(stub func(context.Context) (store.Facets, error)) {
	fake.listFacetsMutex.Lock()
	defer fake.listFacetsMutex.Unlock()
	fake.ListFacetsStub = stub
}

func (fake *FakeIndexer) ListFacetsArgsForCall(i int) context.Context {
	fake.listFacetsMutex.RLock()
	defer fake.listFacetsMutex.RUnlock()
	argsForCall := fake.listFacetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIndexer) ListFacetsReturns(result1 store.Facets, result2 error) {
	fake.listFacetsMutex.Lock()
	defer fake.listFacetsMutex.Unlock()
	fake.ListFacetsStub = nil
	fake.listFacetsReturns = struct {
		result1 store.Facets
		result2 error
	}{result1, result2}
}

func (fake *FakeIndexer) ListFacetsReturnsOnCall(i int, result1 store.Facets, result2 error) {
	fake.listFacetsMutex.Lock()
	defer fake.listFacetsMutex.Unlock()
	fake.ListFacetsStub = nil
	if fake.listFacetsReturnsOnCall == nil {
		fake.listFacetsReturnsOnCall = make(map[int]struct {
			result1 store.Facets
			result2 error
		})
	}
	fake.listFacetsReturnsOnCall[i] = struct {
		result1 store.Facets
		result2 error
	}{result1, result2}
}

func (fake *FakeIndexer) Remove(arg1 context.Context, arg2 []models.Object) error {
	var arg2Copy []models.Object
	if arg2 != nil {
		arg2Copy = make([]models.Object, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.removeMutex.Lock()
	ret, specificReturn := fake.removeReturnsOnCall[len(fake.removeArgsForCall)]
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		arg1 context.Context
		arg2 []models.Object
	}{arg1, arg2Copy})
	stub := fake.RemoveStub
	fakeReturns := fake.removeReturns
	fake.recordInvocation("Remove", []interface{}{arg1, arg2Copy})
	fake.removeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIndexer) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *FakeIndexer) RemoveCalls(stub func(context.Context, []models.Object) error) {
	fake.removeMutex.Lock()
	defer fake.removeMutex.Unlock()
	fake.RemoveStub = stub
}

func (fake *FakeIndexer) RemoveArgsForCall(i int) (context.Context, []models.Object) {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	argsForCall := fake.removeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIndexer) RemoveReturns(result1 error) {
	fake.removeMutex.Lock()
	defer fake.removeMutex.Unlock()
	fake.RemoveStub = nil
	fake.removeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexer) RemoveReturnsOnCall(i int, result1 error) {
	fake.removeMutex.Lock()
	defer fake.removeMutex.Unlock()
	fake.RemoveStub = nil
	if fake.removeReturnsOnCall == nil {
		fake.removeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexer) RemoveByQuery(arg1 context.Context, arg2 string) error {
	fake.removeByQueryMutex.Lock()
	ret, specificReturn := fake.removeByQueryReturnsOnCall[len(fake.removeByQueryArgsForCall)]
	fake.removeByQueryArgsForCall = append(fake.removeByQueryArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.RemoveByQueryStub
	fakeReturns := fake.removeByQueryReturns
	fake.recordInvocation("RemoveByQuery", []interface{}{arg1, arg2})
	fake.removeByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIndexer) RemoveByQueryCallCount() int {
	fake.removeByQueryMutex.RLock()
	defer fake.removeByQueryMutex.RUnlock()
	return len(fake.removeByQueryArgsForCall)
}

func (fake *FakeIndexer) RemoveByQueryCalls(stub func(context.Context, string) error) {
	fake.removeByQueryMutex.Lock()
	defer fake.removeByQueryMutex.Unlock()
	fake.RemoveByQueryStub = stub
}

func (fake *FakeIndexer) RemoveByQueryArgsForCall(i int) (context.Context, string) {
	fake.removeByQueryMutex.RLock()
	defer fake.removeByQueryMutex.RUnlock()
	argsForCall := fake.removeByQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIndexer) RemoveByQueryReturns(result1 error) {
	fake.removeByQueryMutex.Lock()
	defer fake.removeByQueryMutex.Unlock()
	fake.RemoveByQueryStub = nil
	fake.removeByQueryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexer) RemoveByQueryReturnsOnCall(i int, result1 error) {
	fake.removeByQueryMutex.Lock()
	defer fake.removeByQueryMutex.Unlock()
	fake.RemoveByQueryStub = nil
	if fake.removeByQueryReturnsOnCall == nil {
		fake.removeByQueryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeByQueryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexer) Search(arg1 context.Context, arg2 store.Query, arg3 store.QueryOption) (store.Iterator, error) {
	fake.searchMutex.Lock()
	ret, specificReturn := fake.searchReturnsOnCall[len(fake.searchArgsForCall)]
	fake.searchArgsForCall = append(fake.searchArgsForCall, struct {
		arg1 context.Context
		arg2 store.Query
		arg3 store.QueryOption
	}{arg1, arg2, arg3})
	stub := fake.SearchStub
	fakeReturns := fake.searchReturns
	fake.recordInvocation("Search", []interface{}{arg1, arg2, arg3})
	fake.searchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIndexer) SearchCallCount() int {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	return len(fake.searchArgsForCall)
}

func (fake *FakeIndexer) SearchCalls(stub func(context.Context, store.Query, store.QueryOption) (store.Iterator, error)) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = stub
}

func (fake *FakeIndexer) SearchArgsForCall(i int) (context.Context, store.Query, store.QueryOption) {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	argsForCall := fake.searchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIndexer) SearchReturns(result1 store.Iterator, result2 error) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = nil
	fake.searchReturns = struct {
		result1 store.Iterator
		result2 error
	}{result1, result2}
}

func (fake *FakeIndexer) SearchReturnsOnCall(i int, result1 store.Iterator, result2 error) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = nil
	if fake.searchReturnsOnCall == nil {
		fake.searchReturnsOnCall = make(map[int]struct {
			result1 store.Iterator
			result2 error
		})
	}
	fake.searchReturnsOnCall[i] = struct {
		result1 store.Iterator
		result2 error
	}{result1, result2}
}

func (fake *FakeIndexer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.listFacetsMutex.RLock()
	defer fake.listFacetsMutex.RUnlock()
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	fake.removeByQueryMutex.RLock()
	defer fake.removeByQueryMutex.RUnlock()
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIndexer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.Indexer = new(FakeIndexer)

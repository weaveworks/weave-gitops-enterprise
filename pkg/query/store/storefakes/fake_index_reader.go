// Code generated by counterfeiter. DO NOT EDIT.
package storefakes

import (
	"context"
	"sync"

	"github.com/weaveworks/weave-gitops-enterprise/pkg/query/store"
)

type FakeIndexReader struct {
	ListFacetsStub        func(context.Context) (store.Facets, error)
	listFacetsMutex       sync.RWMutex
	listFacetsArgsForCall []struct {
		arg1 context.Context
	}
	listFacetsReturns struct {
		result1 store.Facets
		result2 error
	}
	listFacetsReturnsOnCall map[int]struct {
		result1 store.Facets
		result2 error
	}
	SearchStub        func(context.Context, store.Query, store.QueryOption) (store.Iterator, error)
	searchMutex       sync.RWMutex
	searchArgsForCall []struct {
		arg1 context.Context
		arg2 store.Query
		arg3 store.QueryOption
	}
	searchReturns struct {
		result1 store.Iterator
		result2 error
	}
	searchReturnsOnCall map[int]struct {
		result1 store.Iterator
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIndexReader) ListFacets(arg1 context.Context) (store.Facets, error) {
	fake.listFacetsMutex.Lock()
	ret, specificReturn := fake.listFacetsReturnsOnCall[len(fake.listFacetsArgsForCall)]
	fake.listFacetsArgsForCall = append(fake.listFacetsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListFacetsStub
	fakeReturns := fake.listFacetsReturns
	fake.recordInvocation("ListFacets", []interface{}{arg1})
	fake.listFacetsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIndexReader) ListFacetsCallCount() int {
	fake.listFacetsMutex.RLock()
	defer fake.listFacetsMutex.RUnlock()
	return len(fake.listFacetsArgsForCall)
}

func (fake *FakeIndexReader) ListFacetsCalls(stub func(context.Context) (store.Facets, error)) {
	fake.listFacetsMutex.Lock()
	defer fake.listFacetsMutex.Unlock()
	fake.ListFacetsStub = stub
}

func (fake *FakeIndexReader) ListFacetsArgsForCall(i int) context.Context {
	fake.listFacetsMutex.RLock()
	defer fake.listFacetsMutex.RUnlock()
	argsForCall := fake.listFacetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIndexReader) ListFacetsReturns(result1 store.Facets, result2 error) {
	fake.listFacetsMutex.Lock()
	defer fake.listFacetsMutex.Unlock()
	fake.ListFacetsStub = nil
	fake.listFacetsReturns = struct {
		result1 store.Facets
		result2 error
	}{result1, result2}
}

func (fake *FakeIndexReader) ListFacetsReturnsOnCall(i int, result1 store.Facets, result2 error) {
	fake.listFacetsMutex.Lock()
	defer fake.listFacetsMutex.Unlock()
	fake.ListFacetsStub = nil
	if fake.listFacetsReturnsOnCall == nil {
		fake.listFacetsReturnsOnCall = make(map[int]struct {
			result1 store.Facets
			result2 error
		})
	}
	fake.listFacetsReturnsOnCall[i] = struct {
		result1 store.Facets
		result2 error
	}{result1, result2}
}

func (fake *FakeIndexReader) Search(arg1 context.Context, arg2 store.Query, arg3 store.QueryOption) (store.Iterator, error) {
	fake.searchMutex.Lock()
	ret, specificReturn := fake.searchReturnsOnCall[len(fake.searchArgsForCall)]
	fake.searchArgsForCall = append(fake.searchArgsForCall, struct {
		arg1 context.Context
		arg2 store.Query
		arg3 store.QueryOption
	}{arg1, arg2, arg3})
	stub := fake.SearchStub
	fakeReturns := fake.searchReturns
	fake.recordInvocation("Search", []interface{}{arg1, arg2, arg3})
	fake.searchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIndexReader) SearchCallCount() int {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	return len(fake.searchArgsForCall)
}

func (fake *FakeIndexReader) SearchCalls(stub func(context.Context, store.Query, store.QueryOption) (store.Iterator, error)) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = stub
}

func (fake *FakeIndexReader) SearchArgsForCall(i int) (context.Context, store.Query, store.QueryOption) {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	argsForCall := fake.searchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIndexReader) SearchReturns(result1 store.Iterator, result2 error) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = nil
	fake.searchReturns = struct {
		result1 store.Iterator
		result2 error
	}{result1, result2}
}

func (fake *FakeIndexReader) SearchReturnsOnCall(i int, result1 store.Iterator, result2 error) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = nil
	if fake.searchReturnsOnCall == nil {
		fake.searchReturnsOnCall = make(map[int]struct {
			result1 store.Iterator
			result2 error
		})
	}
	fake.searchReturnsOnCall[i] = struct {
		result1 store.Iterator
		result2 error
	}{result1, result2}
}

func (fake *FakeIndexReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listFacetsMutex.RLock()
	defer fake.listFacetsMutex.RUnlock()
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIndexReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.IndexReader = new(FakeIndexReader)

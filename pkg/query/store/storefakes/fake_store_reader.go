// Code generated by counterfeiter. DO NOT EDIT.
package storefakes

import (
	"context"
	"sync"

	"github.com/weaveworks/weave-gitops-enterprise/pkg/query/internal/models"
	"github.com/weaveworks/weave-gitops-enterprise/pkg/query/store"
)

type FakeStoreReader struct {
	CountObjectsStub        func(context.Context, string) (int64, error)
	countObjectsMutex       sync.RWMutex
	countObjectsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	countObjectsReturns struct {
		result1 int64
		result2 error
	}
	countObjectsReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	GetAccessRulesStub        func() ([]models.AccessRule, error)
	getAccessRulesMutex       sync.RWMutex
	getAccessRulesArgsForCall []struct {
	}
	getAccessRulesReturns struct {
		result1 []models.AccessRule
		result2 error
	}
	getAccessRulesReturnsOnCall map[int]struct {
		result1 []models.AccessRule
		result2 error
	}
	GetObjectsStub        func() ([]models.Object, error)
	getObjectsMutex       sync.RWMutex
	getObjectsArgsForCall []struct {
	}
	getObjectsReturns struct {
		result1 []models.Object
		result2 error
	}
	getObjectsReturnsOnCall map[int]struct {
		result1 []models.Object
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStoreReader) CountObjects(arg1 context.Context, arg2 string) (int64, error) {
	fake.countObjectsMutex.Lock()
	ret, specificReturn := fake.countObjectsReturnsOnCall[len(fake.countObjectsArgsForCall)]
	fake.countObjectsArgsForCall = append(fake.countObjectsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.CountObjectsStub
	fakeReturns := fake.countObjectsReturns
	fake.recordInvocation("CountObjects", []interface{}{arg1, arg2})
	fake.countObjectsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStoreReader) CountObjectsCallCount() int {
	fake.countObjectsMutex.RLock()
	defer fake.countObjectsMutex.RUnlock()
	return len(fake.countObjectsArgsForCall)
}

func (fake *FakeStoreReader) CountObjectsCalls(stub func(context.Context, string) (int64, error)) {
	fake.countObjectsMutex.Lock()
	defer fake.countObjectsMutex.Unlock()
	fake.CountObjectsStub = stub
}

func (fake *FakeStoreReader) CountObjectsArgsForCall(i int) (context.Context, string) {
	fake.countObjectsMutex.RLock()
	defer fake.countObjectsMutex.RUnlock()
	argsForCall := fake.countObjectsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStoreReader) CountObjectsReturns(result1 int64, result2 error) {
	fake.countObjectsMutex.Lock()
	defer fake.countObjectsMutex.Unlock()
	fake.CountObjectsStub = nil
	fake.countObjectsReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreReader) CountObjectsReturnsOnCall(i int, result1 int64, result2 error) {
	fake.countObjectsMutex.Lock()
	defer fake.countObjectsMutex.Unlock()
	fake.CountObjectsStub = nil
	if fake.countObjectsReturnsOnCall == nil {
		fake.countObjectsReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.countObjectsReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreReader) GetAccessRules() ([]models.AccessRule, error) {
	fake.getAccessRulesMutex.Lock()
	ret, specificReturn := fake.getAccessRulesReturnsOnCall[len(fake.getAccessRulesArgsForCall)]
	fake.getAccessRulesArgsForCall = append(fake.getAccessRulesArgsForCall, struct {
	}{})
	stub := fake.GetAccessRulesStub
	fakeReturns := fake.getAccessRulesReturns
	fake.recordInvocation("GetAccessRules", []interface{}{})
	fake.getAccessRulesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStoreReader) GetAccessRulesCallCount() int {
	fake.getAccessRulesMutex.RLock()
	defer fake.getAccessRulesMutex.RUnlock()
	return len(fake.getAccessRulesArgsForCall)
}

func (fake *FakeStoreReader) GetAccessRulesCalls(stub func() ([]models.AccessRule, error)) {
	fake.getAccessRulesMutex.Lock()
	defer fake.getAccessRulesMutex.Unlock()
	fake.GetAccessRulesStub = stub
}

func (fake *FakeStoreReader) GetAccessRulesReturns(result1 []models.AccessRule, result2 error) {
	fake.getAccessRulesMutex.Lock()
	defer fake.getAccessRulesMutex.Unlock()
	fake.GetAccessRulesStub = nil
	fake.getAccessRulesReturns = struct {
		result1 []models.AccessRule
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreReader) GetAccessRulesReturnsOnCall(i int, result1 []models.AccessRule, result2 error) {
	fake.getAccessRulesMutex.Lock()
	defer fake.getAccessRulesMutex.Unlock()
	fake.GetAccessRulesStub = nil
	if fake.getAccessRulesReturnsOnCall == nil {
		fake.getAccessRulesReturnsOnCall = make(map[int]struct {
			result1 []models.AccessRule
			result2 error
		})
	}
	fake.getAccessRulesReturnsOnCall[i] = struct {
		result1 []models.AccessRule
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreReader) GetObjects() ([]models.Object, error) {
	fake.getObjectsMutex.Lock()
	ret, specificReturn := fake.getObjectsReturnsOnCall[len(fake.getObjectsArgsForCall)]
	fake.getObjectsArgsForCall = append(fake.getObjectsArgsForCall, struct {
	}{})
	stub := fake.GetObjectsStub
	fakeReturns := fake.getObjectsReturns
	fake.recordInvocation("GetObjects", []interface{}{})
	fake.getObjectsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStoreReader) GetObjectsCallCount() int {
	fake.getObjectsMutex.RLock()
	defer fake.getObjectsMutex.RUnlock()
	return len(fake.getObjectsArgsForCall)
}

func (fake *FakeStoreReader) GetObjectsCalls(stub func() ([]models.Object, error)) {
	fake.getObjectsMutex.Lock()
	defer fake.getObjectsMutex.Unlock()
	fake.GetObjectsStub = stub
}

func (fake *FakeStoreReader) GetObjectsReturns(result1 []models.Object, result2 error) {
	fake.getObjectsMutex.Lock()
	defer fake.getObjectsMutex.Unlock()
	fake.GetObjectsStub = nil
	fake.getObjectsReturns = struct {
		result1 []models.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreReader) GetObjectsReturnsOnCall(i int, result1 []models.Object, result2 error) {
	fake.getObjectsMutex.Lock()
	defer fake.getObjectsMutex.Unlock()
	fake.GetObjectsStub = nil
	if fake.getObjectsReturnsOnCall == nil {
		fake.getObjectsReturnsOnCall = make(map[int]struct {
			result1 []models.Object
			result2 error
		})
	}
	fake.getObjectsReturnsOnCall[i] = struct {
		result1 []models.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.countObjectsMutex.RLock()
	defer fake.countObjectsMutex.RUnlock()
	fake.getAccessRulesMutex.RLock()
	defer fake.getAccessRulesMutex.RUnlock()
	fake.getObjectsMutex.RLock()
	defer fake.getObjectsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStoreReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.StoreReader = new(FakeStoreReader)

// Code generated by counterfeiter. DO NOT EDIT.
package storefakes

import (
	"context"
	"sync"

	"github.com/weaveworks/weave-gitops-enterprise/pkg/query/internal/models"
	"github.com/weaveworks/weave-gitops-enterprise/pkg/query/store"
)

type FakeStoreWriter struct {
	DeleteObjectStub        func(context.Context, models.Object) error
	deleteObjectMutex       sync.RWMutex
	deleteObjectArgsForCall []struct {
		arg1 context.Context
		arg2 models.Object
	}
	deleteObjectReturns struct {
		result1 error
	}
	deleteObjectReturnsOnCall map[int]struct {
		result1 error
	}
	StoreAccessRulesStub        func(context.Context, []models.AccessRule) error
	storeAccessRulesMutex       sync.RWMutex
	storeAccessRulesArgsForCall []struct {
		arg1 context.Context
		arg2 []models.AccessRule
	}
	storeAccessRulesReturns struct {
		result1 error
	}
	storeAccessRulesReturnsOnCall map[int]struct {
		result1 error
	}
	StoreObjectsStub        func(context.Context, []models.Object) error
	storeObjectsMutex       sync.RWMutex
	storeObjectsArgsForCall []struct {
		arg1 context.Context
		arg2 []models.Object
	}
	storeObjectsReturns struct {
		result1 error
	}
	storeObjectsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStoreWriter) DeleteObject(arg1 context.Context, arg2 models.Object) error {
	fake.deleteObjectMutex.Lock()
	ret, specificReturn := fake.deleteObjectReturnsOnCall[len(fake.deleteObjectArgsForCall)]
	fake.deleteObjectArgsForCall = append(fake.deleteObjectArgsForCall, struct {
		arg1 context.Context
		arg2 models.Object
	}{arg1, arg2})
	stub := fake.DeleteObjectStub
	fakeReturns := fake.deleteObjectReturns
	fake.recordInvocation("DeleteObject", []interface{}{arg1, arg2})
	fake.deleteObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStoreWriter) DeleteObjectCallCount() int {
	fake.deleteObjectMutex.RLock()
	defer fake.deleteObjectMutex.RUnlock()
	return len(fake.deleteObjectArgsForCall)
}

func (fake *FakeStoreWriter) DeleteObjectCalls(stub func(context.Context, models.Object) error) {
	fake.deleteObjectMutex.Lock()
	defer fake.deleteObjectMutex.Unlock()
	fake.DeleteObjectStub = stub
}

func (fake *FakeStoreWriter) DeleteObjectArgsForCall(i int) (context.Context, models.Object) {
	fake.deleteObjectMutex.RLock()
	defer fake.deleteObjectMutex.RUnlock()
	argsForCall := fake.deleteObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStoreWriter) DeleteObjectReturns(result1 error) {
	fake.deleteObjectMutex.Lock()
	defer fake.deleteObjectMutex.Unlock()
	fake.DeleteObjectStub = nil
	fake.deleteObjectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStoreWriter) DeleteObjectReturnsOnCall(i int, result1 error) {
	fake.deleteObjectMutex.Lock()
	defer fake.deleteObjectMutex.Unlock()
	fake.DeleteObjectStub = nil
	if fake.deleteObjectReturnsOnCall == nil {
		fake.deleteObjectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteObjectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStoreWriter) StoreAccessRules(arg1 context.Context, arg2 []models.AccessRule) error {
	var arg2Copy []models.AccessRule
	if arg2 != nil {
		arg2Copy = make([]models.AccessRule, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.storeAccessRulesMutex.Lock()
	ret, specificReturn := fake.storeAccessRulesReturnsOnCall[len(fake.storeAccessRulesArgsForCall)]
	fake.storeAccessRulesArgsForCall = append(fake.storeAccessRulesArgsForCall, struct {
		arg1 context.Context
		arg2 []models.AccessRule
	}{arg1, arg2Copy})
	stub := fake.StoreAccessRulesStub
	fakeReturns := fake.storeAccessRulesReturns
	fake.recordInvocation("StoreAccessRules", []interface{}{arg1, arg2Copy})
	fake.storeAccessRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStoreWriter) StoreAccessRulesCallCount() int {
	fake.storeAccessRulesMutex.RLock()
	defer fake.storeAccessRulesMutex.RUnlock()
	return len(fake.storeAccessRulesArgsForCall)
}

func (fake *FakeStoreWriter) StoreAccessRulesCalls(stub func(context.Context, []models.AccessRule) error) {
	fake.storeAccessRulesMutex.Lock()
	defer fake.storeAccessRulesMutex.Unlock()
	fake.StoreAccessRulesStub = stub
}

func (fake *FakeStoreWriter) StoreAccessRulesArgsForCall(i int) (context.Context, []models.AccessRule) {
	fake.storeAccessRulesMutex.RLock()
	defer fake.storeAccessRulesMutex.RUnlock()
	argsForCall := fake.storeAccessRulesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStoreWriter) StoreAccessRulesReturns(result1 error) {
	fake.storeAccessRulesMutex.Lock()
	defer fake.storeAccessRulesMutex.Unlock()
	fake.StoreAccessRulesStub = nil
	fake.storeAccessRulesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStoreWriter) StoreAccessRulesReturnsOnCall(i int, result1 error) {
	fake.storeAccessRulesMutex.Lock()
	defer fake.storeAccessRulesMutex.Unlock()
	fake.StoreAccessRulesStub = nil
	if fake.storeAccessRulesReturnsOnCall == nil {
		fake.storeAccessRulesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.storeAccessRulesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStoreWriter) StoreObjects(arg1 context.Context, arg2 []models.Object) error {
	var arg2Copy []models.Object
	if arg2 != nil {
		arg2Copy = make([]models.Object, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.storeObjectsMutex.Lock()
	ret, specificReturn := fake.storeObjectsReturnsOnCall[len(fake.storeObjectsArgsForCall)]
	fake.storeObjectsArgsForCall = append(fake.storeObjectsArgsForCall, struct {
		arg1 context.Context
		arg2 []models.Object
	}{arg1, arg2Copy})
	stub := fake.StoreObjectsStub
	fakeReturns := fake.storeObjectsReturns
	fake.recordInvocation("StoreObjects", []interface{}{arg1, arg2Copy})
	fake.storeObjectsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStoreWriter) StoreObjectsCallCount() int {
	fake.storeObjectsMutex.RLock()
	defer fake.storeObjectsMutex.RUnlock()
	return len(fake.storeObjectsArgsForCall)
}

func (fake *FakeStoreWriter) StoreObjectsCalls(stub func(context.Context, []models.Object) error) {
	fake.storeObjectsMutex.Lock()
	defer fake.storeObjectsMutex.Unlock()
	fake.StoreObjectsStub = stub
}

func (fake *FakeStoreWriter) StoreObjectsArgsForCall(i int) (context.Context, []models.Object) {
	fake.storeObjectsMutex.RLock()
	defer fake.storeObjectsMutex.RUnlock()
	argsForCall := fake.storeObjectsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStoreWriter) StoreObjectsReturns(result1 error) {
	fake.storeObjectsMutex.Lock()
	defer fake.storeObjectsMutex.Unlock()
	fake.StoreObjectsStub = nil
	fake.storeObjectsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStoreWriter) StoreObjectsReturnsOnCall(i int, result1 error) {
	fake.storeObjectsMutex.Lock()
	defer fake.storeObjectsMutex.Unlock()
	fake.StoreObjectsStub = nil
	if fake.storeObjectsReturnsOnCall == nil {
		fake.storeObjectsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.storeObjectsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStoreWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteObjectMutex.RLock()
	defer fake.deleteObjectMutex.RUnlock()
	fake.storeAccessRulesMutex.RLock()
	defer fake.storeAccessRulesMutex.RUnlock()
	fake.storeObjectsMutex.RLock()
	defer fake.storeObjectsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStoreWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.StoreWriter = new(FakeStoreWriter)

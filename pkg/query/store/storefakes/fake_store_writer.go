// Code generated by counterfeiter. DO NOT EDIT.
package storefakes

import (
	"sync"

	"github.com/weaveworks/weave-gitops-enterprise/pkg/query/internal/models"
	"github.com/weaveworks/weave-gitops-enterprise/pkg/query/store"
)

type FakeStoreWriter struct {
	QueryStub        func([]string) ([]models.Object, error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		arg1 []string
	}
	queryReturns struct {
		result1 []models.Object
		result2 error
	}
	queryReturnsOnCall map[int]struct {
		result1 []models.Object
		result2 error
	}
	StoreAccessRulesStub        func([]models.AccessRule) error
	storeAccessRulesMutex       sync.RWMutex
	storeAccessRulesArgsForCall []struct {
		arg1 []models.AccessRule
	}
	storeAccessRulesReturns struct {
		result1 error
	}
	storeAccessRulesReturnsOnCall map[int]struct {
		result1 error
	}
	StoreObjectsStub        func([]models.Object) error
	storeObjectsMutex       sync.RWMutex
	storeObjectsArgsForCall []struct {
		arg1 []models.Object
	}
	storeObjectsReturns struct {
		result1 error
	}
	storeObjectsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStoreWriter) Query(arg1 []string) ([]models.Object, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.queryMutex.Lock()
	ret, specificReturn := fake.queryReturnsOnCall[len(fake.queryArgsForCall)]
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.QueryStub
	fakeReturns := fake.queryReturns
	fake.recordInvocation("Query", []interface{}{arg1Copy})
	fake.queryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStoreWriter) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *FakeStoreWriter) QueryCalls(stub func([]string) ([]models.Object, error)) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = stub
}

func (fake *FakeStoreWriter) QueryArgsForCall(i int) []string {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	argsForCall := fake.queryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStoreWriter) QueryReturns(result1 []models.Object, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 []models.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreWriter) QueryReturnsOnCall(i int, result1 []models.Object, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	if fake.queryReturnsOnCall == nil {
		fake.queryReturnsOnCall = make(map[int]struct {
			result1 []models.Object
			result2 error
		})
	}
	fake.queryReturnsOnCall[i] = struct {
		result1 []models.Object
		result2 error
	}{result1, result2}
}

func (fake *FakeStoreWriter) StoreAccessRules(arg1 []models.AccessRule) error {
	var arg1Copy []models.AccessRule
	if arg1 != nil {
		arg1Copy = make([]models.AccessRule, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.storeAccessRulesMutex.Lock()
	ret, specificReturn := fake.storeAccessRulesReturnsOnCall[len(fake.storeAccessRulesArgsForCall)]
	fake.storeAccessRulesArgsForCall = append(fake.storeAccessRulesArgsForCall, struct {
		arg1 []models.AccessRule
	}{arg1Copy})
	stub := fake.StoreAccessRulesStub
	fakeReturns := fake.storeAccessRulesReturns
	fake.recordInvocation("StoreAccessRules", []interface{}{arg1Copy})
	fake.storeAccessRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStoreWriter) StoreAccessRulesCallCount() int {
	fake.storeAccessRulesMutex.RLock()
	defer fake.storeAccessRulesMutex.RUnlock()
	return len(fake.storeAccessRulesArgsForCall)
}

func (fake *FakeStoreWriter) StoreAccessRulesCalls(stub func([]models.AccessRule) error) {
	fake.storeAccessRulesMutex.Lock()
	defer fake.storeAccessRulesMutex.Unlock()
	fake.StoreAccessRulesStub = stub
}

func (fake *FakeStoreWriter) StoreAccessRulesArgsForCall(i int) []models.AccessRule {
	fake.storeAccessRulesMutex.RLock()
	defer fake.storeAccessRulesMutex.RUnlock()
	argsForCall := fake.storeAccessRulesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStoreWriter) StoreAccessRulesReturns(result1 error) {
	fake.storeAccessRulesMutex.Lock()
	defer fake.storeAccessRulesMutex.Unlock()
	fake.StoreAccessRulesStub = nil
	fake.storeAccessRulesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStoreWriter) StoreAccessRulesReturnsOnCall(i int, result1 error) {
	fake.storeAccessRulesMutex.Lock()
	defer fake.storeAccessRulesMutex.Unlock()
	fake.StoreAccessRulesStub = nil
	if fake.storeAccessRulesReturnsOnCall == nil {
		fake.storeAccessRulesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.storeAccessRulesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStoreWriter) StoreObjects(arg1 []models.Object) error {
	var arg1Copy []models.Object
	if arg1 != nil {
		arg1Copy = make([]models.Object, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.storeObjectsMutex.Lock()
	ret, specificReturn := fake.storeObjectsReturnsOnCall[len(fake.storeObjectsArgsForCall)]
	fake.storeObjectsArgsForCall = append(fake.storeObjectsArgsForCall, struct {
		arg1 []models.Object
	}{arg1Copy})
	stub := fake.StoreObjectsStub
	fakeReturns := fake.storeObjectsReturns
	fake.recordInvocation("StoreObjects", []interface{}{arg1Copy})
	fake.storeObjectsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStoreWriter) StoreObjectsCallCount() int {
	fake.storeObjectsMutex.RLock()
	defer fake.storeObjectsMutex.RUnlock()
	return len(fake.storeObjectsArgsForCall)
}

func (fake *FakeStoreWriter) StoreObjectsCalls(stub func([]models.Object) error) {
	fake.storeObjectsMutex.Lock()
	defer fake.storeObjectsMutex.Unlock()
	fake.StoreObjectsStub = stub
}

func (fake *FakeStoreWriter) StoreObjectsArgsForCall(i int) []models.Object {
	fake.storeObjectsMutex.RLock()
	defer fake.storeObjectsMutex.RUnlock()
	argsForCall := fake.storeObjectsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStoreWriter) StoreObjectsReturns(result1 error) {
	fake.storeObjectsMutex.Lock()
	defer fake.storeObjectsMutex.Unlock()
	fake.StoreObjectsStub = nil
	fake.storeObjectsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStoreWriter) StoreObjectsReturnsOnCall(i int, result1 error) {
	fake.storeObjectsMutex.Lock()
	defer fake.storeObjectsMutex.Unlock()
	fake.StoreObjectsStub = nil
	if fake.storeObjectsReturnsOnCall == nil {
		fake.storeObjectsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.storeObjectsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStoreWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	fake.storeAccessRulesMutex.RLock()
	defer fake.storeAccessRulesMutex.RUnlock()
	fake.storeObjectsMutex.RLock()
	defer fake.storeObjectsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStoreWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.StoreWriter = new(FakeStoreWriter)

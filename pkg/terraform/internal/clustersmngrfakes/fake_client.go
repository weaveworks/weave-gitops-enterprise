// Code generated by counterfeiter. DO NOT EDIT.
package clustersmngrfakes

import (
	"context"
	"sync"

	"github.com/weaveworks/weave-gitops/core/clustersmngr"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type FakeClient struct {
	ClientsPoolStub        func() clustersmngr.ClientsPool
	clientsPoolMutex       sync.RWMutex
	clientsPoolArgsForCall []struct {
	}
	clientsPoolReturns struct {
		result1 clustersmngr.ClientsPool
	}
	clientsPoolReturnsOnCall map[int]struct {
		result1 clustersmngr.ClientsPool
	}
	ClusteredListStub        func(context.Context, clustersmngr.ClusteredObjectList, bool, ...client.ListOption) error
	clusteredListMutex       sync.RWMutex
	clusteredListArgsForCall []struct {
		arg1 context.Context
		arg2 clustersmngr.ClusteredObjectList
		arg3 bool
		arg4 []client.ListOption
	}
	clusteredListReturns struct {
		result1 error
	}
	clusteredListReturnsOnCall map[int]struct {
		result1 error
	}
	CreateStub        func(context.Context, string, client.Object, ...client.CreateOption) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 client.Object
		arg4 []client.CreateOption
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(context.Context, string, client.Object, ...client.DeleteOption) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 client.Object
		arg4 []client.DeleteOption
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(context.Context, string, types.NamespacedName, client.Object) error
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 types.NamespacedName
		arg4 client.Object
	}
	getReturns struct {
		result1 error
	}
	getReturnsOnCall map[int]struct {
		result1 error
	}
	ListStub        func(context.Context, string, client.ObjectList, ...client.ListOption) error
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 client.ObjectList
		arg4 []client.ListOption
	}
	listReturns struct {
		result1 error
	}
	listReturnsOnCall map[int]struct {
		result1 error
	}
	PatchStub        func(context.Context, string, client.Object, client.Patch, ...client.PatchOption) error
	patchMutex       sync.RWMutex
	patchArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 client.Object
		arg4 client.Patch
		arg5 []client.PatchOption
	}
	patchReturns struct {
		result1 error
	}
	patchReturnsOnCall map[int]struct {
		result1 error
	}
	ScopedStub        func(string) (client.Client, error)
	scopedMutex       sync.RWMutex
	scopedArgsForCall []struct {
		arg1 string
	}
	scopedReturns struct {
		result1 client.Client
		result2 error
	}
	scopedReturnsOnCall map[int]struct {
		result1 client.Client
		result2 error
	}
	UpdateStub        func(context.Context, string, client.Object, ...client.UpdateOption) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 client.Object
		arg4 []client.UpdateOption
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) ClientsPool() clustersmngr.ClientsPool {
	fake.clientsPoolMutex.Lock()
	ret, specificReturn := fake.clientsPoolReturnsOnCall[len(fake.clientsPoolArgsForCall)]
	fake.clientsPoolArgsForCall = append(fake.clientsPoolArgsForCall, struct {
	}{})
	stub := fake.ClientsPoolStub
	fakeReturns := fake.clientsPoolReturns
	fake.recordInvocation("ClientsPool", []interface{}{})
	fake.clientsPoolMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) ClientsPoolCallCount() int {
	fake.clientsPoolMutex.RLock()
	defer fake.clientsPoolMutex.RUnlock()
	return len(fake.clientsPoolArgsForCall)
}

func (fake *FakeClient) ClientsPoolCalls(stub func() clustersmngr.ClientsPool) {
	fake.clientsPoolMutex.Lock()
	defer fake.clientsPoolMutex.Unlock()
	fake.ClientsPoolStub = stub
}

func (fake *FakeClient) ClientsPoolReturns(result1 clustersmngr.ClientsPool) {
	fake.clientsPoolMutex.Lock()
	defer fake.clientsPoolMutex.Unlock()
	fake.ClientsPoolStub = nil
	fake.clientsPoolReturns = struct {
		result1 clustersmngr.ClientsPool
	}{result1}
}

func (fake *FakeClient) ClientsPoolReturnsOnCall(i int, result1 clustersmngr.ClientsPool) {
	fake.clientsPoolMutex.Lock()
	defer fake.clientsPoolMutex.Unlock()
	fake.ClientsPoolStub = nil
	if fake.clientsPoolReturnsOnCall == nil {
		fake.clientsPoolReturnsOnCall = make(map[int]struct {
			result1 clustersmngr.ClientsPool
		})
	}
	fake.clientsPoolReturnsOnCall[i] = struct {
		result1 clustersmngr.ClientsPool
	}{result1}
}

func (fake *FakeClient) ClusteredList(arg1 context.Context, arg2 clustersmngr.ClusteredObjectList, arg3 bool, arg4 ...client.ListOption) error {
	fake.clusteredListMutex.Lock()
	ret, specificReturn := fake.clusteredListReturnsOnCall[len(fake.clusteredListArgsForCall)]
	fake.clusteredListArgsForCall = append(fake.clusteredListArgsForCall, struct {
		arg1 context.Context
		arg2 clustersmngr.ClusteredObjectList
		arg3 bool
		arg4 []client.ListOption
	}{arg1, arg2, arg3, arg4})
	stub := fake.ClusteredListStub
	fakeReturns := fake.clusteredListReturns
	fake.recordInvocation("ClusteredList", []interface{}{arg1, arg2, arg3, arg4})
	fake.clusteredListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) ClusteredListCallCount() int {
	fake.clusteredListMutex.RLock()
	defer fake.clusteredListMutex.RUnlock()
	return len(fake.clusteredListArgsForCall)
}

func (fake *FakeClient) ClusteredListCalls(stub func(context.Context, clustersmngr.ClusteredObjectList, bool, ...client.ListOption) error) {
	fake.clusteredListMutex.Lock()
	defer fake.clusteredListMutex.Unlock()
	fake.ClusteredListStub = stub
}

func (fake *FakeClient) ClusteredListArgsForCall(i int) (context.Context, clustersmngr.ClusteredObjectList, bool, []client.ListOption) {
	fake.clusteredListMutex.RLock()
	defer fake.clusteredListMutex.RUnlock()
	argsForCall := fake.clusteredListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeClient) ClusteredListReturns(result1 error) {
	fake.clusteredListMutex.Lock()
	defer fake.clusteredListMutex.Unlock()
	fake.ClusteredListStub = nil
	fake.clusteredListReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) ClusteredListReturnsOnCall(i int, result1 error) {
	fake.clusteredListMutex.Lock()
	defer fake.clusteredListMutex.Unlock()
	fake.ClusteredListStub = nil
	if fake.clusteredListReturnsOnCall == nil {
		fake.clusteredListReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.clusteredListReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Create(arg1 context.Context, arg2 string, arg3 client.Object, arg4 ...client.CreateOption) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 client.Object
		arg4 []client.CreateOption
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3, arg4})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeClient) CreateCalls(stub func(context.Context, string, client.Object, ...client.CreateOption) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeClient) CreateArgsForCall(i int) (context.Context, string, client.Object, []client.CreateOption) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeClient) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Delete(arg1 context.Context, arg2 string, arg3 client.Object, arg4 ...client.DeleteOption) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 client.Object
		arg4 []client.DeleteOption
	}{arg1, arg2, arg3, arg4})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2, arg3, arg4})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeClient) DeleteCalls(stub func(context.Context, string, client.Object, ...client.DeleteOption) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeClient) DeleteArgsForCall(i int) (context.Context, string, client.Object, []client.DeleteOption) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeClient) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Get(arg1 context.Context, arg2 string, arg3 types.NamespacedName, arg4 client.Object) error {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 types.NamespacedName
		arg4 client.Object
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2, arg3, arg4})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeClient) GetCalls(stub func(context.Context, string, types.NamespacedName, client.Object) error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeClient) GetArgsForCall(i int) (context.Context, string, types.NamespacedName, client.Object) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeClient) GetReturns(result1 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) GetReturnsOnCall(i int, result1 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) List(arg1 context.Context, arg2 string, arg3 client.ObjectList, arg4 ...client.ListOption) error {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 client.ObjectList
		arg4 []client.ListOption
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1, arg2, arg3, arg4})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeClient) ListCalls(stub func(context.Context, string, client.ObjectList, ...client.ListOption) error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeClient) ListArgsForCall(i int) (context.Context, string, client.ObjectList, []client.ListOption) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeClient) ListReturns(result1 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) ListReturnsOnCall(i int, result1 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Patch(arg1 context.Context, arg2 string, arg3 client.Object, arg4 client.Patch, arg5 ...client.PatchOption) error {
	fake.patchMutex.Lock()
	ret, specificReturn := fake.patchReturnsOnCall[len(fake.patchArgsForCall)]
	fake.patchArgsForCall = append(fake.patchArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 client.Object
		arg4 client.Patch
		arg5 []client.PatchOption
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.PatchStub
	fakeReturns := fake.patchReturns
	fake.recordInvocation("Patch", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.patchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) PatchCallCount() int {
	fake.patchMutex.RLock()
	defer fake.patchMutex.RUnlock()
	return len(fake.patchArgsForCall)
}

func (fake *FakeClient) PatchCalls(stub func(context.Context, string, client.Object, client.Patch, ...client.PatchOption) error) {
	fake.patchMutex.Lock()
	defer fake.patchMutex.Unlock()
	fake.PatchStub = stub
}

func (fake *FakeClient) PatchArgsForCall(i int) (context.Context, string, client.Object, client.Patch, []client.PatchOption) {
	fake.patchMutex.RLock()
	defer fake.patchMutex.RUnlock()
	argsForCall := fake.patchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeClient) PatchReturns(result1 error) {
	fake.patchMutex.Lock()
	defer fake.patchMutex.Unlock()
	fake.PatchStub = nil
	fake.patchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) PatchReturnsOnCall(i int, result1 error) {
	fake.patchMutex.Lock()
	defer fake.patchMutex.Unlock()
	fake.PatchStub = nil
	if fake.patchReturnsOnCall == nil {
		fake.patchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Scoped(arg1 string) (client.Client, error) {
	fake.scopedMutex.Lock()
	ret, specificReturn := fake.scopedReturnsOnCall[len(fake.scopedArgsForCall)]
	fake.scopedArgsForCall = append(fake.scopedArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ScopedStub
	fakeReturns := fake.scopedReturns
	fake.recordInvocation("Scoped", []interface{}{arg1})
	fake.scopedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ScopedCallCount() int {
	fake.scopedMutex.RLock()
	defer fake.scopedMutex.RUnlock()
	return len(fake.scopedArgsForCall)
}

func (fake *FakeClient) ScopedCalls(stub func(string) (client.Client, error)) {
	fake.scopedMutex.Lock()
	defer fake.scopedMutex.Unlock()
	fake.ScopedStub = stub
}

func (fake *FakeClient) ScopedArgsForCall(i int) string {
	fake.scopedMutex.RLock()
	defer fake.scopedMutex.RUnlock()
	argsForCall := fake.scopedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ScopedReturns(result1 client.Client, result2 error) {
	fake.scopedMutex.Lock()
	defer fake.scopedMutex.Unlock()
	fake.ScopedStub = nil
	fake.scopedReturns = struct {
		result1 client.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ScopedReturnsOnCall(i int, result1 client.Client, result2 error) {
	fake.scopedMutex.Lock()
	defer fake.scopedMutex.Unlock()
	fake.ScopedStub = nil
	if fake.scopedReturnsOnCall == nil {
		fake.scopedReturnsOnCall = make(map[int]struct {
			result1 client.Client
			result2 error
		})
	}
	fake.scopedReturnsOnCall[i] = struct {
		result1 client.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Update(arg1 context.Context, arg2 string, arg3 client.Object, arg4 ...client.UpdateOption) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 client.Object
		arg4 []client.UpdateOption
	}{arg1, arg2, arg3, arg4})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeClient) UpdateCalls(stub func(context.Context, string, client.Object, ...client.UpdateOption) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeClient) UpdateArgsForCall(i int) (context.Context, string, client.Object, []client.UpdateOption) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeClient) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clientsPoolMutex.RLock()
	defer fake.clientsPoolMutex.RUnlock()
	fake.clusteredListMutex.RLock()
	defer fake.clusteredListMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.patchMutex.RLock()
	defer fake.patchMutex.RUnlock()
	fake.scopedMutex.RLock()
	defer fake.scopedMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ clustersmngr.Client = new(FakeClient)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationsClient is the client API for Applications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationsClient interface {
	//
	// Authenticate generates jwt token using git provider name and git provider token arguments
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	//
	// GetGithubDeviceCode retrieves a temporary device code for Github authentication.
	// This code is used to start the Github device-flow.
	GetGithubDeviceCode(ctx context.Context, in *GetGithubDeviceCodeRequest, opts ...grpc.CallOption) (*GetGithubDeviceCodeResponse, error)
	//
	// GetGithubAuthStatus gets the status of the Github device flow authentication requests.
	// Once the user has completed the Github device flow, an access token will be returned.
	// This token will expired in 15 minutes, after which the user will need to complete the flow again
	// to do Git Provider operations.
	GetGithubAuthStatus(ctx context.Context, in *GetGithubAuthStatusRequest, opts ...grpc.CallOption) (*GetGithubAuthStatusResponse, error)
	//
	// GetGitlabAuthURL returns the URL to initiate a GitLab OAuth PKCE flow.
	// The user must browse to the returned URL to authorize the OAuth callback to the GitOps UI.
	// See the GitLab OAuth docs for more more information:
	// https://docs.gitlab.com/ee/api/oauth2.html#supported-oauth-20-flows
	GetGitlabAuthURL(ctx context.Context, in *GetGitlabAuthURLRequest, opts ...grpc.CallOption) (*GetGitlabAuthURLResponse, error)
	//
	// AuthorizeGitlab exchanges a GitLab code obtained via OAuth callback.
	// The returned token is useable for authentication with the GitOps server only.
	// See the GitLab OAuth docs for more more information:
	// https://docs.gitlab.com/ee/api/oauth2.html#supported-oauth-20-flows
	AuthorizeGitlab(ctx context.Context, in *AuthorizeGitlabRequest, opts ...grpc.CallOption) (*AuthorizeGitlabResponse, error)
	//
	// ParseRepoURL returns structured data about a git repository URL
	ParseRepoURL(ctx context.Context, in *ParseRepoURLRequest, opts ...grpc.CallOption) (*ParseRepoURLResponse, error)
	//
	// ValidateProviderToken check to see if the git provider token is still valid
	ValidateProviderToken(ctx context.Context, in *ValidateProviderTokenRequest, opts ...grpc.CallOption) (*ValidateProviderTokenResponse, error)
}

type applicationsClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationsClient(cc grpc.ClientConnInterface) ApplicationsClient {
	return &applicationsClient{cc}
}

func (c *applicationsClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/applications.v1.Applications/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) GetGithubDeviceCode(ctx context.Context, in *GetGithubDeviceCodeRequest, opts ...grpc.CallOption) (*GetGithubDeviceCodeResponse, error) {
	out := new(GetGithubDeviceCodeResponse)
	err := c.cc.Invoke(ctx, "/applications.v1.Applications/GetGithubDeviceCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) GetGithubAuthStatus(ctx context.Context, in *GetGithubAuthStatusRequest, opts ...grpc.CallOption) (*GetGithubAuthStatusResponse, error) {
	out := new(GetGithubAuthStatusResponse)
	err := c.cc.Invoke(ctx, "/applications.v1.Applications/GetGithubAuthStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) GetGitlabAuthURL(ctx context.Context, in *GetGitlabAuthURLRequest, opts ...grpc.CallOption) (*GetGitlabAuthURLResponse, error) {
	out := new(GetGitlabAuthURLResponse)
	err := c.cc.Invoke(ctx, "/applications.v1.Applications/GetGitlabAuthURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) AuthorizeGitlab(ctx context.Context, in *AuthorizeGitlabRequest, opts ...grpc.CallOption) (*AuthorizeGitlabResponse, error) {
	out := new(AuthorizeGitlabResponse)
	err := c.cc.Invoke(ctx, "/applications.v1.Applications/AuthorizeGitlab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) ParseRepoURL(ctx context.Context, in *ParseRepoURLRequest, opts ...grpc.CallOption) (*ParseRepoURLResponse, error) {
	out := new(ParseRepoURLResponse)
	err := c.cc.Invoke(ctx, "/applications.v1.Applications/ParseRepoURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) ValidateProviderToken(ctx context.Context, in *ValidateProviderTokenRequest, opts ...grpc.CallOption) (*ValidateProviderTokenResponse, error) {
	out := new(ValidateProviderTokenResponse)
	err := c.cc.Invoke(ctx, "/applications.v1.Applications/ValidateProviderToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationsServer is the server API for Applications service.
// All implementations must embed UnimplementedApplicationsServer
// for forward compatibility
type ApplicationsServer interface {
	//
	// Authenticate generates jwt token using git provider name and git provider token arguments
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	//
	// GetGithubDeviceCode retrieves a temporary device code for Github authentication.
	// This code is used to start the Github device-flow.
	GetGithubDeviceCode(context.Context, *GetGithubDeviceCodeRequest) (*GetGithubDeviceCodeResponse, error)
	//
	// GetGithubAuthStatus gets the status of the Github device flow authentication requests.
	// Once the user has completed the Github device flow, an access token will be returned.
	// This token will expired in 15 minutes, after which the user will need to complete the flow again
	// to do Git Provider operations.
	GetGithubAuthStatus(context.Context, *GetGithubAuthStatusRequest) (*GetGithubAuthStatusResponse, error)
	//
	// GetGitlabAuthURL returns the URL to initiate a GitLab OAuth PKCE flow.
	// The user must browse to the returned URL to authorize the OAuth callback to the GitOps UI.
	// See the GitLab OAuth docs for more more information:
	// https://docs.gitlab.com/ee/api/oauth2.html#supported-oauth-20-flows
	GetGitlabAuthURL(context.Context, *GetGitlabAuthURLRequest) (*GetGitlabAuthURLResponse, error)
	//
	// AuthorizeGitlab exchanges a GitLab code obtained via OAuth callback.
	// The returned token is useable for authentication with the GitOps server only.
	// See the GitLab OAuth docs for more more information:
	// https://docs.gitlab.com/ee/api/oauth2.html#supported-oauth-20-flows
	AuthorizeGitlab(context.Context, *AuthorizeGitlabRequest) (*AuthorizeGitlabResponse, error)
	//
	// ParseRepoURL returns structured data about a git repository URL
	ParseRepoURL(context.Context, *ParseRepoURLRequest) (*ParseRepoURLResponse, error)
	//
	// ValidateProviderToken check to see if the git provider token is still valid
	ValidateProviderToken(context.Context, *ValidateProviderTokenRequest) (*ValidateProviderTokenResponse, error)
	mustEmbedUnimplementedApplicationsServer()
}

// UnimplementedApplicationsServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationsServer struct {
}

func (UnimplementedApplicationsServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedApplicationsServer) GetGithubDeviceCode(context.Context, *GetGithubDeviceCodeRequest) (*GetGithubDeviceCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGithubDeviceCode not implemented")
}
func (UnimplementedApplicationsServer) GetGithubAuthStatus(context.Context, *GetGithubAuthStatusRequest) (*GetGithubAuthStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGithubAuthStatus not implemented")
}
func (UnimplementedApplicationsServer) GetGitlabAuthURL(context.Context, *GetGitlabAuthURLRequest) (*GetGitlabAuthURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitlabAuthURL not implemented")
}
func (UnimplementedApplicationsServer) AuthorizeGitlab(context.Context, *AuthorizeGitlabRequest) (*AuthorizeGitlabResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeGitlab not implemented")
}
func (UnimplementedApplicationsServer) ParseRepoURL(context.Context, *ParseRepoURLRequest) (*ParseRepoURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseRepoURL not implemented")
}
func (UnimplementedApplicationsServer) ValidateProviderToken(context.Context, *ValidateProviderTokenRequest) (*ValidateProviderTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateProviderToken not implemented")
}
func (UnimplementedApplicationsServer) mustEmbedUnimplementedApplicationsServer() {}

// UnsafeApplicationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationsServer will
// result in compilation errors.
type UnsafeApplicationsServer interface {
	mustEmbedUnimplementedApplicationsServer()
}

func RegisterApplicationsServer(s grpc.ServiceRegistrar, srv ApplicationsServer) {
	s.RegisterService(&Applications_ServiceDesc, srv)
}

func _Applications_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applications.v1.Applications/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_GetGithubDeviceCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGithubDeviceCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).GetGithubDeviceCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applications.v1.Applications/GetGithubDeviceCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).GetGithubDeviceCode(ctx, req.(*GetGithubDeviceCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_GetGithubAuthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGithubAuthStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).GetGithubAuthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applications.v1.Applications/GetGithubAuthStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).GetGithubAuthStatus(ctx, req.(*GetGithubAuthStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_GetGitlabAuthURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGitlabAuthURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).GetGitlabAuthURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applications.v1.Applications/GetGitlabAuthURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).GetGitlabAuthURL(ctx, req.(*GetGitlabAuthURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_AuthorizeGitlab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeGitlabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).AuthorizeGitlab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applications.v1.Applications/AuthorizeGitlab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).AuthorizeGitlab(ctx, req.(*AuthorizeGitlabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_ParseRepoURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRepoURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).ParseRepoURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applications.v1.Applications/ParseRepoURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).ParseRepoURL(ctx, req.(*ParseRepoURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_ValidateProviderToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateProviderTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).ValidateProviderToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applications.v1.Applications/ValidateProviderToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).ValidateProviderToken(ctx, req.(*ValidateProviderTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Applications_ServiceDesc is the grpc.ServiceDesc for Applications service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Applications_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "applications.v1.Applications",
	HandlerType: (*ApplicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _Applications_Authenticate_Handler,
		},
		{
			MethodName: "GetGithubDeviceCode",
			Handler:    _Applications_GetGithubDeviceCode_Handler,
		},
		{
			MethodName: "GetGithubAuthStatus",
			Handler:    _Applications_GetGithubAuthStatus_Handler,
		},
		{
			MethodName: "GetGitlabAuthURL",
			Handler:    _Applications_GetGitlabAuthURL_Handler,
		},
		{
			MethodName: "AuthorizeGitlab",
			Handler:    _Applications_AuthorizeGitlab_Handler,
		},
		{
			MethodName: "ParseRepoURL",
			Handler:    _Applications_ParseRepoURL_Handler,
		},
		{
			MethodName: "ValidateProviderToken",
			Handler:    _Applications_ValidateProviderToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/applications/applications.proto",
}

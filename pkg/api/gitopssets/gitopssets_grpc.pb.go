//
// This file holds the protobuf definitions for the Weave GitOps GitOpsSets API.
// Messages and enums are defined in types.proto.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/gitopssets/gitopssets.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GitOpsSets_ListGitOpsSets_FullMethodName         = "/gitopssets.v1.GitOpsSets/ListGitOpsSets"
	GitOpsSets_GetGitOpsSet_FullMethodName           = "/gitopssets.v1.GitOpsSets/GetGitOpsSet"
	GitOpsSets_ToggleSuspendGitOpsSet_FullMethodName = "/gitopssets.v1.GitOpsSets/ToggleSuspendGitOpsSet"
	GitOpsSets_GetReconciledObjects_FullMethodName   = "/gitopssets.v1.GitOpsSets/GetReconciledObjects"
	GitOpsSets_SyncGitOpsSet_FullMethodName          = "/gitopssets.v1.GitOpsSets/SyncGitOpsSet"
)

// GitOpsSetsClient is the client API for GitOpsSets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitOpsSetsClient interface {
	// List GitOpsSets across all clusters
	ListGitOpsSets(ctx context.Context, in *ListGitOpsSetsRequest, opts ...grpc.CallOption) (*ListGitOpsSetsResponse, error)
	// Get a GitOpsSet
	GetGitOpsSet(ctx context.Context, in *GetGitOpsSetRequest, opts ...grpc.CallOption) (*GetGitOpsSetResponse, error)
	// Toggle suspend on a GitOpsSet
	ToggleSuspendGitOpsSet(ctx context.Context, in *ToggleSuspendGitOpsSetRequest, opts ...grpc.CallOption) (*ToggleSuspendGitOpsSetResponse, error)
	// Get the reconciled objects for a GitOpsSet
	GetReconciledObjects(ctx context.Context, in *GetReconciledObjectsRequest, opts ...grpc.CallOption) (*GetReconciledObjectsResponse, error)
	// Sync a GitOpsSet
	SyncGitOpsSet(ctx context.Context, in *SyncGitOpsSetRequest, opts ...grpc.CallOption) (*SyncGitOpsSetResponse, error)
}

type gitOpsSetsClient struct {
	cc grpc.ClientConnInterface
}

func NewGitOpsSetsClient(cc grpc.ClientConnInterface) GitOpsSetsClient {
	return &gitOpsSetsClient{cc}
}

func (c *gitOpsSetsClient) ListGitOpsSets(ctx context.Context, in *ListGitOpsSetsRequest, opts ...grpc.CallOption) (*ListGitOpsSetsResponse, error) {
	out := new(ListGitOpsSetsResponse)
	err := c.cc.Invoke(ctx, GitOpsSets_ListGitOpsSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitOpsSetsClient) GetGitOpsSet(ctx context.Context, in *GetGitOpsSetRequest, opts ...grpc.CallOption) (*GetGitOpsSetResponse, error) {
	out := new(GetGitOpsSetResponse)
	err := c.cc.Invoke(ctx, GitOpsSets_GetGitOpsSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitOpsSetsClient) ToggleSuspendGitOpsSet(ctx context.Context, in *ToggleSuspendGitOpsSetRequest, opts ...grpc.CallOption) (*ToggleSuspendGitOpsSetResponse, error) {
	out := new(ToggleSuspendGitOpsSetResponse)
	err := c.cc.Invoke(ctx, GitOpsSets_ToggleSuspendGitOpsSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitOpsSetsClient) GetReconciledObjects(ctx context.Context, in *GetReconciledObjectsRequest, opts ...grpc.CallOption) (*GetReconciledObjectsResponse, error) {
	out := new(GetReconciledObjectsResponse)
	err := c.cc.Invoke(ctx, GitOpsSets_GetReconciledObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitOpsSetsClient) SyncGitOpsSet(ctx context.Context, in *SyncGitOpsSetRequest, opts ...grpc.CallOption) (*SyncGitOpsSetResponse, error) {
	out := new(SyncGitOpsSetResponse)
	err := c.cc.Invoke(ctx, GitOpsSets_SyncGitOpsSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitOpsSetsServer is the server API for GitOpsSets service.
// All implementations must embed UnimplementedGitOpsSetsServer
// for forward compatibility
type GitOpsSetsServer interface {
	// List GitOpsSets across all clusters
	ListGitOpsSets(context.Context, *ListGitOpsSetsRequest) (*ListGitOpsSetsResponse, error)
	// Get a GitOpsSet
	GetGitOpsSet(context.Context, *GetGitOpsSetRequest) (*GetGitOpsSetResponse, error)
	// Toggle suspend on a GitOpsSet
	ToggleSuspendGitOpsSet(context.Context, *ToggleSuspendGitOpsSetRequest) (*ToggleSuspendGitOpsSetResponse, error)
	// Get the reconciled objects for a GitOpsSet
	GetReconciledObjects(context.Context, *GetReconciledObjectsRequest) (*GetReconciledObjectsResponse, error)
	// Sync a GitOpsSet
	SyncGitOpsSet(context.Context, *SyncGitOpsSetRequest) (*SyncGitOpsSetResponse, error)
	mustEmbedUnimplementedGitOpsSetsServer()
}

// UnimplementedGitOpsSetsServer must be embedded to have forward compatible implementations.
type UnimplementedGitOpsSetsServer struct {
}

func (UnimplementedGitOpsSetsServer) ListGitOpsSets(context.Context, *ListGitOpsSetsRequest) (*ListGitOpsSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitOpsSets not implemented")
}
func (UnimplementedGitOpsSetsServer) GetGitOpsSet(context.Context, *GetGitOpsSetRequest) (*GetGitOpsSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitOpsSet not implemented")
}
func (UnimplementedGitOpsSetsServer) ToggleSuspendGitOpsSet(context.Context, *ToggleSuspendGitOpsSetRequest) (*ToggleSuspendGitOpsSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleSuspendGitOpsSet not implemented")
}
func (UnimplementedGitOpsSetsServer) GetReconciledObjects(context.Context, *GetReconciledObjectsRequest) (*GetReconciledObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReconciledObjects not implemented")
}
func (UnimplementedGitOpsSetsServer) SyncGitOpsSet(context.Context, *SyncGitOpsSetRequest) (*SyncGitOpsSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncGitOpsSet not implemented")
}
func (UnimplementedGitOpsSetsServer) mustEmbedUnimplementedGitOpsSetsServer() {}

// UnsafeGitOpsSetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitOpsSetsServer will
// result in compilation errors.
type UnsafeGitOpsSetsServer interface {
	mustEmbedUnimplementedGitOpsSetsServer()
}

func RegisterGitOpsSetsServer(s grpc.ServiceRegistrar, srv GitOpsSetsServer) {
	s.RegisterService(&GitOpsSets_ServiceDesc, srv)
}

func _GitOpsSets_ListGitOpsSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitOpsSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitOpsSetsServer).ListGitOpsSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitOpsSets_ListGitOpsSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitOpsSetsServer).ListGitOpsSets(ctx, req.(*ListGitOpsSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitOpsSets_GetGitOpsSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGitOpsSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitOpsSetsServer).GetGitOpsSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitOpsSets_GetGitOpsSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitOpsSetsServer).GetGitOpsSet(ctx, req.(*GetGitOpsSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitOpsSets_ToggleSuspendGitOpsSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleSuspendGitOpsSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitOpsSetsServer).ToggleSuspendGitOpsSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitOpsSets_ToggleSuspendGitOpsSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitOpsSetsServer).ToggleSuspendGitOpsSet(ctx, req.(*ToggleSuspendGitOpsSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitOpsSets_GetReconciledObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReconciledObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitOpsSetsServer).GetReconciledObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitOpsSets_GetReconciledObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitOpsSetsServer).GetReconciledObjects(ctx, req.(*GetReconciledObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitOpsSets_SyncGitOpsSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncGitOpsSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitOpsSetsServer).SyncGitOpsSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitOpsSets_SyncGitOpsSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitOpsSetsServer).SyncGitOpsSet(ctx, req.(*SyncGitOpsSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GitOpsSets_ServiceDesc is the grpc.ServiceDesc for GitOpsSets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitOpsSets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitopssets.v1.GitOpsSets",
	HandlerType: (*GitOpsSetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGitOpsSets",
			Handler:    _GitOpsSets_ListGitOpsSets_Handler,
		},
		{
			MethodName: "GetGitOpsSet",
			Handler:    _GitOpsSets_GetGitOpsSet_Handler,
		},
		{
			MethodName: "ToggleSuspendGitOpsSet",
			Handler:    _GitOpsSets_ToggleSuspendGitOpsSet_Handler,
		},
		{
			MethodName: "GetReconciledObjects",
			Handler:    _GitOpsSets_GetReconciledObjects_Handler,
		},
		{
			MethodName: "SyncGitOpsSet",
			Handler:    _GitOpsSets_SyncGitOpsSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gitopssets/gitopssets.proto",
}

//
// This file holds the protobuf definitions
// for the Weave GitOps Enterprise Git Provider Authentication API.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: api/gitauth/gitauth.proto

package api

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GitProvider enum defines the Git provider used in the GitAuth API.
type GitProvider int32

const (
	GitProvider_Unknown         GitProvider = 0
	GitProvider_GitHub          GitProvider = 1
	GitProvider_GitLab          GitProvider = 2
	GitProvider_BitBucketServer GitProvider = 3
	GitProvider_AzureDevOps     GitProvider = 4
)

// Enum value maps for GitProvider.
var (
	GitProvider_name = map[int32]string{
		0: "Unknown",
		1: "GitHub",
		2: "GitLab",
		3: "BitBucketServer",
		4: "AzureDevOps",
	}
	GitProvider_value = map[string]int32{
		"Unknown":         0,
		"GitHub":          1,
		"GitLab":          2,
		"BitBucketServer": 3,
		"AzureDevOps":     4,
	}
)

func (x GitProvider) Enum() *GitProvider {
	p := new(GitProvider)
	*p = x
	return p
}

func (x GitProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_api_gitauth_gitauth_proto_enumTypes[0].Descriptor()
}

func (GitProvider) Type() protoreflect.EnumType {
	return &file_api_gitauth_gitauth_proto_enumTypes[0]
}

func (x GitProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitProvider.Descriptor instead.
func (GitProvider) EnumDescriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{0}
}

type AuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderName string `protobuf:"bytes,1,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"` // The name of the git provider
	AccessToken  string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`    // The token of the git provider
}

func (x *AuthenticateRequest) Reset() {
	*x = AuthenticateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest) ProtoMessage() {}

func (x *AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{0}
}

func (x *AuthenticateRequest) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *AuthenticateRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type AuthenticateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The jwt token that was generated using git provider name
	// and git provider token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AuthenticateResponse) Reset() {
	*x = AuthenticateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateResponse) ProtoMessage() {}

func (x *AuthenticateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateResponse) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{1}
}

func (x *AuthenticateResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetGithubDeviceCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetGithubDeviceCodeRequest) Reset() {
	*x = GetGithubDeviceCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGithubDeviceCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGithubDeviceCodeRequest) ProtoMessage() {}

func (x *GetGithubDeviceCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGithubDeviceCodeRequest.ProtoReflect.Descriptor instead.
func (*GetGithubDeviceCodeRequest) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{2}
}

type GetGithubDeviceCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Github Device Flow code that will be shown to the user
	UserCode   string `protobuf:"bytes,1,opt,name=user_code,json=userCode,proto3" json:"user_code,omitempty"`
	DeviceCode string `protobuf:"bytes,2,opt,name=device_code,json=deviceCode,proto3" json:"device_code,omitempty"` // A code that uniquely identifies a device
	// The URI that the user will visit to complete the flow
	ValidationUri string `protobuf:"bytes,3,opt,name=validation_uri,json=validationUri,proto3" json:"validation_uri,omitempty"`
	Interval      int32  `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"` // How often the client should retry the request
}

func (x *GetGithubDeviceCodeResponse) Reset() {
	*x = GetGithubDeviceCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGithubDeviceCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGithubDeviceCodeResponse) ProtoMessage() {}

func (x *GetGithubDeviceCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGithubDeviceCodeResponse.ProtoReflect.Descriptor instead.
func (*GetGithubDeviceCodeResponse) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{3}
}

func (x *GetGithubDeviceCodeResponse) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

func (x *GetGithubDeviceCodeResponse) GetDeviceCode() string {
	if x != nil {
		return x.DeviceCode
	}
	return ""
}

func (x *GetGithubDeviceCodeResponse) GetValidationUri() string {
	if x != nil {
		return x.ValidationUri
	}
	return ""
}

func (x *GetGithubDeviceCodeResponse) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type GetGithubAuthStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deviceCode returned from a GetGithubDeviceCodeResponse
	DeviceCode string `protobuf:"bytes,1,opt,name=device_code,json=deviceCode,proto3" json:"device_code,omitempty"`
}

func (x *GetGithubAuthStatusRequest) Reset() {
	*x = GetGithubAuthStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGithubAuthStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGithubAuthStatusRequest) ProtoMessage() {}

func (x *GetGithubAuthStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGithubAuthStatusRequest.ProtoReflect.Descriptor instead.
func (*GetGithubAuthStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{4}
}

func (x *GetGithubAuthStatusRequest) GetDeviceCode() string {
	if x != nil {
		return x.DeviceCode
	}
	return ""
}

type GetGithubAuthStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An access token that can be used to interact with the Weave GitOps API.
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Error       string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"` // An error message.
}

func (x *GetGithubAuthStatusResponse) Reset() {
	*x = GetGithubAuthStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGithubAuthStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGithubAuthStatusResponse) ProtoMessage() {}

func (x *GetGithubAuthStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGithubAuthStatusResponse.ProtoReflect.Descriptor instead.
func (*GetGithubAuthStatusResponse) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{5}
}

func (x *GetGithubAuthStatusResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *GetGithubAuthStatusResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ParseRepoURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` // The URL to be parsed
}

func (x *ParseRepoURLRequest) Reset() {
	*x = ParseRepoURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseRepoURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseRepoURLRequest) ProtoMessage() {}

func (x *ParseRepoURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseRepoURLRequest.ProtoReflect.Descriptor instead.
func (*ParseRepoURLRequest) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{6}
}

func (x *ParseRepoURLRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ParseRepoURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                      // The name of the git repository
	Provider GitProvider `protobuf:"varint,2,opt,name=provider,proto3,enum=gitauth.v1.GitProvider" json:"provider,omitempty"` // The GitProvider for the repository
	// The person or organization to which this repo belongs
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *ParseRepoURLResponse) Reset() {
	*x = ParseRepoURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseRepoURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseRepoURLResponse) ProtoMessage() {}

func (x *ParseRepoURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseRepoURLResponse.ProtoReflect.Descriptor instead.
func (*ParseRepoURLResponse) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{7}
}

func (x *ParseRepoURLResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParseRepoURLResponse) GetProvider() GitProvider {
	if x != nil {
		return x.Provider
	}
	return GitProvider_Unknown
}

func (x *ParseRepoURLResponse) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type GetGitlabAuthURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URI that GitLab will use to send users back to GitOps.
	RedirectUri string `protobuf:"bytes,1,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
}

func (x *GetGitlabAuthURLRequest) Reset() {
	*x = GetGitlabAuthURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGitlabAuthURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGitlabAuthURLRequest) ProtoMessage() {}

func (x *GetGitlabAuthURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGitlabAuthURLRequest.ProtoReflect.Descriptor instead.
func (*GetGitlabAuthURLRequest) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{8}
}

func (x *GetGitlabAuthURLRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

type GetGitlabAuthURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL that users must visit to authorize GitLab authentication.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetGitlabAuthURLResponse) Reset() {
	*x = GetGitlabAuthURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGitlabAuthURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGitlabAuthURLResponse) ProtoMessage() {}

func (x *GetGitlabAuthURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGitlabAuthURLResponse.ProtoReflect.Descriptor instead.
func (*GetGitlabAuthURLResponse) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{9}
}

func (x *GetGitlabAuthURLResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type AuthorizeGitlabRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The challenge code obtained from the OAuth callback
	Code        string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	RedirectUri string `protobuf:"bytes,2,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"` // The redirect URI that originated the OAuth flow
}

func (x *AuthorizeGitlabRequest) Reset() {
	*x = AuthorizeGitlabRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeGitlabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeGitlabRequest) ProtoMessage() {}

func (x *AuthorizeGitlabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeGitlabRequest.ProtoReflect.Descriptor instead.
func (*AuthorizeGitlabRequest) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{10}
}

func (x *AuthorizeGitlabRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AuthorizeGitlabRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

type AuthorizeGitlabResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A token that can be used to authenticate the GitOps API server.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AuthorizeGitlabResponse) Reset() {
	*x = AuthorizeGitlabResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeGitlabResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeGitlabResponse) ProtoMessage() {}

func (x *AuthorizeGitlabResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeGitlabResponse.ProtoReflect.Descriptor instead.
func (*AuthorizeGitlabResponse) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{11}
}

func (x *AuthorizeGitlabResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ValidateProviderTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider GitProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=gitauth.v1.GitProvider" json:"provider,omitempty"`
}

func (x *ValidateProviderTokenRequest) Reset() {
	*x = ValidateProviderTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateProviderTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateProviderTokenRequest) ProtoMessage() {}

func (x *ValidateProviderTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateProviderTokenRequest.ProtoReflect.Descriptor instead.
func (*ValidateProviderTokenRequest) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{12}
}

func (x *ValidateProviderTokenRequest) GetProvider() GitProvider {
	if x != nil {
		return x.Provider
	}
	return GitProvider_Unknown
}

type ValidateProviderTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *ValidateProviderTokenResponse) Reset() {
	*x = ValidateProviderTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateProviderTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateProviderTokenResponse) ProtoMessage() {}

func (x *ValidateProviderTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateProviderTokenResponse.ProtoReflect.Descriptor instead.
func (*ValidateProviderTokenResponse) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{13}
}

func (x *ValidateProviderTokenResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type GetBitbucketServerAuthURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URI that Bitbucket Server will use to send users back to GitOps.
	RedirectUri string `protobuf:"bytes,1,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
}

func (x *GetBitbucketServerAuthURLRequest) Reset() {
	*x = GetBitbucketServerAuthURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBitbucketServerAuthURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBitbucketServerAuthURLRequest) ProtoMessage() {}

func (x *GetBitbucketServerAuthURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBitbucketServerAuthURLRequest.ProtoReflect.Descriptor instead.
func (*GetBitbucketServerAuthURLRequest) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{14}
}

func (x *GetBitbucketServerAuthURLRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

type GetBitbucketServerAuthURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL that users must visit
	// to authorize BitBucket Server authentication.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetBitbucketServerAuthURLResponse) Reset() {
	*x = GetBitbucketServerAuthURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBitbucketServerAuthURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBitbucketServerAuthURLResponse) ProtoMessage() {}

func (x *GetBitbucketServerAuthURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBitbucketServerAuthURLResponse.ProtoReflect.Descriptor instead.
func (*GetBitbucketServerAuthURLResponse) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{15}
}

func (x *GetBitbucketServerAuthURLResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type AuthorizeBitbucketServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The challenge code obtained from the OAuth callback
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// The state parameter provided in the authorization URL
	State       string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	RedirectUri string `protobuf:"bytes,3,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"` // The redirect URI that originated the OAuth flow
}

func (x *AuthorizeBitbucketServerRequest) Reset() {
	*x = AuthorizeBitbucketServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeBitbucketServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeBitbucketServerRequest) ProtoMessage() {}

func (x *AuthorizeBitbucketServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeBitbucketServerRequest.ProtoReflect.Descriptor instead.
func (*AuthorizeBitbucketServerRequest) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{16}
}

func (x *AuthorizeBitbucketServerRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AuthorizeBitbucketServerRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AuthorizeBitbucketServerRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

type AuthorizeBitbucketServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A token that can be used to authenticate the GitOps API server.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AuthorizeBitbucketServerResponse) Reset() {
	*x = AuthorizeBitbucketServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeBitbucketServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeBitbucketServerResponse) ProtoMessage() {}

func (x *AuthorizeBitbucketServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeBitbucketServerResponse.ProtoReflect.Descriptor instead.
func (*AuthorizeBitbucketServerResponse) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{17}
}

func (x *AuthorizeBitbucketServerResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetAzureDevOpsAuthURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URI that Azure DevOps will use to send users back to GitOps.
	RedirectUri string `protobuf:"bytes,1,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
}

func (x *GetAzureDevOpsAuthURLRequest) Reset() {
	*x = GetAzureDevOpsAuthURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAzureDevOpsAuthURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAzureDevOpsAuthURLRequest) ProtoMessage() {}

func (x *GetAzureDevOpsAuthURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAzureDevOpsAuthURLRequest.ProtoReflect.Descriptor instead.
func (*GetAzureDevOpsAuthURLRequest) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{18}
}

func (x *GetAzureDevOpsAuthURLRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

type GetAzureDevOpsAuthURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL that users must visit to initiate the Azure DevOps OAuth flow.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetAzureDevOpsAuthURLResponse) Reset() {
	*x = GetAzureDevOpsAuthURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAzureDevOpsAuthURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAzureDevOpsAuthURLResponse) ProtoMessage() {}

func (x *GetAzureDevOpsAuthURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAzureDevOpsAuthURLResponse.ProtoReflect.Descriptor instead.
func (*GetAzureDevOpsAuthURLResponse) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{19}
}

func (x *GetAzureDevOpsAuthURLResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type AuthorizeAzureDevOpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The challenge code obtained from the OAuth callback
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// The state parameter provided in the authorization URL
	State       string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	RedirectUri string `protobuf:"bytes,3,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"` // The redirect URI that originated the OAuth flow
}

func (x *AuthorizeAzureDevOpsRequest) Reset() {
	*x = AuthorizeAzureDevOpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeAzureDevOpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeAzureDevOpsRequest) ProtoMessage() {}

func (x *AuthorizeAzureDevOpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeAzureDevOpsRequest.ProtoReflect.Descriptor instead.
func (*AuthorizeAzureDevOpsRequest) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{20}
}

func (x *AuthorizeAzureDevOpsRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AuthorizeAzureDevOpsRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AuthorizeAzureDevOpsRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

type AuthorizeAzureDevOpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A token that can be used to authenticate the GitOps API server.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AuthorizeAzureDevOpsResponse) Reset() {
	*x = AuthorizeAzureDevOpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_gitauth_gitauth_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeAzureDevOpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeAzureDevOpsResponse) ProtoMessage() {}

func (x *AuthorizeAzureDevOpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gitauth_gitauth_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeAzureDevOpsResponse.ProtoReflect.Descriptor instead.
func (*AuthorizeAzureDevOpsResponse) Descriptor() ([]byte, []int) {
	return file_api_gitauth_gitauth_proto_rawDescGZIP(), []int{21}
}

func (x *AuthorizeAzureDevOpsResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

var File_api_gitauth_gitauth_proto protoreflect.FileDescriptor

var file_api_gitauth_gitauth_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x67, 0x69,
	0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x67, 0x69, 0x74,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2c, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x9e, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x22, 0x3d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x56, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x27, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x75, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x52,
	0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x22, 0x2c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0x4f, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x72, 0x69, 0x22, 0x2f, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x53, 0x0a, 0x1c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x1d, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x22, 0x45, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x22, 0x35, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x22, 0x6e, 0x0a, 0x1f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x42, 0x69, 0x74,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69,
	0x22, 0x38, 0x0a, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x42, 0x69, 0x74,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x41, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x44, 0x65, 0x76, 0x4f, 0x70, 0x73, 0x41, 0x75, 0x74, 0x68,
	0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x22, 0x31, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x44, 0x65, 0x76, 0x4f, 0x70, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x22, 0x6a, 0x0a, 0x1b, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x76, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x22, 0x34, 0x0a, 0x1c,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x76, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2a, 0x58, 0x0a, 0x0b, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x69,
	0x74, 0x4c, 0x61, 0x62, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x69, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x44, 0x65, 0x76, 0x4f, 0x70, 0x73, 0x10, 0x04, 0x32, 0x98, 0x0d, 0x0a,
	0x07, 0x47, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x12, 0x7e, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x12, 0x9b, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67,
	0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a,
	0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x12,
	0x23, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x41, 0x75, 0x74, 0x68, 0x55,
	0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x12, 0xac, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x69, 0x74,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x55, 0x52, 0x4c, 0x12, 0x2c, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69,
	0x74, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0xb6, 0x01, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x74,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2f, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x92, 0x01,
	0x0a, 0x0f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x12, 0x22, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x30, 0x3a, 0x01, 0x2a, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x74, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x76, 0x4f, 0x70, 0x73, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x12, 0x28, 0x2e, 0x67,
	0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x76, 0x4f, 0x70, 0x73, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x44, 0x65, 0x76, 0x4f,
	0x70, 0x73, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x64, 0x65, 0x76, 0x6f, 0x70,
	0x73, 0x12, 0xa6, 0x01, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x44, 0x65, 0x76, 0x4f, 0x70, 0x73, 0x12, 0x27, 0x2e, 0x67, 0x69, 0x74,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x44, 0x65, 0x76, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x76, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69,
	0x74, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x64, 0x65, 0x76, 0x6f, 0x70, 0x73,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x75, 0x0a, 0x0c, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x1f, 0x2e, 0x67, 0x69, 0x74,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x69,
	0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x74, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x2d, 0x75, 0x72,
	0x6c, 0x12, 0x93, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x2e, 0x67, 0x69,
	0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0xd9, 0x01, 0x92, 0x41, 0x9a, 0x01, 0x12, 0x7c,
	0x0a, 0x23, 0x57, 0x65, 0x61, 0x76, 0x65, 0x20, 0x47, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x20, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x20, 0x47, 0x69, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x20, 0x41, 0x50, 0x49, 0x12, 0x50, 0x57, 0x65, 0x61, 0x76, 0x65, 0x20, 0x47, 0x69, 0x74,
	0x6f, 0x70, 0x73, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x20, 0x47,
	0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x20, 0x41, 0x50, 0x49, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x76, 0x69, 0x61, 0x20, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x32, 0x03, 0x30, 0x2e, 0x31, 0x32, 0x0c, 0x67, 0x69,
	0x74, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x0c, 0x67, 0x69, 0x74, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x61, 0x76, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f,
	0x77, 0x65, 0x61, 0x76, 0x65, 0x2d, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x2d, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x67, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_gitauth_gitauth_proto_rawDescOnce sync.Once
	file_api_gitauth_gitauth_proto_rawDescData = file_api_gitauth_gitauth_proto_rawDesc
)

func file_api_gitauth_gitauth_proto_rawDescGZIP() []byte {
	file_api_gitauth_gitauth_proto_rawDescOnce.Do(func() {
		file_api_gitauth_gitauth_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_gitauth_gitauth_proto_rawDescData)
	})
	return file_api_gitauth_gitauth_proto_rawDescData
}

var file_api_gitauth_gitauth_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_gitauth_gitauth_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_api_gitauth_gitauth_proto_goTypes = []interface{}{
	(GitProvider)(0),                          // 0: gitauth.v1.GitProvider
	(*AuthenticateRequest)(nil),               // 1: gitauth.v1.AuthenticateRequest
	(*AuthenticateResponse)(nil),              // 2: gitauth.v1.AuthenticateResponse
	(*GetGithubDeviceCodeRequest)(nil),        // 3: gitauth.v1.GetGithubDeviceCodeRequest
	(*GetGithubDeviceCodeResponse)(nil),       // 4: gitauth.v1.GetGithubDeviceCodeResponse
	(*GetGithubAuthStatusRequest)(nil),        // 5: gitauth.v1.GetGithubAuthStatusRequest
	(*GetGithubAuthStatusResponse)(nil),       // 6: gitauth.v1.GetGithubAuthStatusResponse
	(*ParseRepoURLRequest)(nil),               // 7: gitauth.v1.ParseRepoURLRequest
	(*ParseRepoURLResponse)(nil),              // 8: gitauth.v1.ParseRepoURLResponse
	(*GetGitlabAuthURLRequest)(nil),           // 9: gitauth.v1.GetGitlabAuthURLRequest
	(*GetGitlabAuthURLResponse)(nil),          // 10: gitauth.v1.GetGitlabAuthURLResponse
	(*AuthorizeGitlabRequest)(nil),            // 11: gitauth.v1.AuthorizeGitlabRequest
	(*AuthorizeGitlabResponse)(nil),           // 12: gitauth.v1.AuthorizeGitlabResponse
	(*ValidateProviderTokenRequest)(nil),      // 13: gitauth.v1.ValidateProviderTokenRequest
	(*ValidateProviderTokenResponse)(nil),     // 14: gitauth.v1.ValidateProviderTokenResponse
	(*GetBitbucketServerAuthURLRequest)(nil),  // 15: gitauth.v1.GetBitbucketServerAuthURLRequest
	(*GetBitbucketServerAuthURLResponse)(nil), // 16: gitauth.v1.GetBitbucketServerAuthURLResponse
	(*AuthorizeBitbucketServerRequest)(nil),   // 17: gitauth.v1.AuthorizeBitbucketServerRequest
	(*AuthorizeBitbucketServerResponse)(nil),  // 18: gitauth.v1.AuthorizeBitbucketServerResponse
	(*GetAzureDevOpsAuthURLRequest)(nil),      // 19: gitauth.v1.GetAzureDevOpsAuthURLRequest
	(*GetAzureDevOpsAuthURLResponse)(nil),     // 20: gitauth.v1.GetAzureDevOpsAuthURLResponse
	(*AuthorizeAzureDevOpsRequest)(nil),       // 21: gitauth.v1.AuthorizeAzureDevOpsRequest
	(*AuthorizeAzureDevOpsResponse)(nil),      // 22: gitauth.v1.AuthorizeAzureDevOpsResponse
}
var file_api_gitauth_gitauth_proto_depIdxs = []int32{
	0,  // 0: gitauth.v1.ParseRepoURLResponse.provider:type_name -> gitauth.v1.GitProvider
	0,  // 1: gitauth.v1.ValidateProviderTokenRequest.provider:type_name -> gitauth.v1.GitProvider
	1,  // 2: gitauth.v1.GitAuth.Authenticate:input_type -> gitauth.v1.AuthenticateRequest
	3,  // 3: gitauth.v1.GitAuth.GetGithubDeviceCode:input_type -> gitauth.v1.GetGithubDeviceCodeRequest
	5,  // 4: gitauth.v1.GitAuth.GetGithubAuthStatus:input_type -> gitauth.v1.GetGithubAuthStatusRequest
	9,  // 5: gitauth.v1.GitAuth.GetGitlabAuthURL:input_type -> gitauth.v1.GetGitlabAuthURLRequest
	15, // 6: gitauth.v1.GitAuth.GetBitbucketServerAuthURL:input_type -> gitauth.v1.GetBitbucketServerAuthURLRequest
	17, // 7: gitauth.v1.GitAuth.AuthorizeBitbucketServer:input_type -> gitauth.v1.AuthorizeBitbucketServerRequest
	11, // 8: gitauth.v1.GitAuth.AuthorizeGitlab:input_type -> gitauth.v1.AuthorizeGitlabRequest
	19, // 9: gitauth.v1.GitAuth.GetAzureDevOpsAuthURL:input_type -> gitauth.v1.GetAzureDevOpsAuthURLRequest
	21, // 10: gitauth.v1.GitAuth.AuthorizeAzureDevOps:input_type -> gitauth.v1.AuthorizeAzureDevOpsRequest
	7,  // 11: gitauth.v1.GitAuth.ParseRepoURL:input_type -> gitauth.v1.ParseRepoURLRequest
	13, // 12: gitauth.v1.GitAuth.ValidateProviderToken:input_type -> gitauth.v1.ValidateProviderTokenRequest
	2,  // 13: gitauth.v1.GitAuth.Authenticate:output_type -> gitauth.v1.AuthenticateResponse
	4,  // 14: gitauth.v1.GitAuth.GetGithubDeviceCode:output_type -> gitauth.v1.GetGithubDeviceCodeResponse
	6,  // 15: gitauth.v1.GitAuth.GetGithubAuthStatus:output_type -> gitauth.v1.GetGithubAuthStatusResponse
	10, // 16: gitauth.v1.GitAuth.GetGitlabAuthURL:output_type -> gitauth.v1.GetGitlabAuthURLResponse
	16, // 17: gitauth.v1.GitAuth.GetBitbucketServerAuthURL:output_type -> gitauth.v1.GetBitbucketServerAuthURLResponse
	18, // 18: gitauth.v1.GitAuth.AuthorizeBitbucketServer:output_type -> gitauth.v1.AuthorizeBitbucketServerResponse
	12, // 19: gitauth.v1.GitAuth.AuthorizeGitlab:output_type -> gitauth.v1.AuthorizeGitlabResponse
	20, // 20: gitauth.v1.GitAuth.GetAzureDevOpsAuthURL:output_type -> gitauth.v1.GetAzureDevOpsAuthURLResponse
	22, // 21: gitauth.v1.GitAuth.AuthorizeAzureDevOps:output_type -> gitauth.v1.AuthorizeAzureDevOpsResponse
	8,  // 22: gitauth.v1.GitAuth.ParseRepoURL:output_type -> gitauth.v1.ParseRepoURLResponse
	14, // 23: gitauth.v1.GitAuth.ValidateProviderToken:output_type -> gitauth.v1.ValidateProviderTokenResponse
	13, // [13:24] is the sub-list for method output_type
	2,  // [2:13] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_api_gitauth_gitauth_proto_init() }
func file_api_gitauth_gitauth_proto_init() {
	if File_api_gitauth_gitauth_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_gitauth_gitauth_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGithubDeviceCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGithubDeviceCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGithubAuthStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGithubAuthStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseRepoURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseRepoURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGitlabAuthURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGitlabAuthURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeGitlabRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeGitlabResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateProviderTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateProviderTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBitbucketServerAuthURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBitbucketServerAuthURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeBitbucketServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeBitbucketServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAzureDevOpsAuthURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAzureDevOpsAuthURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeAzureDevOpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_gitauth_gitauth_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeAzureDevOpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_gitauth_gitauth_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_gitauth_gitauth_proto_goTypes,
		DependencyIndexes: file_api_gitauth_gitauth_proto_depIdxs,
		EnumInfos:         file_api_gitauth_gitauth_proto_enumTypes,
		MessageInfos:      file_api_gitauth_gitauth_proto_msgTypes,
	}.Build()
	File_api_gitauth_gitauth_proto = out.File
	file_api_gitauth_gitauth_proto_rawDesc = nil
	file_api_gitauth_gitauth_proto_goTypes = nil
	file_api_gitauth_gitauth_proto_depIdxs = nil
}

//
// This file holds the protobuf definitions for the Weave GitOps Terraform API.
// Messages and enums are defined in types.proto.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/terraform/terraform.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Terraform_ListTerraformObjects_FullMethodName          = "/terraform.v1.Terraform/ListTerraformObjects"
	Terraform_GetTerraformObject_FullMethodName            = "/terraform.v1.Terraform/GetTerraformObject"
	Terraform_SyncTerraformObjects_FullMethodName          = "/terraform.v1.Terraform/SyncTerraformObjects"
	Terraform_ToggleSuspendTerraformObjects_FullMethodName = "/terraform.v1.Terraform/ToggleSuspendTerraformObjects"
	Terraform_GetTerraformObjectPlan_FullMethodName        = "/terraform.v1.Terraform/GetTerraformObjectPlan"
	Terraform_ReplanTerraformObject_FullMethodName         = "/terraform.v1.Terraform/ReplanTerraformObject"
)

// TerraformClient is the client API for Terraform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerraformClient interface {
	ListTerraformObjects(ctx context.Context, in *ListTerraformObjectsRequest, opts ...grpc.CallOption) (*ListTerraformObjectsResponse, error)
	GetTerraformObject(ctx context.Context, in *GetTerraformObjectRequest, opts ...grpc.CallOption) (*GetTerraformObjectResponse, error)
	SyncTerraformObjects(ctx context.Context, in *SyncTerraformObjectsRequest, opts ...grpc.CallOption) (*SyncTerraformObjectsResponse, error)
	ToggleSuspendTerraformObjects(ctx context.Context, in *ToggleSuspendTerraformObjectsRequest, opts ...grpc.CallOption) (*ToggleSuspendTerraformObjectsResponse, error)
	GetTerraformObjectPlan(ctx context.Context, in *GetTerraformObjectPlanRequest, opts ...grpc.CallOption) (*GetTerraformObjectPlanResponse, error)
	ReplanTerraformObject(ctx context.Context, in *ReplanTerraformObjectRequest, opts ...grpc.CallOption) (*ReplanTerraformObjectResponse, error)
}

type terraformClient struct {
	cc grpc.ClientConnInterface
}

func NewTerraformClient(cc grpc.ClientConnInterface) TerraformClient {
	return &terraformClient{cc}
}

func (c *terraformClient) ListTerraformObjects(ctx context.Context, in *ListTerraformObjectsRequest, opts ...grpc.CallOption) (*ListTerraformObjectsResponse, error) {
	out := new(ListTerraformObjectsResponse)
	err := c.cc.Invoke(ctx, Terraform_ListTerraformObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformClient) GetTerraformObject(ctx context.Context, in *GetTerraformObjectRequest, opts ...grpc.CallOption) (*GetTerraformObjectResponse, error) {
	out := new(GetTerraformObjectResponse)
	err := c.cc.Invoke(ctx, Terraform_GetTerraformObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformClient) SyncTerraformObjects(ctx context.Context, in *SyncTerraformObjectsRequest, opts ...grpc.CallOption) (*SyncTerraformObjectsResponse, error) {
	out := new(SyncTerraformObjectsResponse)
	err := c.cc.Invoke(ctx, Terraform_SyncTerraformObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformClient) ToggleSuspendTerraformObjects(ctx context.Context, in *ToggleSuspendTerraformObjectsRequest, opts ...grpc.CallOption) (*ToggleSuspendTerraformObjectsResponse, error) {
	out := new(ToggleSuspendTerraformObjectsResponse)
	err := c.cc.Invoke(ctx, Terraform_ToggleSuspendTerraformObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformClient) GetTerraformObjectPlan(ctx context.Context, in *GetTerraformObjectPlanRequest, opts ...grpc.CallOption) (*GetTerraformObjectPlanResponse, error) {
	out := new(GetTerraformObjectPlanResponse)
	err := c.cc.Invoke(ctx, Terraform_GetTerraformObjectPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformClient) ReplanTerraformObject(ctx context.Context, in *ReplanTerraformObjectRequest, opts ...grpc.CallOption) (*ReplanTerraformObjectResponse, error) {
	out := new(ReplanTerraformObjectResponse)
	err := c.cc.Invoke(ctx, Terraform_ReplanTerraformObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerraformServer is the server API for Terraform service.
// All implementations must embed UnimplementedTerraformServer
// for forward compatibility
type TerraformServer interface {
	ListTerraformObjects(context.Context, *ListTerraformObjectsRequest) (*ListTerraformObjectsResponse, error)
	GetTerraformObject(context.Context, *GetTerraformObjectRequest) (*GetTerraformObjectResponse, error)
	SyncTerraformObjects(context.Context, *SyncTerraformObjectsRequest) (*SyncTerraformObjectsResponse, error)
	ToggleSuspendTerraformObjects(context.Context, *ToggleSuspendTerraformObjectsRequest) (*ToggleSuspendTerraformObjectsResponse, error)
	GetTerraformObjectPlan(context.Context, *GetTerraformObjectPlanRequest) (*GetTerraformObjectPlanResponse, error)
	ReplanTerraformObject(context.Context, *ReplanTerraformObjectRequest) (*ReplanTerraformObjectResponse, error)
	mustEmbedUnimplementedTerraformServer()
}

// UnimplementedTerraformServer must be embedded to have forward compatible implementations.
type UnimplementedTerraformServer struct {
}

func (UnimplementedTerraformServer) ListTerraformObjects(context.Context, *ListTerraformObjectsRequest) (*ListTerraformObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTerraformObjects not implemented")
}
func (UnimplementedTerraformServer) GetTerraformObject(context.Context, *GetTerraformObjectRequest) (*GetTerraformObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTerraformObject not implemented")
}
func (UnimplementedTerraformServer) SyncTerraformObjects(context.Context, *SyncTerraformObjectsRequest) (*SyncTerraformObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncTerraformObjects not implemented")
}
func (UnimplementedTerraformServer) ToggleSuspendTerraformObjects(context.Context, *ToggleSuspendTerraformObjectsRequest) (*ToggleSuspendTerraformObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleSuspendTerraformObjects not implemented")
}
func (UnimplementedTerraformServer) GetTerraformObjectPlan(context.Context, *GetTerraformObjectPlanRequest) (*GetTerraformObjectPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTerraformObjectPlan not implemented")
}
func (UnimplementedTerraformServer) ReplanTerraformObject(context.Context, *ReplanTerraformObjectRequest) (*ReplanTerraformObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplanTerraformObject not implemented")
}
func (UnimplementedTerraformServer) mustEmbedUnimplementedTerraformServer() {}

// UnsafeTerraformServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerraformServer will
// result in compilation errors.
type UnsafeTerraformServer interface {
	mustEmbedUnimplementedTerraformServer()
}

func RegisterTerraformServer(s grpc.ServiceRegistrar, srv TerraformServer) {
	s.RegisterService(&Terraform_ServiceDesc, srv)
}

func _Terraform_ListTerraformObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTerraformObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformServer).ListTerraformObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Terraform_ListTerraformObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformServer).ListTerraformObjects(ctx, req.(*ListTerraformObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Terraform_GetTerraformObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTerraformObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformServer).GetTerraformObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Terraform_GetTerraformObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformServer).GetTerraformObject(ctx, req.(*GetTerraformObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Terraform_SyncTerraformObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncTerraformObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformServer).SyncTerraformObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Terraform_SyncTerraformObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformServer).SyncTerraformObjects(ctx, req.(*SyncTerraformObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Terraform_ToggleSuspendTerraformObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleSuspendTerraformObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformServer).ToggleSuspendTerraformObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Terraform_ToggleSuspendTerraformObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformServer).ToggleSuspendTerraformObjects(ctx, req.(*ToggleSuspendTerraformObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Terraform_GetTerraformObjectPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTerraformObjectPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformServer).GetTerraformObjectPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Terraform_GetTerraformObjectPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformServer).GetTerraformObjectPlan(ctx, req.(*GetTerraformObjectPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Terraform_ReplanTerraformObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplanTerraformObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformServer).ReplanTerraformObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Terraform_ReplanTerraformObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformServer).ReplanTerraformObject(ctx, req.(*ReplanTerraformObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Terraform_ServiceDesc is the grpc.ServiceDesc for Terraform service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Terraform_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terraform.v1.Terraform",
	HandlerType: (*TerraformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTerraformObjects",
			Handler:    _Terraform_ListTerraformObjects_Handler,
		},
		{
			MethodName: "GetTerraformObject",
			Handler:    _Terraform_GetTerraformObject_Handler,
		},
		{
			MethodName: "SyncTerraformObjects",
			Handler:    _Terraform_SyncTerraformObjects_Handler,
		},
		{
			MethodName: "ToggleSuspendTerraformObjects",
			Handler:    _Terraform_ToggleSuspendTerraformObjects_Handler,
		},
		{
			MethodName: "GetTerraformObjectPlan",
			Handler:    _Terraform_GetTerraformObjectPlan_Handler,
		},
		{
			MethodName: "ReplanTerraformObject",
			Handler:    _Terraform_ReplanTerraformObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/terraform/terraform.proto",
}

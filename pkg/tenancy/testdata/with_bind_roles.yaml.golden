apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  labels:
    toolkit.fluxcd.io/tenant: foo-tenant
  name: foo-ns
spec: {}
status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    toolkit.fluxcd.io/tenant: foo-tenant
  name: foo-tenant
  namespace: foo-ns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  labels:
    toolkit.fluxcd.io/tenant: foo-tenant
  name: foo-tenant-service-account
  namespace: foo-ns
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    toolkit.fluxcd.io/tenant: foo-tenant
  name: foo-tenant-service-account-deployment
  namespace: foo-ns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: foo-tenant-service-account-deployment
subjects:
- kind: ServiceAccount
  name: foo-tenant
  namespace: foo-ns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    toolkit.fluxcd.io/tenant: foo-tenant
  name: foo-tenant-service-account-foo-role
  namespace: foo-ns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: foo-role
subjects:
- kind: ServiceAccount
  name: foo-tenant
  namespace: foo-ns
---
apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  creationTimestamp: null
  labels:
    toolkit.fluxcd.io/tenant: foo-tenant
  name: weave.policies.tenancy.foo-tenant-allowed-application-deploy
spec:
  category: weave.categories.tenancy
  code: |
    package weave.tenancy.allowed_application_deploy

    controller_input := input.review.object
    violation[result] {
        namespaces := input.parameters.namespaces
        targetNamespace := controller_input.spec.targetNamespace
        not contains_array(targetNamespace, namespaces)
        result = {
        "issue detected": true,
        "msg": sprintf("using target namespace %v is not allowed", [targetNamespace]),
        }
    }
    violation[result] {
        serviceAccountName := controller_input.spec.serviceAccountName
        serviceAccountName != input.parameters.service_account_name
        result = {
        "issue detected": true,
        "msg": sprintf("using service account name %v is not allowed", [serviceAccountName]),
        }
    }
    contains_array(item, items) {
        items[_] = item
    }
  description: Determines which helm release and kustomization can be used in a tenant
  how_to_solve: ""
  id: weave.policies.tenancy.foo-tenant-allowed-application-deploy
  name: foo-tenant allowed application deploy
  parameters:
  - name: namespaces
    required: false
    type: array
    value:
    - foo-ns
  - name: service_account_name
    required: false
    type: string
    value: foo-tenant
  severity: high
  standards: []
  tags:
  - tenancy
  targets:
    kinds:
    - HelmRelease
    - Kustomization
    labels: []
    namespaces:
    - foo-ns
---

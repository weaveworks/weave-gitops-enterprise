on:
  push:
    branches-ignore:
      - "main"
    tags-ignore:
      - "*"
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

name: run tests
jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      GO_CACHE_NAME: cache-go-modules
    steps:
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - name: echo ref
        run: |
          echo "${{ github.ref }}"
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - name: Configure git for private modules
        env:
          GITHUB_BUILD_USERNAME: wge-build-bot
          GITHUB_BUILD_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://${GITHUB_BUILD_USERNAME}:${GITHUB_BUILD_TOKEN}@github.com".insteadOf "https://github.com"
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-${{ github.job }}-${{ env.GO_CACHE_NAME }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.job }}-${{ env.GO_CACHE_NAME }}-
      - name: Lint
        run: |
          make lint

  unit-tests:
    runs-on: ubuntu-latest
    env:
      GO_CACHE_NAME: cache-go-modules
      WGE_COVERALLS_TOKEN: ${{ secrets.WGE_COVERALLS_TOKEN }}
    steps:
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - name: Configure git for private modules
        env:
          GITHUB_BUILD_USERNAME: wge-build-bot
          GITHUB_BUILD_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://${GITHUB_BUILD_USERNAME}:${GITHUB_BUILD_TOKEN}@github.com".insteadOf "https://github.com"
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-${{ github.job }}-${{ env.GO_CACHE_NAME }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.job }}-${{ env.GO_CACHE_NAME }}-
      - name: Install goveralls
        env:
          GO111MODULE: off
        run: go get github.com/mattn/goveralls

      - name: Run unit tests
        run: |
          go version
          make unit-tests-with-coverage
    # - name: Send coverage
    #   run: |
    #     # submit the coverage 1 by 1, seems important that they have a -flagname
    #     goveralls -parallel -coverprofile=.coverprofile -service="GitHub Action" -flagname wks -repotoken $WGE_COVERALLS_TOKEN
    #     (cd cmd/event-writer; goveralls -coverprofile=.coverprofile -flagname event-writer -parallel -service="GitHub Action" -repotoken $WGE_COVERALLS_TOKEN)
    #     (cd common; goveralls -coverprofile=.coverprofile -flagname common -parallel -service="GitHub Action" -repotoken $WGE_COVERALLS_TOKEN)
    #     (cd cmd/capi-serve; goveralls -coverprofile=.coverprofile -flagname capi-server -parallel -service="GitHub Action" -repotoken $WGE_COVERALLS_TOKEN)

    #     # We've finished submitting the coverage
    #     curl -k "https://coveralls.io/webhook?repo_token=$WGE_COVERALLS_TOKEN" -d "payload[build_num]=$GITHUB_RUN_NUMBER&payload[status]=done"

  build:
    uses: ./.github/workflows/build.yaml
    with:
      helmrepo: "charts-v3"
    secrets:
      BUILD_BOT_PERSONAL_ACCESS_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
      WGE_DOCKER_IO_USER: ${{ secrets.WGE_DOCKER_IO_USER }}
      WGE_DOCKER_IO_PASSWORD: ${{ secrets.WGE_DOCKER_IO_PASSWORD }}
      WGE_NPM_GITHUB_TOKEN: ${{ secrets.WGE_NPM_GITHUB_TOKEN }}
      WGE_S3_AWS_ACCESS_KEY_ID: ${{ secrets.WGE_S3_AWS_ACCESS_KEY_ID }}
      WGE_S3_AWS_SECRET_ACCESS_KEY: ${{ secrets.WGE_S3_AWS_SECRET_ACCESS_KEY }}

  integration-tests:
    runs-on: ubuntu-latest
    env:
      GO_CACHE_NAME: cache-go-modules
      YARN_CACHE_NAME: cache-yarn
      GITHUB_TOKEN: ${{ secrets.WGE_GITHUB_TOKEN }}
      GITHUB_ORG: ${{ secrets.WGE_GITHUB_ORG }}
      GITHUB_USER: ${{ secrets.WGE_GITHUB_USER }}
      GITLAB_TOKEN: ${{ secrets.WGE_GITLAB_TOKEN }}
    steps:
      - id: cache-paths
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - name: Configure git for private modules
        env:
          GITHUB_BUILD_USERNAME: wge-build-bot
          GITHUB_BUILD_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://${GITHUB_BUILD_USERNAME}:${GITHUB_BUILD_TOKEN}@github.com".insteadOf "https://github.com"
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.cache-paths.outputs.go-build }}
            ${{ steps.cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-${{ github.job }}-${{ env.GO_CACHE_NAME }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.job }}-${{ env.GO_CACHE_NAME }}-
      - name: Yarn Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache-paths.outputs.dir }}
          key: ${{ runner.os }}-${{ env.YARN_CACHE_NAME }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.YARN_CACHE_NAME }}-
      - name: Set up ssh
        uses: ./.github/actions/setup-ssh
        with:
          ssh-private-key: ${{ secrets.WGE_GITHUB_PRIVATE_KEY }}
      - name: Run integration tests
        run: |
          go version
          go test -v ./test/integration/test -run TestAgent

          cd cmd/clusters-service
          go test -v ./... -tags=integration

  ui-integration-tests:
    runs-on: ubuntu-latest
    env:
      GO_CACHE_NAME: cache-go-modules
      YARN_CACHE_NAME: cache-yarn
      GITHUB_TOKEN: ${{ secrets.WGE_NPM_GITHUB_TOKEN }}
      SELENIUM_DEBUG: true
      ARTIFACTS_BASE_DIR: /tmp/ui-integration-test/
    steps:
      - id: cache-paths
        run: |
          echo "::set-output name=dir::$(yarn cache dir)"
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - name: Configure git for private modules
        env:
          GITHUB_BUILD_USERNAME: wge-build-bot
          GITHUB_BUILD_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://${GITHUB_BUILD_USERNAME}:${GITHUB_BUILD_TOKEN}@github.com".insteadOf "https://github.com"
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.cache-paths.outputs.go-build }}
            ${{ steps.cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-${{ github.job }}-${{ env.GO_CACHE_NAME }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.job }}-${{ env.GO_CACHE_NAME }}-
      - name: Yarn Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache-paths.outputs.dir }}
          key: ${{ runner.os }}-${{ env.YARN_CACHE_NAME }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.YARN_CACHE_NAME }}-
      - name: Setup selenium server
        run: |
          wget  https://selenium-release.storage.googleapis.com/3.14/selenium-server-standalone-3.14.0.jar

          # Start selenium server in standalone mode
          xvfb-run -a --server-args="-screen 0 1280x1024x24" java -jar ./selenium-server-standalone-3.14.0.jar &
      - name: Run integration tests
        run: |
          go version
          make ui-build-for-tests

          cd test/integration/test
          go test -v -ginkgo.v -run TestMccpUI -ginkgo.skip='@integration|@gce|@eks|@application|@upgrade' -ginkgo.reportFile=${{ env.ARTIFACTS_BASE_DIR }}/acceptance-test-results.xml --timeout=99999s
      - name: Store integration test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ui-integration-test-artifacts
          path: ${{ env.ARTIFACTS_BASE_DIR }}
          retention-days: 1

  smoke-tests:
    needs: [build]
    uses: ./.github/workflows/acceptance-test.yaml
    with:
      runs-on: ubuntu-latest
      os-name: linux
      timeout-minutes: 60
      focus-or-skip: "-ginkgo.focus='@smoke'"
      kubectl-version: "v1.21.1"
      git-provider: github
      git-provider_hostname: github.com
      cluster_resource_set: true
      management-cluster-kind: kind
      gitops-bin-path: /usr/local/bin/gitops
      database-type: sqlite
      artifacts-base-dir: "/tmp/smoke-test-github"
    secrets:
      BUILD_BOT_USER: wge-build-bot
      BUILD_BOT_PERSONAL_ACCESS_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
      WGE_GIT_PROVIDER_PRIVATE_KEY: ${{ secrets.WGE_GITHUB_PRIVATE_KEY }}
      WGE_GITHUB_TOKEN: ${{ secrets.WGE_GITHUB_TOKEN }}
      WGE_GITHUB_ORG: ${{ secrets.WGE_GITHUB_ORG }}
      WGE_GITHUB_USER: ${{ secrets.WGE_GITHUB_USER }}
      WGE_GITHUB_PASSWORD: ${{ secrets.WGE_GITHUB_PASSWORD }}
      WGE_GITHUB_MFA_KEY: ${{ secrets.WGE_GITHUB_MFA_KEY }}

  smoke-tests-gitlab:
    needs: [build]
    uses: ./.github/workflows/acceptance-test.yaml
    with:
      runs-on: ubuntu-latest
      os-name: linux
      timeout-minutes: 60
      focus-or-skip: "-ginkgo.focus='@smoke'"
      kubectl-version: "v1.22.0"
      git-provider: gitlab
      git-provider_hostname: gitlab.com
      cluster_resource_set: true
      management-cluster-kind: kind
      gitops-bin-path: /usr/local/bin/gitops
      database-type: sqlite
      artifacts-base-dir: "/tmp/smoke-test-gitlab"
    secrets:
      BUILD_BOT_USER: wge-build-bot
      BUILD_BOT_PERSONAL_ACCESS_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
      WGE_GITHUB_TOKEN: ${{ secrets.WGE_GITHUB_TOKEN }}
      WGE_GIT_PROVIDER_PRIVATE_KEY: ${{ secrets.WGE_SAS_GITLAB_PRIVATE_KEY }}
      WGE_GITLAB_TOKEN: ${{ secrets.WGE_SAS_GITLAB_TOKEN }}
      WGE_GITLAB_ORG: ${{ secrets.WGE_SAS_GITLAB_ORG }}
      WGE_GITLAB_USER: ${{ secrets.WGE_SAS_GITLAB_USER }}
      WGE_GITLAB_PASSWORD: ${{ secrets.WGE_SAS_GITLAB_PASSWORD }}
      WGE_GITLAB_CLIENT_ID: ${{ secrets.WGE_SAS_GITLAB_CLIENT_ID }}
      WGE_GITLAB_CLIENT_SECRET: ${{ secrets.WGE_SAS_GITLAB_CLIENT_SECRET }}

  smoke-tests-gitlab-on-prem:
    needs: [build]
    uses: ./.github/workflows/acceptance-test.yaml
    with:
      runs-on: ubuntu-latest
      os-name: linux
      timeout-minutes: 60
      focus-or-skip: "-ginkgo.focus='@smoke'"
      kubectl-version: "v1.22.0"
      git-provider: gitlab
      git-provider_hostname: gitlab.git.dev.wkp.weave.works
      cluster_resource_set: true
      management-cluster-kind: kind
      gitops-bin-path: /usr/local/bin/gitops
      database-type: sqlite
      artifacts-base-dir: "/tmp/smoke-test-gitlab-on-prem"
    secrets:
      BUILD_BOT_USER: wge-build-bot
      BUILD_BOT_PERSONAL_ACCESS_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
      WGE_GITHUB_TOKEN: ${{ secrets.WGE_GITHUB_TOKEN }}
      WGE_GIT_PROVIDER_PRIVATE_KEY: ${{ secrets.WGE_ON_PREM_GITLAB_PRIVATE_KEY }}
      WGE_GITLAB_TOKEN: ${{ secrets.WGE_ON_PREM_GITLAB_TOKEN }}
      WGE_GITLAB_ORG: ${{ secrets.WGE_ON_PREM_GITLAB_ORG }}
      WGE_GITLAB_USER: ${{ secrets.WGE_ON_PREM_GITLAB_USER }}
      WGE_GITLAB_PASSWORD: ${{ secrets.WGE_ON_PREM_GITLAB_PASSWORD }}
      WGE_GITLAB_CLIENT_ID: ${{ secrets.WGE_ON_PREM_GITLAB_CLIENT_ID }}
      WGE_GITLAB_CLIENT_SECRET: ${{ secrets.WGE_ON_PREM_GITLAB_CLIENT_SECRET }}

  acceptance-tests-github:
    needs: [build, lint, unit-tests, integration-tests, ui-integration-tests]
    uses: ./.github/workflows/acceptance-test.yaml
    with:
      runs-on: ubuntu-latest
      os-name: linux
      timeout-minutes: 90
      focus-or-skip: "-ginkgo.skip='@upgrade|@smoke|@gce|@eks'"
      kubectl-version: "v1.21.1"
      git-provider: github
      git-provider_hostname: github.com
      cluster_resource_set: true
      management-cluster-kind: kind
      gitops-bin-path: /usr/local/bin/gitops
      database-type: sqlite
      artifacts-base-dir: "/tmp/acceptance-test-github"
    secrets:
      BUILD_BOT_USER: wge-build-bot
      BUILD_BOT_PERSONAL_ACCESS_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
      WGE_GIT_PROVIDER_PRIVATE_KEY: ${{ secrets.WGE_GITHUB_PRIVATE_KEY }}
      WGE_GITHUB_TOKEN: ${{ secrets.WGE_GITHUB_TOKEN }}
      WGE_GITHUB_ORG: ${{ secrets.WGE_GITHUB_ORG }}
      WGE_GITHUB_USER: ${{ secrets.WGE_GITHUB_USER }}
      WGE_GITHUB_PASSWORD: ${{ secrets.WGE_GITHUB_PASSWORD }}
      WGE_GITHUB_MFA_KEY: ${{ secrets.WGE_GITHUB_MFA_KEY }}

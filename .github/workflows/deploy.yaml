on:
  push:
    branches:
      - main
  workflow_dispatch:

name: deploy
jobs:
  build:
    uses: ./.github/workflows/build.yaml
    with:
      helmrepo: "charts-v3"
    secrets:
      BUILD_BOT_PERSONAL_ACCESS_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
      WGE_DOCKER_IO_USER: ${{ secrets.WGE_DOCKER_IO_USER }}
      WGE_DOCKER_IO_PASSWORD: ${{ secrets.WGE_DOCKER_IO_PASSWORD }}
      WGE_NPM_GITHUB_TOKEN: ${{ secrets.WGE_NPM_GITHUB_TOKEN }}
      WGE_S3_AWS_ACCESS_KEY_ID: ${{ secrets.WGE_S3_AWS_ACCESS_KEY_ID }}
      WGE_S3_AWS_SECRET_ACCESS_KEY: ${{ secrets.WGE_S3_AWS_SECRET_ACCESS_KEY }}

  coverage:
    runs-on: ubuntu-latest
    env:
      GO_CACHE_NAME: cache-go-modules
      WGE_COVERALLS_TOKEN: ${{ secrets.WGE_COVERALLS_TOKEN }}
      ARTEFACTS_BASE_DIR: /tmp/workspace/test
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.x
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Configure git for private modules
      env:
        GITHUB_BUILD_USERNAME: wge-build-bot
        GITHUB_BUILD_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
      run: git config --global url."https://${GITHUB_BUILD_USERNAME}:${GITHUB_BUILD_TOKEN}@github.com".insteadOf "https://github.com"
    - name: Install dependencies
      run: |
        go mod download
        go get github.com/wadey/gocovmerge
        go get -u github.com/jstemmer/go-junit-report
        npm install -g junit-report-merger
    - name: Install goveralls
      env:
        GO111MODULE: off
      run: go get github.com/mattn/goveralls
    
    - name: Run unit tests
      run: | 
        go version
        mkdir -p ${{ env.ARTEFACTS_BASE_DIR }}
        
        WKP_DEBUG=true go test -cover -coverprofile=.coverprofile ./cmd/... ./pkg/... | go-junit-report > ${{ env.ARTEFACTS_BASE_DIR }}/test-results.xml
        cd ${{ github.workspace }}/cmd/event-writer && go test -cover -coverprofile=.coverprofile ./... | go-junit-report > ${{ env.ARTEFACTS_BASE_DIR }}/event-writer-results.xml
        cd ${{ github.workspace }}/common && go test -cover -coverprofile=.coverprofile ./... | go-junit-report > ${{ env.ARTEFACTS_BASE_DIR }}/common-results.xml
        cd ${{ github.workspace }}/cmd/clusters-service && go test -cover -coverprofile=.coverprofile ./... | go-junit-report > ${{ env.ARTEFACTS_BASE_DIR }}/clusters-service-results.xml

        cd ${{ github.workspace }}
        # Merge all coverage results
        gocovmerge .coverprofile cmd/event-writer/.coverprofile common/.coverprofile  cmd/clusters-service/.coverprofile > ${{ env.ARTEFACTS_BASE_DIR }}/merged-profiles    
        # Merge all junit test results
        jrm ${{ env.ARTEFACTS_BASE_DIR }}/combined-test-results.xml '${{ env.ARTEFACTS_BASE_DIR }}/*.xml'
    # - name: Send coverage
    #   run: |
    #     # submit the coverage 1 by 1, seems important that they have a -flagname
    #     goveralls -parallel -coverprofile=.coverprofile -service="GitHub Action" -flagname wks -repotoken $WGE_COVERALLS_TOKEN
    #     (cd cmd/event-writer; goveralls -coverprofile=.coverprofile -flagname event-writer -parallel -service="GitHub Action" -repotoken $WGE_COVERALLS_TOKEN)
    #     (cd common; goveralls -coverprofile=.coverprofile -flagname common -parallel -service="GitHub Action" -repotoken $WGE_COVERALLS_TOKEN)
    #     (cd cmd/capi-serve; goveralls -coverprofile=.coverprofile -flagname capi-server -parallel -service="GitHub Action" -repotoken $WGE_COVERALLS_TOKEN)

    #     # We've finished submitting the coverage
    #     curl -k "https://coveralls.io/webhook?repo_token=$WGE_COVERALLS_TOKEN" -d "payload[build_num]=$GITHUB_RUN_NUMBER&payload[status]=done"
    - name: Store unit test coverage results
      uses: actions/upload-artifact@v2
      with:
          name: unit-tests-artifacts
          path: |
            ${{ env.ARTEFACTS_BASE_DIR }}
          retention-days: 7
     
  acceptance-tests-gitlab:
    needs: [build, coverage]
    uses: ./.github/workflows/acceptance-test.yaml
    with:
      runs-on: ubuntu-latest
      os-name: linux
      timeout-minutes: 90
      focus-or-skip: "-ginkgo.skip='@gce|@eks|@application'"
      kubectl-version: "v1.22.0"
      git-provider: gitlab
      git-provider_hostname: gitlab.com
      cluster_resource_set: true
      management-cluster-kind: kind
      gitops-bin-path: /usr/local/bin/gitops
      database-type: sqlite
      artifacts-base-dir: "/tmp/acceptance-test-gitlab"
    secrets:
      BUILD_BOT_USER: wge-build-bot
      BUILD_BOT_PERSONAL_ACCESS_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
      WGE_GITHUB_TOKEN: ${{ secrets.WGE_GITHUB_TOKEN }}
      WGE_GIT_PROVIDER_PRIVATE_KEY: ${{ secrets.WGE_SAS_GITLAB_PRIVATE_KEY }}
      WGE_GITLAB_TOKEN: ${{ secrets.WGE_SAS_GITLAB_TOKEN }}
      WGE_GITLAB_ORG: ${{ secrets.WGE_SAS_GITLAB_ORG }}
      WGE_GITLAB_USER: ${{ secrets.WGE_SAS_GITLAB_USER }}
      WGE_GITLAB_PASSWORD: ${{ secrets.WGE_SAS_GITLAB_PASSWORD }}
      WGE_GITLAB_CLIENT_ID: ${{ secrets.WGE_SAS_GITLAB_CLIENT_ID }}
      WGE_GITLAB_CLIENT_SECRET: ${{ secrets.WGE_SAS_GITLAB_CLIENT_SECRET }}

  acceptance-tests-gitlab-on-prem:
    needs: [build, coverage]
    uses: ./.github/workflows/acceptance-test.yaml
    with:
      runs-on: ubuntu-latest
      os-name: linux
      timeout-minutes: 90
      focus-or-skip: "-ginkgo.focus='@git'"
      kubectl-version: "v1.22.0"
      git-provider: gitlab
      git-provider_hostname: gitlab.git.dev.wkp.weave.works
      cluster_resource_set: true
      management-cluster-kind: kind
      gitops-bin-path: /usr/local/bin/gitops
      database-type: sqlite
      artifacts-base-dir: "/tmp/acceptance-test-gitlab-on-prem"
    secrets:
      BUILD_BOT_USER: wge-build-bot
      BUILD_BOT_PERSONAL_ACCESS_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
      WGE_GITHUB_TOKEN: ${{ secrets.WGE_GITHUB_TOKEN }}
      WGE_GIT_PROVIDER_PRIVATE_KEY: ${{ secrets.WGE_ON_PREM_GITLAB_PRIVATE_KEY }}
      WGE_GITLAB_TOKEN: ${{ secrets.WGE_ON_PREM_GITLAB_TOKEN }}
      WGE_GITLAB_ORG: ${{ secrets.WGE_ON_PREM_GITLAB_ORG }}
      WGE_GITLAB_USER: ${{ secrets.WGE_ON_PREM_GITLAB_USER }}
      WGE_GITLAB_PASSWORD: ${{ secrets.WGE_ON_PREM_GITLAB_PASSWORD }}
      WGE_GITLAB_CLIENT_ID: ${{ secrets.WGE_ON_PREM_GITLAB_CLIENT_ID }}
      WGE_GITLAB_CLIENT_SECRET: ${{ secrets.WGE_ON_PREM_GITLAB_CLIENT_SECRET }}

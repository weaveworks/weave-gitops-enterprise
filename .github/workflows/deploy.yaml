on:
  push:
    branches:
      - main
  workflow_dispatch:

name: deploy
jobs:
  build:
    uses: weaveworks/weave-gitops-enterprise/.github/workflows/build.yaml@main
    with:
      helmrepo: "charts-v3"
    secrets:
      BUILD_BOT_PERSONAL_ACCESS_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
      WGE_DOCKER_IO_USER: ${{ secrets.WGE_DOCKER_IO_USER }}
      WGE_DOCKER_IO_PASSWORD: ${{ secrets.WGE_DOCKER_IO_PASSWORD }}
      WGE_NPM_GITHUB_TOKEN: ${{ secrets.WGE_NPM_GITHUB_TOKEN }}
      WGE_S3_AWS_ACCESS_KEY_ID: ${{ secrets.WGE_S3_AWS_ACCESS_KEY_ID }}
      WGE_S3_AWS_SECRET_ACCESS_KEY: ${{ secrets.WGE_S3_AWS_SECRET_ACCESS_KEY }}

  coverage:
    runs-on: ubuntu-latest
    env:
      GO_CACHE_NAME: cache-go-modules
      WGE_COVERALLS_TOKEN: ${{ secrets.WGE_COVERALLS_TOKEN }}
      ARTEFACTS_BASE_DIR: /tmp/workspace/test
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.x
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Configure git for private modules
      env:
        GITHUB_BUILD_USERNAME: wge-build-bot
        GITHUB_BUILD_TOKEN: ${{ secrets.BUILD_BOT_PERSONAL_ACCESS_TOKEN }}
      run: git config --global url."https://${GITHUB_BUILD_USERNAME}:${GITHUB_BUILD_TOKEN}@github.com".insteadOf "https://github.com"
    - name: Install dependencies
      run: |
        go mod download
        go get github.com/wadey/gocovmerge
        go get -u github.com/jstemmer/go-junit-report
        npm install -g junit-report-merger
    - name: Install goveralls
      env:
        GO111MODULE: off
      run: go get github.com/mattn/goveralls
    
    - name: Run unit tests
      run: | 
        go version
        mkdir -p ${{ env.ARTEFACTS_BASE_DIR }}
        
        WKP_DEBUG=true go test -cover -coverprofile=.coverprofile ./cmd/... ./pkg/... | go-junit-report > ${{ env.ARTEFACTS_BASE_DIR }}/test-results.xml
        cd ${{ github.workspace }}/cmd/event-writer && go test -cover -coverprofile=.coverprofile ./... | go-junit-report > ${{ env.ARTEFACTS_BASE_DIR }}/event-writer-results.xml
        cd ${{ github.workspace }}/common && go test -cover -coverprofile=.coverprofile ./... | go-junit-report > ${{ env.ARTEFACTS_BASE_DIR }}/common-results.xml
        cd ${{ github.workspace }}/cmd/clusters-service && go test -cover -coverprofile=.coverprofile ./... | go-junit-report > ${{ env.ARTEFACTS_BASE_DIR }}/clusters-service-results.xml

        cd ${{ github.workspace }}
        # Merge all coverage results
        gocovmerge .coverprofile cmd/event-writer/.coverprofile common/.coverprofile  cmd/clusters-service/.coverprofile > ${{ env.ARTEFACTS_BASE_DIR }}/merged-profiles    
        # Merge all junit test results
        jrm ${{ env.ARTEFACTS_BASE_DIR }}/combined-test-results.xml '${{ env.ARTEFACTS_BASE_DIR }}/*.xml'
    # - name: Send coverage
    #   run: |
    #     # submit the coverage 1 by 1, seems important that they have a -flagname
    #     goveralls -parallel -coverprofile=.coverprofile -service="GitHub Action" -flagname wks -repotoken $WGE_COVERALLS_TOKEN
    #     (cd cmd/event-writer; goveralls -coverprofile=.coverprofile -flagname event-writer -parallel -service="GitHub Action" -repotoken $WGE_COVERALLS_TOKEN)
    #     (cd common; goveralls -coverprofile=.coverprofile -flagname common -parallel -service="GitHub Action" -repotoken $WGE_COVERALLS_TOKEN)
    #     (cd cmd/capi-serve; goveralls -coverprofile=.coverprofile -flagname capi-server -parallel -service="GitHub Action" -repotoken $WGE_COVERALLS_TOKEN)

    #     # We've finished submitting the coverage
    #     curl -k "https://coveralls.io/webhook?repo_token=$WGE_COVERALLS_TOKEN" -d "payload[build_num]=$GITHUB_RUN_NUMBER&payload[status]=done"
    - name: Store unit test coverage results
      uses: actions/upload-artifact@v2
      with:
          name: unit-tests-artifacts
          path: |
            ${{ env.ARTEFACTS_BASE_DIR }}
          retention-days: 7

  acceptance-tests:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os_name: linux
          # - os: macOS-latest
          #   os_name: darwin
    needs: [build, coverage]
    timeout-minutes: 90
    env:
      GO_CACHE_NAME: cache-go-modules
      GIT_PROVIDER: github
      GITHUB_TOKEN: ${{ secrets.WGE_GITHUB_TOKEN }}
      GITHUB_ORG: ${{ secrets.WGE_GITHUB_ORG }}
      GITHUB_USER: ${{ secrets.WGE_GITHUB_USER }}
      GITHUB_PASSWORD: ${{ secrets.WGE_GITHUB_PASSWORD }}
      TOTP_TOKEN: ${{ secrets.WGE_GITHUB_MFA_KEY }}
      DOCKER_IO_USER: ${{ secrets.WGE_DOCKER_IO_USER }} 
      DOCKER_IO_PASSWORD: ${{ secrets.WGE_DOCKER_IO_PASSWORD }}
      EXP_CLUSTER_RESOURCE_SET: true
      GITOPS_BIN_PATH: /tmp/gitops
      SELENIUM_DEBUG: true
      ACCEPTANCE_TESTS_DATABASE_TYPE: sqlite
      ARTEFACTS_BASE_DIR: /tmp/workspace/test/
      CHECKPOINT_DISABLE: 1
    steps:
    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.x
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 
    - name: Go Build Cache
      uses: actions/cache@v2
      with:
        path: |
          ${{ steps.go-cache-paths.outputs.go-build }}
          ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-build-${{ env.GO_CACHE_NAME }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-build-${{ env.GO_CACHE_NAME }}-
    - name: Install docker
      if: ${{ runner.os == 'macOS' }}
      uses: docker-practice/actions-setup-docker@master
    - name: Install kubectl
      uses: Azure/setup-kubectl@v1
      with:
          version: 'v1.20.7'
    - name: Install kind
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
         elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install kind
        fi
    - name: Install clusterctl
      run: |
        curl -L https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.0.0/clusterctl-${{ matrix.os_name }}-amd64 -o clusterctl
        chmod +x ./clusterctl
        sudo mv ./clusterctl /usr/local/bin/clusterctl
        clusterctl version 
    - name: Set up ssh
      uses: ./.github/actions/setup-ssh
      with:
        ssh-private-key: ${{ secrets.WGE_GITHUB_PRIVATE_KEY }}
    - name: Configure git settings
      run: |
        git config --global user.email "test-user@weave.works"
        git config --global user.name "test-user"
        git config --global url.ssh://git@github.com/.insteadOf https://github.com/
    - name: Download totp-cli from GH
      run: |
        wget https://github.com/yitsushi/totp-cli/releases/download/v1.1.17/totp-cli-v1.1.17-${{ matrix.os_name }}-amd64.tar.gz
        tar -xf totp-cli-v1.1.17-${{ matrix.os_name }}-amd64.tar.gz
        mv ./totp-cli /usr/local/bin
    - name: Get a gitops-binary
      uses: ./.github/actions/gitops-binary
      with:
        os: ${{ matrix.os }}
        os_name: ${{ matrix.os_name }}
        path: ${{ env.GITOPS_BIN_PATH }}
    - name: Setup selenium server
      if: ${{ runner.os == 'Linux' }}
      run: |
        wget  https://selenium-release.storage.googleapis.com/3.14/selenium-server-standalone-3.14.0.jar

        # Start selenium server in standalone mode
        xvfb-run -a --server-args="-screen 0 1280x1024x24" java -jar ./selenium-server-standalone-3.14.0.jar &
    - name: Setup kind management cluster
      run: |
        kind create cluster --name management-${{ github.run_id }}-${{ github.run_number}} --image=kindest/node:v1.20.7 --config test/utils/data/local-kind-config.yaml
        kubectl get pods -A
    - name: Install wego entriprise componenets on management cluster
      run: |
        export CLUSTER_REPOSITORY=gitops-capi-template-${{ github.run_id }}-$(openssl rand -hex 8)
        # Set the CLUSTER_REPOSITORY as environment variable for subsequent steps
        echo "CLUSTER_REPOSITORY=$CLUSTER_REPOSITORY" >> $GITHUB_ENV

        ./test/utils/scripts/wego-enterprise.sh setup ${{ github.workspace }}
    - name: Run acceptance tests
      run: |
        cd test/acceptance/test/
        if [ "$RUNNER_OS" == "macOS" ]; then
          go test -ginkgo.skip=@gce -ginkgo.skip=@eks -ginkgo.v -v --timeout=99999s
        else
          go test -ginkgo.skip=@gce -ginkgo.skip=@eks -ginkgo.v -v --timeout=99999s
        fi
    - name: Store acceptance test results
      if: ${{ always() }}
      continue-on-error: true
      uses: actions/upload-artifact@v2
      with:
        name: acceptance-test-artifacts
        path: ${{ env.ARTEFACTS_BASE_DIR }}
        retention-days: 7

  # publish-test-results:
  #   runs-on: ubuntu-latest
  #   needs: [acceptance-tests]
  #   env:
  #     ARTEFACTS_BASE_DIR: /tmp/workspace/test/
  #   steps:
  #   - name: Install Go
  #     uses: actions/setup-go@v2
  #     with:
  #       go-version: 1.17.x
  #   - name: Checkout code
  #     uses: actions/checkout@v2
  #   - name: Install testspace client
  #     uses: testspace-com/setup-testspace@v1
  #     with:
  #       domain: weaveworks.testspace.com
  #   - name: Download artifacts
  #     uses: actions/download-artifact@v2
  #     with:
  #       path:
  #         results
  #   - name: Display structure of downloaded files
  #     run: ls -laR
  #     working-directory: results
  #   - name: Publish test results to Testspace
  #     run: |
  #       go get github.com/t-yuki/gocover-cobertura

  #       gocover-cobertura < results/unit-tests-artifacts/merged-profiles > coverage.xml
  #       testspace "[unit-tests]results/unit-tests-artifacts/combined-test-results.xml" "[acceptance-tests]results/acceptance-test-artifacts/acceptance-test-results.xml" "coverage.xml"
  

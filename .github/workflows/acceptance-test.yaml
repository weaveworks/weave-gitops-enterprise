#
# WARNING: only changing this file will not work!
#
# You must update the calling site (uses:) with the reference to the branch you are working on
#

name: "Acceptance Tests"
on:
  workflow_call:
    inputs:
      runs-on:
        description: "The type of machine to run the job on e.g macOS-latest or ubuntu-latest"
        required: true
        type: string
      os-name:
        description: "`linux` or `darwin`"
        required: true
        type: string
      timeout-minutes:
        description: "The maximum number of minutes to let a job run before GitHub automatically cancels it"
        required: true
        type: number
      label-filter:
        description: "Which tests to filter -- eg: --label-filter='smoke' or --label-filter='@smoke && !integration'"
        required: true
        type: string
      kubectl-version:
        description: "Version of kubectl"
        required: true
        type: string
      login_user_type:
        description: "Login user type e.g. cluster-user or oidc"
        required: true
        type: string
      git-provider:
        description: "Git provider for running tests either on github or gitlab"
        required: true
        type: string
      git-provider_hostname:
        description: "Git provider hostname of git instance e.g. github.com or gitlab.com"
        required: true
        type: string
      cluster_resource_set:
        description: "Enable support for ClusterResourceSet for automatically installing CNIs"
        required: false
        type: boolean
      management-cluster-kind:
        description: "Type of management cluster e.g. kind, eks or gke"
        required: true
        type: string
      capi_provider:
        description: "Capi provider e.g. capd, capa or capg"
        default: "capd"
        required: false
        type: string
      gitops-bin-path:
        description: "Path to gitops binary"
        default: "/usr/local/bin/gitops"
        required: false
        type: string
      test-artifact-name:
        description: "Test artifacts name"
        required: true
        type: string
      eks-leaf-kubeconfig:
        description: "EKS leaf cluster kubeconfig path (for connect cluster tests)"
        required: false
        type: string
      gce-leaf-kubeconfig:
        description: "GCE leaf cluster kubeconfig path (for connect cluster tests)"
        required: false
        type: string
    secrets:
      WGE_CLUSTER_ADMIN_PASSWORD:
        description: "Cluster user admin password"
        required: true
      WGE_CLUSTER_ADMIN_PASSWORD_HASH:
        description: "Cluster user admin password hash"
        required: true
      WGE_DEX_CLIENT_SECRET:
        description: "client credential secret for managment cluster OIDC (dex)"
        required: true
      WGE_DEX_CLI_CLIENT_SECRET:
        description: "client credential secret for CLI OIDC (dex)"
        required: false
      WGE_GIT_PROVIDER_PRIVATE_KEY:
        description: "Key for accessing git provider e.g. github or gitlab"
        required: false
      WGE_GITHUB_TOKEN:
        description: "Token for accessing GitHub"
        required: false
      WGE_GITHUB_ORG:
        description: "Github organization"
        required: false
      WGE_GITHUB_USER:
        description: "Github account user name"
        required: false
      WGE_GITHUB_PASSWORD:
        description: "Github accout password"
        required: false
      WGE_GITHUB_MFA_KEY:
        description: "MFA key for git authentication"
        required: false
      WGE_GITLAB_ORG:
        description: "Gitlab organization / group"
        required: false
      WGE_GITLAB_USER:
        description: "Gitlab account user name"
        required: false
      WGE_GITLAB_PASSWORD:
        description: "Gitlab accout password"
        required: false
      WGE_GITLAB_TOKEN:
        description: "Token for accessing Gitlab"
        required: false
      WGE_GITLAB_CLIENT_ID:
        description: "Gitlab oauth application ID"
        required: false
      WGE_GITLAB_CLIENT_SECRET:
        description: "Gitlab oauth pplication secret"
        required: false
      WGE_SLACK_BOT_TOKEN:
        description: "Token for posting messages to slack"
        required: false
      GCP_PROJECT_ID:
        description: "Project id of the Google Cloud project"
        required: false
      GCP_SA_KEY:
        description: "Google Cloud service account key"
        required: false
      WGE_EKS_AWS_ACCESS_KEY_ID:
        description: "AWS user access key id"
        required: false
      WGE_EKS_AWS_SECRET_ACCESS_KEY:
        description: "AWS user access key secret"
        required: false

env:
  GO_CACHE_NAME: cache-go-modules
  LOGIN_USER_TYPE: ${{ inputs.login_user_type }}
  CLUSTER_ADMIN_PASSWORD: ${{ secrets.WGE_CLUSTER_ADMIN_PASSWORD }}
  CLUSTER_ADMIN_PASSWORD_HASH: ${{ secrets.WGE_CLUSTER_ADMIN_PASSWORD_HASH }}
  OIDC_ISSUER_URL: https://dex-01.wge.dev.weave.works
  DEX_CLIENT_ID: weave-gitops-enterprise
  DEX_CLIENT_SECRET: ${{ secrets.WGE_DEX_CLIENT_SECRET }}
  DEX_CLI_CLIENT_ID: kubernetes-oidc-login
  DEX_CLI_CLIENT_SECRET: ${{ secrets.WGE_DEX_CLI_CLIENT_SECRET }}
  OIDC_KUBECONFIG: /tmp/oidc-kubeconfig
  GIT_PROVIDER: ${{ inputs.git-provider }}
  GIT_PROVIDER_HOSTNAME: ${{ inputs.git-provider_hostname }}
  GITHUB_ORG: ${{ secrets.WGE_GITHUB_ORG }}
  GITHUB_TOKEN: ${{ secrets.WGE_GITHUB_TOKEN }}
  GITHUB_USER: ${{ secrets.WGE_GITHUB_USER }}
  GITHUB_PASSWORD: ${{ secrets.WGE_GITHUB_PASSWORD }}
  TOTP_TOKEN: ${{ secrets.WGE_GITHUB_MFA_KEY }}
  GITLAB_ORG: ${{ secrets.WGE_GITLAB_ORG }}
  GITLAB_TOKEN: ${{ secrets.WGE_GITLAB_TOKEN }}
  GITLAB_USER: ${{ secrets.WGE_GITLAB_USER }}
  GITLAB_PASSWORD: ${{ secrets.WGE_GITLAB_PASSWORD }}
  GITLAB_CLIENT_ID: ${{ secrets.WGE_GITLAB_CLIENT_ID }}
  GITLAB_CLIENT_SECRET: ${{ secrets.WGE_GITLAB_CLIENT_SECRET }}
  UI_NODEPORT: 30080
  MANAGEMENT_CLUSTER_CNAME: weave.gitops.enterprise.com
  UPGRADE_MANAGEMENT_CLUSTER_CNAME: weave.gitops.upgrade.enterprise.com
  MANAGEMENT_CLUSTER_KIND: ${{ inputs.management-cluster-kind }}
  CAPI_PROVIDER: ${{ inputs.capi_provider }}
  GITOPS_BIN_PATH: ${{ inputs.gitops-bin-path }}
  ARTIFACTS_BASE_DIR: "/tmp/acceptance-test-artifact"
  TEST_ARTIFACT_NAME: ${{ inputs.test-artifact-name }}
  EXP_CLUSTER_RESOURCE_SET: ${{ inputs.cluster_resource_set }}
  USE_GKE_GCLOUD_AUTH_PLUGIN: True
  SELENIUM_DEBUG: true
  CHECKPOINT_DISABLE: 1
  WEAVE_GITOPS_FEATURE_TELEMETRY: "false"

jobs:
  tests:
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
      - name: Install Go
        uses: actions/setup-go@v3.3.1
        with:
          go-version: 1.18.x
      - name: Checkout code
        uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0
      - name: Go Build Cache
        env:
          GO_CACHE_NAME: cache-go-modules
        uses: actions/cache@v3.0.11
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-build-${{ env.GO_CACHE_NAME }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-${{ env.GO_CACHE_NAME }}-
      - name: setup aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.WGE_EKS_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.WGE_EKS_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Install eksctl
        if: ${{ inputs.management-cluster-kind == 'eks' }}
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version
          eksctl get clusters
      - name: Install flux
        run: |
          curl --silent --location https://github.com/fluxcd/flux2/releases/download/v0.36.0/flux_0.36.0_${{ inputs.os-name }}_amd64.tar.gz | tar xz -C /tmp
          sudo mv /tmp/flux /usr/local/bin
          flux version --client
      - name: Install aws-cli
        if: ${{ inputs.management-cluster-kind == 'eks' }}
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
          elif [ "$RUNNER_OS" == "macOS" ]; then
              curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
              sudo installer -pkg AWSCLIV2.pkg -target /
          fi
          aws --version
      - name: Install aws-iam-authenticator
        if: ${{ inputs.management-cluster-kind == 'eks' }}
        run: |
          wget --no-verbose https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.7/aws-iam-authenticator_0.5.7_${{ inputs.os-name }}_amd64 -O /tmp/aws-iam-authenticator
          chmod +x /tmp/aws-iam-authenticator
          sudo mv /tmp/aws-iam-authenticator /usr/local/bin
          aws-iam-authenticator version
      - name: Install kubelogin
        run: |
          wget --no-verbose https://github.com/int128/kubelogin/releases/latest/download/kubelogin_${{ inputs.os-name }}_amd64.zip -O /tmp/kubelogin.zip
          unzip /tmp/kubelogin.zip -d /tmp
          chmod +x /tmp/kubelogin
          mv /tmp/kubelogin /usr/local/bin/kubectl-oidc_login
          kubectl-oidc_login version
      - name: Authenticate to Google Cloud
        if: ${{ inputs.management-cluster-kind == 'gke' }}
        uses: google-github-actions/auth@v0.8.3
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up gcloud SDK
        if: ${{ inputs.management-cluster-kind == 'gke' }}
        uses: google-github-actions/setup-gcloud@v0.6.2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Install gcloud auth plugin
        if: ${{ inputs.management-cluster-kind == 'gke' }}
        run: |
          gcloud info
          gcloud components install gke-gcloud-auth-plugin --quiet
      - name: Install docker
        if: ${{ (runner.os == 'macOS') && (inputs.management-cluster-kind == 'kind') }}
        uses: docker-practice/actions-setup-docker@master
      - name: Install helm
        run: |
          wget --no-verbose https://get.helm.sh/helm-v3.10.0-${{ inputs.os-name }}-amd64.tar.gz
          tar -zxvf helm-v3.10.0-${{ inputs.os-name }}-amd64.tar.gz
          mv ${{ inputs.os-name }}-amd64/helm /usr/local/bin/helm
          helm version
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/${{ inputs.kubectl-version }}/bin/${{ inputs.os-name }}/amd64/kubectl"
          chmod +x kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
      - name: Install kind
        if: ${{ (runner.os == 'macOS') && (inputs.management-cluster-kind == 'kind') }}
        run: |
          brew update
          brew install kind
          kind version
      - name: Install clusterctl
        run: |
          curl -L https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.1.4/clusterctl-${{ inputs.os-name }}-amd64 -o clusterctl
          chmod +x ./clusterctl
          sudo mv ./clusterctl /usr/local/bin/clusterctl
          clusterctl version
      - name: Set up ssh
        uses: ./.github/actions/setup-ssh
        with:
          ssh-private-key: ${{ secrets.WGE_GIT_PROVIDER_PRIVATE_KEY }}
      - name: Configure git settings
        run: |
          if [ ${{ env.GIT_PROVIDER }} == "gitlab" ]; then
            export USERNAME=${{ env.GITLAB_USER }}
          else
            export USERNAME=${{ env.GITHUB_USER }}
          fi

          git config --global init.defaultBranch main
          git config --global user.email "team-pesto@weave.works"
          git config --global user.name $USERNAME
          git config --global url.ssh://git@github.com/.insteadOf https://github.com/
          git config --global url.git@gitlab.com:.insteadOf https://gitlab.com/
          git config --global url.git@gitlab.git.dev.weave.works:.insteadOf https://gitlab.git.dev.weave.works/
      - name: Download totp-cli from GH
        run: |
          wget --no-verbose https://github.com/yitsushi/totp-cli/releases/download/v1.1.17/totp-cli-v1.1.17-${{ inputs.os-name }}-amd64.tar.gz
          tar -xf totp-cli-v1.1.17-${{ inputs.os-name }}-amd64.tar.gz
          mv ./totp-cli /usr/local/bin
      - name: Download gitops binary
        uses: actions/download-artifact@v3.0.1
        with:
          name: gitops
          path: /tmp
      - name: chmod gitops binary
        run: |
          chmod +x /tmp/gitops-${{ inputs.runs-on }}
          ls -la /tmp/gitops-${{ inputs.runs-on }}
          sudo mv /tmp/gitops-${{ inputs.runs-on }} ${{ env.GITOPS_BIN_PATH }}
          gitops version
      - name: Install chromedriver
        if: ${{ (runner.os == 'Linux') && (inputs.git-provider_hostname == 'gitlab.com') }}
        run: |
          # It is not possible to fake webdriver/bot as a real user with latest chromedriver version (> 105.0.5195.52) for gitlab saas provider.
          wget --no-verbose https://chromedriver.storage.googleapis.com/105.0.5195.52/chromedriver_${{ inputs.os-name }}64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin
          chromedriver --version
      - name: Install chrome browser
        if: ${{ (runner.os == 'Linux') && (inputs.git-provider_hostname == 'gitlab.com') }}
        run: |
          # It is not possible to fake webdriver/bot as a real user with latest chrome browser version (> 105.0.5195.52) for gitlab saas provider.
          wget --no-verbose -O google-chrome.deb https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_105.0.5195.102-1_amd64.deb
          sudo apt install --allow-downgrades -y ./google-chrome.deb
          google-chrome --version
      - name: Setup selenium server
        if: ${{ runner.os == 'Linux' }}
        run: |
          wget --no-verbose https://selenium-release.storage.googleapis.com/3.14/selenium-server-standalone-3.14.0.jar

          # Start selenium server in standalone mode
          xvfb-run -a --server-args="-screen 0 1280x1024x24" java -jar ./selenium-server-standalone-3.14.0.jar &
      - name: Install Ginkgo
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo@v2.5.1
          ginkgo version
      - name: Setup management cluster
        run: |
          if [ ${{ inputs.management-cluster-kind }} = 'eks' ]; then
            export CLUSTER_NAME=wego-enterprise-nightly-eks-${{ inputs.os-name }}
            export CLUSTER_REGION=us-east-1

          elif [ ${{ inputs.management-cluster-kind }} = 'gke' ]; then
            export CLUSTER_NAME=wego-enterprise-nightly-gke-${{ inputs.os-name }}
            export CLUSTER_REGION=us-central1-a

          elif [ ${{ inputs.management-cluster-kind }} = 'kind' ]; then
            export CLUSTER_NAME=management-${{ github.run_id }}-${{ github.run_number}}
          fi

          ./test/utils/scripts/mgmt-cluster-setup.sh  ${{ inputs.management-cluster-kind }} $(pwd) $CLUSTER_NAME $CLUSTER_REGION
      - name: Run Acceptance tests
        run: |
          export CLUSTER_REPOSITORY=gitops-capi-template-${{ github.run_id }}-$(openssl rand -hex 8)

          if [ ${{ env.GIT_PROVIDER }} == "gitlab" ] && [ ${{ env.GIT_PROVIDER_HOSTNAME }} != "gitlab.com" ]; then
            export WEAVE_GITOPS_GIT_HOST_TYPES="${{ env.GIT_PROVIDER_HOSTNAME }}=gitlab"
            export GITLAB_HOSTNAME=${{ env.GIT_PROVIDER_HOSTNAME }}
          fi

          ginkgo --v --output-dir=${{ env.ARTIFACTS_BASE_DIR }} --junit-report=${{ env.TEST_ARTIFACT_NAME }}.xml --timeout=2h test/acceptance/test/
      - name: Store test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ env.TEST_ARTIFACT_NAME }}
          path: ${{ env.ARTIFACTS_BASE_DIR }}
          retention-days: 3
      - name: Reset management cluster
        if: ${{ always() }}
        continue-on-error: true
        run: |
          if [ ${{ inputs.management-cluster-kind }} = "eks" ] || [ ${{ inputs.management-cluster-kind }} = "gke" ]; then
            ./test/utils/scripts/wego-enterprise.sh reset
          fi

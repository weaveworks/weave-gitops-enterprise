// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cluster_services

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClustersServiceClient is the client API for ClustersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClustersServiceClient interface {
	// List templates
	//
	// List templates from the management cluster.
	ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error)
	// Get template details
	//
	// Get a single template from the management cluster.
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
	// Renders a template using given values.
	//
	// Render out a template using the given values. See the /pull-request endpoint for more details.
	RenderTemplate(ctx context.Context, in *RenderTemplateRequest, opts ...grpc.CallOption) (*RenderTemplateResponse, error)
	// Create a pull request from a rendered template
	//
	// Render a template and create a pull request containing the output.
	//
	// **See the Examples for a complete solution.**
	//
	// This endpoint requires a few different parameters to be set.
	//
	//  1. The details of the git repository to create the pull request in.
	//  2. An JWT encoded git provider token to autheticate the create-pull-request request.
	//     This is provided via the `Git-Provider-Token` header. An existing git provider (github/gitlab)
	//     token should be wrapped in a JWT via the Weave Gitops GitAuth APIs.
	//  3. The template params and list of charts to include in the pull request.
	CreatePullRequest(ctx context.Context, in *CreatePullRequestRequest, opts ...grpc.CallOption) (*CreatePullRequestResponse, error)
	// Create a pull request to delete templated resources
	//
	// _INTERNAL: will undergo changes to how we calculate which files to delete in the future._
	CreateDeletionPullRequest(ctx context.Context, in *CreateDeletionPullRequestRequest, opts ...grpc.CallOption) (*CreateDeletionPullRequestResponse, error)
	// Preview adding automations to a cluster
	//
	// Preview what the automations would look like if added to a cluster.
	//
	// # Various resources can be created via this endpoint, see the `Model` section for full params
	//
	// - Kustomization
	// - HelmRelease
	// - ExternalSecret
	// - PolicyConfig
	// - SopsSecret
	RenderAutomation(ctx context.Context, in *RenderAutomationRequest, opts ...grpc.CallOption) (*RenderAutomationResponse, error)
	// Creates a pull request to add automations to a cluster
	//
	// # Add kustomizations, helm releases, external secrets, policy configs, and sops secrets
	//
	// **See the Examples for a complete solution.**
	//
	// As in the template pull-request endpoint, this endpoint requires a few different parameters to be set.
	//
	// 1. The details of the git repository to create the pull request in.
	// 2. An JWT encoded git provider token to autheticate the create-pull-request request.
	// 3. What kustomizations, helm releases, external secrets, policy configs, and sops secrets to add.
	CreateAutomationsPullRequest(ctx context.Context, in *CreateAutomationsPullRequestRequest, opts ...grpc.CallOption) (*CreateAutomationsPullRequestResponse, error)
	// List available CAPI identities
	//
	// Search the cluster for available CAPI identities.
	ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error)
	// Creates a pull request from a tfcontroller template.
	//
	// Use CreatePullRequest instead
	CreateTfControllerPullRequest(ctx context.Context, in *CreateTfControllerPullRequestRequest, opts ...grpc.CallOption) (*CreateTfControllerPullRequestResponse, error)
	// List GitOpsClusters
	//
	// List the `GitOpsClusters` in the management cluster.
	//
	// If the GitopsCluster references a CAPI Cluster via a `capiClusterRef` then retrieve and include
	// that resources too.
	ListGitopsClusters(ctx context.Context, in *ListGitopsClustersRequest, opts ...grpc.CallOption) (*ListGitopsClustersResponse, error)
	// Get the kubeconfig for a GitOpsCluster
	//
	// Provide the name and namespace of a `GitOpsCluster` to retrieve its kubeconfig
	GetKubeconfig(ctx context.Context, in *GetKubeconfigRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Get the Weave GitOps Enterprise version
	//
	// Returns the version of the Weave GitOps Enterprise server.
	GetEnterpriseVersion(ctx context.Context, in *GetEnterpriseVersionRequest, opts ...grpc.CallOption) (*GetEnterpriseVersionResponse, error)
	// Get the Weave GitOps Enterprise configuration
	//
	// Returns information about the current configuration of the Weave GitOps Enterprise.
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	// List the kubernetes events for a resource
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	// Lists charts in a HelmRepository
	//
	// Given a HelmRepository list the available charts and their versions.
	ListChartsForRepository(ctx context.Context, in *ListChartsForRepositoryRequest, opts ...grpc.CallOption) (*ListChartsForRepositoryResponse, error)
	// Get the values.yaml for a chart
	//
	// Given
	// - a helm repository reference of `{ cluster, name, namespace, kind }`
	// - a chart reference within the helm repository of `{ name, version }`
	//
	// Then retrieve the values.yaml for this version of the chart.
	//
	// Creates a job. Job status the final result can be retrieved via /v1/charts/jobs/{job_id}
	GetValuesForChart(ctx context.Context, in *GetValuesForChartRequest, opts ...grpc.CallOption) (*GetValuesForChartResponse, error)
	// Retrieve the results of a /v1/charts/values job
	//
	// After calling `/v1/charts/values` a job will be created and a `jobId` returned in the response.
	// The jobId is then used with this endpoint to retrieve the results of the job.
	//
	// If the job has not finished yet `values` will be empty.
	// When the job has finished the `values` will contain the contents of `values.yaml` for the chart.
	// If an error has occurred the `error` will contain the error message.
	GetChartsJob(ctx context.Context, in *GetChartsJobRequest, opts ...grpc.CallOption) (*GetChartsJobResponse, error)
	// List workspaces
	//
	// See the workspaces documentation for an overview of how they work.
	// In effect a workspace is a set of namespaces, roles, rolebindings, serviceaccounts, and policies.
	// All these resources are labeled with the workspace.
	//
	// Returns a list of workspaces and the namespaces they each manage.
	ListWorkspaces(ctx context.Context, in *ListWorkspacesRequest, opts ...grpc.CallOption) (*ListWorkspacesResponse, error)
	// Get workspace details
	//
	// Get a single workspace and its namespaces.
	GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error)
	// List workspace roles
	GetWorkspaceRoles(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceRolesResponse, error)
	// List workspace role bindings
	GetWorkspaceRoleBindings(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceRoleBindingsResponse, error)
	// List workspace service accounts
	GetWorkspaceServiceAccounts(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceServiceAccountsResponse, error)
	// List workspace service accounts
	GetWorkspacePolicies(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspacePoliciesResponse, error)
	// List external secrets
	ListExternalSecrets(ctx context.Context, in *ListExternalSecretsRequest, opts ...grpc.CallOption) (*ListExternalSecretsResponse, error)
	// Get secret details
	GetExternalSecret(ctx context.Context, in *GetExternalSecretRequest, opts ...grpc.CallOption) (*GetExternalSecretResponse, error)
	// List external secrets stores
	ListExternalSecretStores(ctx context.Context, in *ListExternalSecretStoresRequest, opts ...grpc.CallOption) (*ListExternalSecretStoresResponse, error)
	// Sync externalSecret Operator secrets
	SyncExternalSecrets(ctx context.Context, in *SyncExternalSecretsRequest, opts ...grpc.CallOption) (*SyncExternalSecretsResponse, error)
	// Encrypts a sops secret
	EncryptSopsSecret(ctx context.Context, in *EncryptSopsSecretRequest, opts ...grpc.CallOption) (*EncryptSopsSecretResponse, error)
	// List Sops kustomizations
	ListSopsKustomizations(ctx context.Context, in *ListSopsKustomizationsRequest, opts ...grpc.CallOption) (*ListSopsKustomizationsResponse, error)
	// List policy configs
	ListPolicyConfigs(ctx context.Context, in *ListPolicyConfigsRequest, opts ...grpc.CallOption) (*ListPolicyConfigsResponse, error)
	// Get policy config details
	GetPolicyConfig(ctx context.Context, in *GetPolicyConfigRequest, opts ...grpc.CallOption) (*GetPolicyConfigResponse, error)
}

type clustersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClustersServiceClient(cc grpc.ClientConnInterface) ClustersServiceClient {
	return &clustersServiceClient{cc}
}

func (c *clustersServiceClient) ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error) {
	out := new(ListTemplatesResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	out := new(GetTemplateResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) RenderTemplate(ctx context.Context, in *RenderTemplateRequest, opts ...grpc.CallOption) (*RenderTemplateResponse, error) {
	out := new(RenderTemplateResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/RenderTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) CreatePullRequest(ctx context.Context, in *CreatePullRequestRequest, opts ...grpc.CallOption) (*CreatePullRequestResponse, error) {
	out := new(CreatePullRequestResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/CreatePullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) CreateDeletionPullRequest(ctx context.Context, in *CreateDeletionPullRequestRequest, opts ...grpc.CallOption) (*CreateDeletionPullRequestResponse, error) {
	out := new(CreateDeletionPullRequestResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/CreateDeletionPullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) RenderAutomation(ctx context.Context, in *RenderAutomationRequest, opts ...grpc.CallOption) (*RenderAutomationResponse, error) {
	out := new(RenderAutomationResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/RenderAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) CreateAutomationsPullRequest(ctx context.Context, in *CreateAutomationsPullRequestRequest, opts ...grpc.CallOption) (*CreateAutomationsPullRequestResponse, error) {
	out := new(CreateAutomationsPullRequestResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/CreateAutomationsPullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error) {
	out := new(ListCredentialsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) CreateTfControllerPullRequest(ctx context.Context, in *CreateTfControllerPullRequestRequest, opts ...grpc.CallOption) (*CreateTfControllerPullRequestResponse, error) {
	out := new(CreateTfControllerPullRequestResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/CreateTfControllerPullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListGitopsClusters(ctx context.Context, in *ListGitopsClustersRequest, opts ...grpc.CallOption) (*ListGitopsClustersResponse, error) {
	out := new(ListGitopsClustersResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListGitopsClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetKubeconfig(ctx context.Context, in *GetKubeconfigRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetKubeconfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetEnterpriseVersion(ctx context.Context, in *GetEnterpriseVersionRequest, opts ...grpc.CallOption) (*GetEnterpriseVersionResponse, error) {
	out := new(GetEnterpriseVersionResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetEnterpriseVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListChartsForRepository(ctx context.Context, in *ListChartsForRepositoryRequest, opts ...grpc.CallOption) (*ListChartsForRepositoryResponse, error) {
	out := new(ListChartsForRepositoryResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListChartsForRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetValuesForChart(ctx context.Context, in *GetValuesForChartRequest, opts ...grpc.CallOption) (*GetValuesForChartResponse, error) {
	out := new(GetValuesForChartResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetValuesForChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetChartsJob(ctx context.Context, in *GetChartsJobRequest, opts ...grpc.CallOption) (*GetChartsJobResponse, error) {
	out := new(GetChartsJobResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetChartsJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListWorkspaces(ctx context.Context, in *ListWorkspacesRequest, opts ...grpc.CallOption) (*ListWorkspacesResponse, error) {
	out := new(ListWorkspacesResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListWorkspaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error) {
	out := new(GetWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetWorkspaceRoles(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceRolesResponse, error) {
	out := new(GetWorkspaceRolesResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetWorkspaceRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetWorkspaceRoleBindings(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceRoleBindingsResponse, error) {
	out := new(GetWorkspaceRoleBindingsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetWorkspaceRoleBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetWorkspaceServiceAccounts(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceServiceAccountsResponse, error) {
	out := new(GetWorkspaceServiceAccountsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetWorkspaceServiceAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetWorkspacePolicies(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspacePoliciesResponse, error) {
	out := new(GetWorkspacePoliciesResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetWorkspacePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListExternalSecrets(ctx context.Context, in *ListExternalSecretsRequest, opts ...grpc.CallOption) (*ListExternalSecretsResponse, error) {
	out := new(ListExternalSecretsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListExternalSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetExternalSecret(ctx context.Context, in *GetExternalSecretRequest, opts ...grpc.CallOption) (*GetExternalSecretResponse, error) {
	out := new(GetExternalSecretResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetExternalSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListExternalSecretStores(ctx context.Context, in *ListExternalSecretStoresRequest, opts ...grpc.CallOption) (*ListExternalSecretStoresResponse, error) {
	out := new(ListExternalSecretStoresResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListExternalSecretStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) SyncExternalSecrets(ctx context.Context, in *SyncExternalSecretsRequest, opts ...grpc.CallOption) (*SyncExternalSecretsResponse, error) {
	out := new(SyncExternalSecretsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/SyncExternalSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) EncryptSopsSecret(ctx context.Context, in *EncryptSopsSecretRequest, opts ...grpc.CallOption) (*EncryptSopsSecretResponse, error) {
	out := new(EncryptSopsSecretResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/EncryptSopsSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListSopsKustomizations(ctx context.Context, in *ListSopsKustomizationsRequest, opts ...grpc.CallOption) (*ListSopsKustomizationsResponse, error) {
	out := new(ListSopsKustomizationsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListSopsKustomizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListPolicyConfigs(ctx context.Context, in *ListPolicyConfigsRequest, opts ...grpc.CallOption) (*ListPolicyConfigsResponse, error) {
	out := new(ListPolicyConfigsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListPolicyConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetPolicyConfig(ctx context.Context, in *GetPolicyConfigRequest, opts ...grpc.CallOption) (*GetPolicyConfigResponse, error) {
	out := new(GetPolicyConfigResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetPolicyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClustersServiceServer is the server API for ClustersService service.
// All implementations must embed UnimplementedClustersServiceServer
// for forward compatibility
type ClustersServiceServer interface {
	// List templates
	//
	// List templates from the management cluster.
	ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)
	// Get template details
	//
	// Get a single template from the management cluster.
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error)
	// Renders a template using given values.
	//
	// Render out a template using the given values. See the /pull-request endpoint for more details.
	RenderTemplate(context.Context, *RenderTemplateRequest) (*RenderTemplateResponse, error)
	// Create a pull request from a rendered template
	//
	// Render a template and create a pull request containing the output.
	//
	// **See the Examples for a complete solution.**
	//
	// This endpoint requires a few different parameters to be set.
	//
	//  1. The details of the git repository to create the pull request in.
	//  2. An JWT encoded git provider token to autheticate the create-pull-request request.
	//     This is provided via the `Git-Provider-Token` header. An existing git provider (github/gitlab)
	//     token should be wrapped in a JWT via the Weave Gitops GitAuth APIs.
	//  3. The template params and list of charts to include in the pull request.
	CreatePullRequest(context.Context, *CreatePullRequestRequest) (*CreatePullRequestResponse, error)
	// Create a pull request to delete templated resources
	//
	// _INTERNAL: will undergo changes to how we calculate which files to delete in the future._
	CreateDeletionPullRequest(context.Context, *CreateDeletionPullRequestRequest) (*CreateDeletionPullRequestResponse, error)
	// Preview adding automations to a cluster
	//
	// Preview what the automations would look like if added to a cluster.
	//
	// # Various resources can be created via this endpoint, see the `Model` section for full params
	//
	// - Kustomization
	// - HelmRelease
	// - ExternalSecret
	// - PolicyConfig
	// - SopsSecret
	RenderAutomation(context.Context, *RenderAutomationRequest) (*RenderAutomationResponse, error)
	// Creates a pull request to add automations to a cluster
	//
	// # Add kustomizations, helm releases, external secrets, policy configs, and sops secrets
	//
	// **See the Examples for a complete solution.**
	//
	// As in the template pull-request endpoint, this endpoint requires a few different parameters to be set.
	//
	// 1. The details of the git repository to create the pull request in.
	// 2. An JWT encoded git provider token to autheticate the create-pull-request request.
	// 3. What kustomizations, helm releases, external secrets, policy configs, and sops secrets to add.
	CreateAutomationsPullRequest(context.Context, *CreateAutomationsPullRequestRequest) (*CreateAutomationsPullRequestResponse, error)
	// List available CAPI identities
	//
	// Search the cluster for available CAPI identities.
	ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error)
	// Creates a pull request from a tfcontroller template.
	//
	// Use CreatePullRequest instead
	CreateTfControllerPullRequest(context.Context, *CreateTfControllerPullRequestRequest) (*CreateTfControllerPullRequestResponse, error)
	// List GitOpsClusters
	//
	// List the `GitOpsClusters` in the management cluster.
	//
	// If the GitopsCluster references a CAPI Cluster via a `capiClusterRef` then retrieve and include
	// that resources too.
	ListGitopsClusters(context.Context, *ListGitopsClustersRequest) (*ListGitopsClustersResponse, error)
	// Get the kubeconfig for a GitOpsCluster
	//
	// Provide the name and namespace of a `GitOpsCluster` to retrieve its kubeconfig
	GetKubeconfig(context.Context, *GetKubeconfigRequest) (*httpbody.HttpBody, error)
	// Get the Weave GitOps Enterprise version
	//
	// Returns the version of the Weave GitOps Enterprise server.
	GetEnterpriseVersion(context.Context, *GetEnterpriseVersionRequest) (*GetEnterpriseVersionResponse, error)
	// Get the Weave GitOps Enterprise configuration
	//
	// Returns information about the current configuration of the Weave GitOps Enterprise.
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	// List the kubernetes events for a resource
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	// Lists charts in a HelmRepository
	//
	// Given a HelmRepository list the available charts and their versions.
	ListChartsForRepository(context.Context, *ListChartsForRepositoryRequest) (*ListChartsForRepositoryResponse, error)
	// Get the values.yaml for a chart
	//
	// Given
	// - a helm repository reference of `{ cluster, name, namespace, kind }`
	// - a chart reference within the helm repository of `{ name, version }`
	//
	// Then retrieve the values.yaml for this version of the chart.
	//
	// Creates a job. Job status the final result can be retrieved via /v1/charts/jobs/{job_id}
	GetValuesForChart(context.Context, *GetValuesForChartRequest) (*GetValuesForChartResponse, error)
	// Retrieve the results of a /v1/charts/values job
	//
	// After calling `/v1/charts/values` a job will be created and a `jobId` returned in the response.
	// The jobId is then used with this endpoint to retrieve the results of the job.
	//
	// If the job has not finished yet `values` will be empty.
	// When the job has finished the `values` will contain the contents of `values.yaml` for the chart.
	// If an error has occurred the `error` will contain the error message.
	GetChartsJob(context.Context, *GetChartsJobRequest) (*GetChartsJobResponse, error)
	// List workspaces
	//
	// See the workspaces documentation for an overview of how they work.
	// In effect a workspace is a set of namespaces, roles, rolebindings, serviceaccounts, and policies.
	// All these resources are labeled with the workspace.
	//
	// Returns a list of workspaces and the namespaces they each manage.
	ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesResponse, error)
	// Get workspace details
	//
	// Get a single workspace and its namespaces.
	GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error)
	// List workspace roles
	GetWorkspaceRoles(context.Context, *GetWorkspaceRequest) (*GetWorkspaceRolesResponse, error)
	// List workspace role bindings
	GetWorkspaceRoleBindings(context.Context, *GetWorkspaceRequest) (*GetWorkspaceRoleBindingsResponse, error)
	// List workspace service accounts
	GetWorkspaceServiceAccounts(context.Context, *GetWorkspaceRequest) (*GetWorkspaceServiceAccountsResponse, error)
	// List workspace service accounts
	GetWorkspacePolicies(context.Context, *GetWorkspaceRequest) (*GetWorkspacePoliciesResponse, error)
	// List external secrets
	ListExternalSecrets(context.Context, *ListExternalSecretsRequest) (*ListExternalSecretsResponse, error)
	// Get secret details
	GetExternalSecret(context.Context, *GetExternalSecretRequest) (*GetExternalSecretResponse, error)
	// List external secrets stores
	ListExternalSecretStores(context.Context, *ListExternalSecretStoresRequest) (*ListExternalSecretStoresResponse, error)
	// Sync externalSecret Operator secrets
	SyncExternalSecrets(context.Context, *SyncExternalSecretsRequest) (*SyncExternalSecretsResponse, error)
	// Encrypts a sops secret
	EncryptSopsSecret(context.Context, *EncryptSopsSecretRequest) (*EncryptSopsSecretResponse, error)
	// List Sops kustomizations
	ListSopsKustomizations(context.Context, *ListSopsKustomizationsRequest) (*ListSopsKustomizationsResponse, error)
	// List policy configs
	ListPolicyConfigs(context.Context, *ListPolicyConfigsRequest) (*ListPolicyConfigsResponse, error)
	// Get policy config details
	GetPolicyConfig(context.Context, *GetPolicyConfigRequest) (*GetPolicyConfigResponse, error)
	mustEmbedUnimplementedClustersServiceServer()
}

// UnimplementedClustersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClustersServiceServer struct {
}

func (UnimplementedClustersServiceServer) ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedClustersServiceServer) GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedClustersServiceServer) RenderTemplate(context.Context, *RenderTemplateRequest) (*RenderTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderTemplate not implemented")
}
func (UnimplementedClustersServiceServer) CreatePullRequest(context.Context, *CreatePullRequestRequest) (*CreatePullRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePullRequest not implemented")
}
func (UnimplementedClustersServiceServer) CreateDeletionPullRequest(context.Context, *CreateDeletionPullRequestRequest) (*CreateDeletionPullRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeletionPullRequest not implemented")
}
func (UnimplementedClustersServiceServer) RenderAutomation(context.Context, *RenderAutomationRequest) (*RenderAutomationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderAutomation not implemented")
}
func (UnimplementedClustersServiceServer) CreateAutomationsPullRequest(context.Context, *CreateAutomationsPullRequestRequest) (*CreateAutomationsPullRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutomationsPullRequest not implemented")
}
func (UnimplementedClustersServiceServer) ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentials not implemented")
}
func (UnimplementedClustersServiceServer) CreateTfControllerPullRequest(context.Context, *CreateTfControllerPullRequestRequest) (*CreateTfControllerPullRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTfControllerPullRequest not implemented")
}
func (UnimplementedClustersServiceServer) ListGitopsClusters(context.Context, *ListGitopsClustersRequest) (*ListGitopsClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitopsClusters not implemented")
}
func (UnimplementedClustersServiceServer) GetKubeconfig(context.Context, *GetKubeconfigRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeconfig not implemented")
}
func (UnimplementedClustersServiceServer) GetEnterpriseVersion(context.Context, *GetEnterpriseVersionRequest) (*GetEnterpriseVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseVersion not implemented")
}
func (UnimplementedClustersServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedClustersServiceServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedClustersServiceServer) ListChartsForRepository(context.Context, *ListChartsForRepositoryRequest) (*ListChartsForRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChartsForRepository not implemented")
}
func (UnimplementedClustersServiceServer) GetValuesForChart(context.Context, *GetValuesForChartRequest) (*GetValuesForChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValuesForChart not implemented")
}
func (UnimplementedClustersServiceServer) GetChartsJob(context.Context, *GetChartsJobRequest) (*GetChartsJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChartsJob not implemented")
}
func (UnimplementedClustersServiceServer) ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaces not implemented")
}
func (UnimplementedClustersServiceServer) GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (UnimplementedClustersServiceServer) GetWorkspaceRoles(context.Context, *GetWorkspaceRequest) (*GetWorkspaceRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceRoles not implemented")
}
func (UnimplementedClustersServiceServer) GetWorkspaceRoleBindings(context.Context, *GetWorkspaceRequest) (*GetWorkspaceRoleBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceRoleBindings not implemented")
}
func (UnimplementedClustersServiceServer) GetWorkspaceServiceAccounts(context.Context, *GetWorkspaceRequest) (*GetWorkspaceServiceAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceServiceAccounts not implemented")
}
func (UnimplementedClustersServiceServer) GetWorkspacePolicies(context.Context, *GetWorkspaceRequest) (*GetWorkspacePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspacePolicies not implemented")
}
func (UnimplementedClustersServiceServer) ListExternalSecrets(context.Context, *ListExternalSecretsRequest) (*ListExternalSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExternalSecrets not implemented")
}
func (UnimplementedClustersServiceServer) GetExternalSecret(context.Context, *GetExternalSecretRequest) (*GetExternalSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalSecret not implemented")
}
func (UnimplementedClustersServiceServer) ListExternalSecretStores(context.Context, *ListExternalSecretStoresRequest) (*ListExternalSecretStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExternalSecretStores not implemented")
}
func (UnimplementedClustersServiceServer) SyncExternalSecrets(context.Context, *SyncExternalSecretsRequest) (*SyncExternalSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncExternalSecrets not implemented")
}
func (UnimplementedClustersServiceServer) EncryptSopsSecret(context.Context, *EncryptSopsSecretRequest) (*EncryptSopsSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptSopsSecret not implemented")
}
func (UnimplementedClustersServiceServer) ListSopsKustomizations(context.Context, *ListSopsKustomizationsRequest) (*ListSopsKustomizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSopsKustomizations not implemented")
}
func (UnimplementedClustersServiceServer) ListPolicyConfigs(context.Context, *ListPolicyConfigsRequest) (*ListPolicyConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicyConfigs not implemented")
}
func (UnimplementedClustersServiceServer) GetPolicyConfig(context.Context, *GetPolicyConfigRequest) (*GetPolicyConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyConfig not implemented")
}
func (UnimplementedClustersServiceServer) mustEmbedUnimplementedClustersServiceServer() {}

// UnsafeClustersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClustersServiceServer will
// result in compilation errors.
type UnsafeClustersServiceServer interface {
	mustEmbedUnimplementedClustersServiceServer()
}

func RegisterClustersServiceServer(s grpc.ServiceRegistrar, srv ClustersServiceServer) {
	s.RegisterService(&ClustersService_ServiceDesc, srv)
}

func _ClustersService_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListTemplates(ctx, req.(*ListTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_RenderTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).RenderTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/RenderTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).RenderTemplate(ctx, req.(*RenderTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_CreatePullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).CreatePullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/CreatePullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).CreatePullRequest(ctx, req.(*CreatePullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_CreateDeletionPullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeletionPullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).CreateDeletionPullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/CreateDeletionPullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).CreateDeletionPullRequest(ctx, req.(*CreateDeletionPullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_RenderAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderAutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).RenderAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/RenderAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).RenderAutomation(ctx, req.(*RenderAutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_CreateAutomationsPullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutomationsPullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).CreateAutomationsPullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/CreateAutomationsPullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).CreateAutomationsPullRequest(ctx, req.(*CreateAutomationsPullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListCredentials(ctx, req.(*ListCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_CreateTfControllerPullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTfControllerPullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).CreateTfControllerPullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/CreateTfControllerPullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).CreateTfControllerPullRequest(ctx, req.(*CreateTfControllerPullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListGitopsClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitopsClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListGitopsClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListGitopsClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListGitopsClusters(ctx, req.(*ListGitopsClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetKubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeconfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetKubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetKubeconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetKubeconfig(ctx, req.(*GetKubeconfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetEnterpriseVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnterpriseVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetEnterpriseVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetEnterpriseVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetEnterpriseVersion(ctx, req.(*GetEnterpriseVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListChartsForRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChartsForRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListChartsForRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListChartsForRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListChartsForRepository(ctx, req.(*ListChartsForRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetValuesForChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValuesForChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetValuesForChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetValuesForChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetValuesForChart(ctx, req.(*GetValuesForChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetChartsJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChartsJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetChartsJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetChartsJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetChartsJob(ctx, req.(*GetChartsJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkspacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListWorkspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListWorkspaces(ctx, req.(*ListWorkspacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetWorkspace(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetWorkspaceRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetWorkspaceRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetWorkspaceRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetWorkspaceRoles(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetWorkspaceRoleBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetWorkspaceRoleBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetWorkspaceRoleBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetWorkspaceRoleBindings(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetWorkspaceServiceAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetWorkspaceServiceAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetWorkspaceServiceAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetWorkspaceServiceAccounts(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetWorkspacePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetWorkspacePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetWorkspacePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetWorkspacePolicies(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListExternalSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExternalSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListExternalSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListExternalSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListExternalSecrets(ctx, req.(*ListExternalSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetExternalSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetExternalSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetExternalSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetExternalSecret(ctx, req.(*GetExternalSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListExternalSecretStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExternalSecretStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListExternalSecretStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListExternalSecretStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListExternalSecretStores(ctx, req.(*ListExternalSecretStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_SyncExternalSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncExternalSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).SyncExternalSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/SyncExternalSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).SyncExternalSecrets(ctx, req.(*SyncExternalSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_EncryptSopsSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptSopsSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).EncryptSopsSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/EncryptSopsSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).EncryptSopsSecret(ctx, req.(*EncryptSopsSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListSopsKustomizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSopsKustomizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListSopsKustomizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListSopsKustomizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListSopsKustomizations(ctx, req.(*ListSopsKustomizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListPolicyConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPolicyConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListPolicyConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListPolicyConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListPolicyConfigs(ctx, req.(*ListPolicyConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetPolicyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetPolicyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetPolicyConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetPolicyConfig(ctx, req.(*GetPolicyConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClustersService_ServiceDesc is the grpc.ServiceDesc for ClustersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClustersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster_services.v1.ClustersService",
	HandlerType: (*ClustersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTemplates",
			Handler:    _ClustersService_ListTemplates_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _ClustersService_GetTemplate_Handler,
		},
		{
			MethodName: "RenderTemplate",
			Handler:    _ClustersService_RenderTemplate_Handler,
		},
		{
			MethodName: "CreatePullRequest",
			Handler:    _ClustersService_CreatePullRequest_Handler,
		},
		{
			MethodName: "CreateDeletionPullRequest",
			Handler:    _ClustersService_CreateDeletionPullRequest_Handler,
		},
		{
			MethodName: "RenderAutomation",
			Handler:    _ClustersService_RenderAutomation_Handler,
		},
		{
			MethodName: "CreateAutomationsPullRequest",
			Handler:    _ClustersService_CreateAutomationsPullRequest_Handler,
		},
		{
			MethodName: "ListCredentials",
			Handler:    _ClustersService_ListCredentials_Handler,
		},
		{
			MethodName: "CreateTfControllerPullRequest",
			Handler:    _ClustersService_CreateTfControllerPullRequest_Handler,
		},
		{
			MethodName: "ListGitopsClusters",
			Handler:    _ClustersService_ListGitopsClusters_Handler,
		},
		{
			MethodName: "GetKubeconfig",
			Handler:    _ClustersService_GetKubeconfig_Handler,
		},
		{
			MethodName: "GetEnterpriseVersion",
			Handler:    _ClustersService_GetEnterpriseVersion_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ClustersService_GetConfig_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _ClustersService_ListEvents_Handler,
		},
		{
			MethodName: "ListChartsForRepository",
			Handler:    _ClustersService_ListChartsForRepository_Handler,
		},
		{
			MethodName: "GetValuesForChart",
			Handler:    _ClustersService_GetValuesForChart_Handler,
		},
		{
			MethodName: "GetChartsJob",
			Handler:    _ClustersService_GetChartsJob_Handler,
		},
		{
			MethodName: "ListWorkspaces",
			Handler:    _ClustersService_ListWorkspaces_Handler,
		},
		{
			MethodName: "GetWorkspace",
			Handler:    _ClustersService_GetWorkspace_Handler,
		},
		{
			MethodName: "GetWorkspaceRoles",
			Handler:    _ClustersService_GetWorkspaceRoles_Handler,
		},
		{
			MethodName: "GetWorkspaceRoleBindings",
			Handler:    _ClustersService_GetWorkspaceRoleBindings_Handler,
		},
		{
			MethodName: "GetWorkspaceServiceAccounts",
			Handler:    _ClustersService_GetWorkspaceServiceAccounts_Handler,
		},
		{
			MethodName: "GetWorkspacePolicies",
			Handler:    _ClustersService_GetWorkspacePolicies_Handler,
		},
		{
			MethodName: "ListExternalSecrets",
			Handler:    _ClustersService_ListExternalSecrets_Handler,
		},
		{
			MethodName: "GetExternalSecret",
			Handler:    _ClustersService_GetExternalSecret_Handler,
		},
		{
			MethodName: "ListExternalSecretStores",
			Handler:    _ClustersService_ListExternalSecretStores_Handler,
		},
		{
			MethodName: "SyncExternalSecrets",
			Handler:    _ClustersService_SyncExternalSecrets_Handler,
		},
		{
			MethodName: "EncryptSopsSecret",
			Handler:    _ClustersService_EncryptSopsSecret_Handler,
		},
		{
			MethodName: "ListSopsKustomizations",
			Handler:    _ClustersService_ListSopsKustomizations_Handler,
		},
		{
			MethodName: "ListPolicyConfigs",
			Handler:    _ClustersService_ListPolicyConfigs_Handler,
		},
		{
			MethodName: "GetPolicyConfig",
			Handler:    _ClustersService_GetPolicyConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster_services.proto",
}

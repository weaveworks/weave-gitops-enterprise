// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cluster_services

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClustersServiceClient is the client API for ClustersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClustersServiceClient interface {
	ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error)
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
	// Get the Values.yaml for a template if one exists.
	ListTemplateParams(ctx context.Context, in *ListTemplateParamsRequest, opts ...grpc.CallOption) (*ListTemplateParamsResponse, error)
	// Returns a list of profiles within that template
	// `gitops get <template-name> --list-profiles`
	// The template annotations appear in the following form
	// capi.weave.works/profile-<n> where n is a number
	ListTemplateProfiles(ctx context.Context, in *ListTemplateProfilesRequest, opts ...grpc.CallOption) (*ListTemplateProfilesResponse, error)
	RenderTemplate(ctx context.Context, in *RenderTemplateRequest, opts ...grpc.CallOption) (*RenderTemplateResponse, error)
	RenderAutomation(ctx context.Context, in *RenderAutomationRequest, opts ...grpc.CallOption) (*RenderAutomationResponse, error)
	ListGitopsClusters(ctx context.Context, in *ListGitopsClustersRequest, opts ...grpc.CallOption) (*ListGitopsClustersResponse, error)
	// Creates a pull request for a cluster template.
	// The template name and values will be used to
	// create a new branch for which a new pull request
	// will be created.
	CreatePullRequest(ctx context.Context, in *CreatePullRequestRequest, opts ...grpc.CallOption) (*CreatePullRequestResponse, error)
	// Creates a pull request for a tfcontroller template.
	// The template name and values will be used to
	// create a new branch for which a new pull request
	// will be created.
	CreateTfControllerPullRequest(ctx context.Context, in *CreateTfControllerPullRequestRequest, opts ...grpc.CallOption) (*CreateTfControllerPullRequestResponse, error)
	DeleteClustersPullRequest(ctx context.Context, in *DeleteClustersPullRequestRequest, opts ...grpc.CallOption) (*DeleteClustersPullRequestResponse, error)
	ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error)
	// GetKubeconfig returns the Kubeconfig for the given
	// workload cluster.
	GetKubeconfig(ctx context.Context, in *GetKubeconfigRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// GetEnterpriseVersion returns the WeGO Enterprise version
	GetEnterpriseVersion(ctx context.Context, in *GetEnterpriseVersionRequest, opts ...grpc.CallOption) (*GetEnterpriseVersionResponse, error)
	// Creates a pull request for the given list of Kustomizations.
	CreateAutomationsPullRequest(ctx context.Context, in *CreateAutomationsPullRequestRequest, opts ...grpc.CallOption) (*CreateAutomationsPullRequestResponse, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	// ListPolicies list policies available on the management cluster
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
	// GetPolicy gets a policy on the management cluster by name
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	// ListPolicyValidations list policy validations available on the management cluster
	ListPolicyValidations(ctx context.Context, in *ListPolicyValidationsRequest, opts ...grpc.CallOption) (*ListPolicyValidationsResponse, error)
	// GetPolicyValidation gets a policy validations on the management cluster by id
	GetPolicyValidation(ctx context.Context, in *GetPolicyValidationRequest, opts ...grpc.CallOption) (*GetPolicyValidationResponse, error)
	// ListEvents returns the k8s events for a given object
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	// ListChartsForRepository lists the discovered Helm charts in the provided
	// repository.
	ListChartsForRepository(ctx context.Context, in *ListChartsForRepositoryRequest, opts ...grpc.CallOption) (*ListChartsForRepositoryResponse, error)
	// GetValuesForChart gets the default Values.yaml for the provided Chart
	// reference.
	GetValuesForChart(ctx context.Context, in *GetValuesForChartRequest, opts ...grpc.CallOption) (*GetValuesForChartResponse, error)
	// GetChartsJob gets the default Values.yaml for the provided Chart
	// reference.
	GetChartsJob(ctx context.Context, in *GetChartsJobRequest, opts ...grpc.CallOption) (*GetChartsJobResponse, error)
	// ListWorkspaces list workspaces available on all clusters
	ListWorkspaces(ctx context.Context, in *ListWorkspacesRequest, opts ...grpc.CallOption) (*ListWorkspacesResponse, error)
	// GetWorkspace get workspace details
	GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error)
	// GetWorkspaceRoles list workspace roles
	GetWorkspaceRoles(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceRolesResponse, error)
	// GetWorkspaceRoleBindings list workspace role bindings
	GetWorkspaceRoleBindings(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceRoleBindingsResponse, error)
	// GetWorkspaceServiceAccounts list workspace service accounts
	GetWorkspaceServiceAccounts(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceServiceAccountsResponse, error)
	// GetWorkspacePolicies list workspace service accounts
	GetWorkspacePolicies(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspacePoliciesResponse, error)
	// ListExternalSecrets list external secrets available on all clusters
	ListExternalSecrets(ctx context.Context, in *ListExternalSecretsRequest, opts ...grpc.CallOption) (*ListExternalSecretsResponse, error)
	// GetExternalSecret get secret details
	GetExternalSecret(ctx context.Context, in *GetExternalSecretRequest, opts ...grpc.CallOption) (*GetExternalSecretResponse, error)
	// ListExternalSecretStores list external secrets stores
	ListExternalSecretStores(ctx context.Context, in *ListExternalSecretStoresRequest, opts ...grpc.CallOption) (*ListExternalSecretStoresResponse, error)
}

type clustersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClustersServiceClient(cc grpc.ClientConnInterface) ClustersServiceClient {
	return &clustersServiceClient{cc}
}

func (c *clustersServiceClient) ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error) {
	out := new(ListTemplatesResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	out := new(GetTemplateResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListTemplateParams(ctx context.Context, in *ListTemplateParamsRequest, opts ...grpc.CallOption) (*ListTemplateParamsResponse, error) {
	out := new(ListTemplateParamsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListTemplateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListTemplateProfiles(ctx context.Context, in *ListTemplateProfilesRequest, opts ...grpc.CallOption) (*ListTemplateProfilesResponse, error) {
	out := new(ListTemplateProfilesResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListTemplateProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) RenderTemplate(ctx context.Context, in *RenderTemplateRequest, opts ...grpc.CallOption) (*RenderTemplateResponse, error) {
	out := new(RenderTemplateResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/RenderTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) RenderAutomation(ctx context.Context, in *RenderAutomationRequest, opts ...grpc.CallOption) (*RenderAutomationResponse, error) {
	out := new(RenderAutomationResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/RenderAutomation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListGitopsClusters(ctx context.Context, in *ListGitopsClustersRequest, opts ...grpc.CallOption) (*ListGitopsClustersResponse, error) {
	out := new(ListGitopsClustersResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListGitopsClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) CreatePullRequest(ctx context.Context, in *CreatePullRequestRequest, opts ...grpc.CallOption) (*CreatePullRequestResponse, error) {
	out := new(CreatePullRequestResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/CreatePullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) CreateTfControllerPullRequest(ctx context.Context, in *CreateTfControllerPullRequestRequest, opts ...grpc.CallOption) (*CreateTfControllerPullRequestResponse, error) {
	out := new(CreateTfControllerPullRequestResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/CreateTfControllerPullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) DeleteClustersPullRequest(ctx context.Context, in *DeleteClustersPullRequestRequest, opts ...grpc.CallOption) (*DeleteClustersPullRequestResponse, error) {
	out := new(DeleteClustersPullRequestResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/DeleteClustersPullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListCredentials(ctx context.Context, in *ListCredentialsRequest, opts ...grpc.CallOption) (*ListCredentialsResponse, error) {
	out := new(ListCredentialsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetKubeconfig(ctx context.Context, in *GetKubeconfigRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetKubeconfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetEnterpriseVersion(ctx context.Context, in *GetEnterpriseVersionRequest, opts ...grpc.CallOption) (*GetEnterpriseVersionResponse, error) {
	out := new(GetEnterpriseVersionResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetEnterpriseVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) CreateAutomationsPullRequest(ctx context.Context, in *CreateAutomationsPullRequestRequest, opts ...grpc.CallOption) (*CreateAutomationsPullRequestResponse, error) {
	out := new(CreateAutomationsPullRequestResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/CreateAutomationsPullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	out := new(ListPoliciesResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListPolicyValidations(ctx context.Context, in *ListPolicyValidationsRequest, opts ...grpc.CallOption) (*ListPolicyValidationsResponse, error) {
	out := new(ListPolicyValidationsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListPolicyValidations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetPolicyValidation(ctx context.Context, in *GetPolicyValidationRequest, opts ...grpc.CallOption) (*GetPolicyValidationResponse, error) {
	out := new(GetPolicyValidationResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetPolicyValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListChartsForRepository(ctx context.Context, in *ListChartsForRepositoryRequest, opts ...grpc.CallOption) (*ListChartsForRepositoryResponse, error) {
	out := new(ListChartsForRepositoryResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListChartsForRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetValuesForChart(ctx context.Context, in *GetValuesForChartRequest, opts ...grpc.CallOption) (*GetValuesForChartResponse, error) {
	out := new(GetValuesForChartResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetValuesForChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetChartsJob(ctx context.Context, in *GetChartsJobRequest, opts ...grpc.CallOption) (*GetChartsJobResponse, error) {
	out := new(GetChartsJobResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetChartsJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListWorkspaces(ctx context.Context, in *ListWorkspacesRequest, opts ...grpc.CallOption) (*ListWorkspacesResponse, error) {
	out := new(ListWorkspacesResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListWorkspaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error) {
	out := new(GetWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetWorkspaceRoles(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceRolesResponse, error) {
	out := new(GetWorkspaceRolesResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetWorkspaceRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetWorkspaceRoleBindings(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceRoleBindingsResponse, error) {
	out := new(GetWorkspaceRoleBindingsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetWorkspaceRoleBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetWorkspaceServiceAccounts(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceServiceAccountsResponse, error) {
	out := new(GetWorkspaceServiceAccountsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetWorkspaceServiceAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetWorkspacePolicies(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspacePoliciesResponse, error) {
	out := new(GetWorkspacePoliciesResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetWorkspacePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListExternalSecrets(ctx context.Context, in *ListExternalSecretsRequest, opts ...grpc.CallOption) (*ListExternalSecretsResponse, error) {
	out := new(ListExternalSecretsResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListExternalSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) GetExternalSecret(ctx context.Context, in *GetExternalSecretRequest, opts ...grpc.CallOption) (*GetExternalSecretResponse, error) {
	out := new(GetExternalSecretResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/GetExternalSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersServiceClient) ListExternalSecretStores(ctx context.Context, in *ListExternalSecretStoresRequest, opts ...grpc.CallOption) (*ListExternalSecretStoresResponse, error) {
	out := new(ListExternalSecretStoresResponse)
	err := c.cc.Invoke(ctx, "/cluster_services.v1.ClustersService/ListExternalSecretStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClustersServiceServer is the server API for ClustersService service.
// All implementations must embed UnimplementedClustersServiceServer
// for forward compatibility
type ClustersServiceServer interface {
	ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error)
	// Get the Values.yaml for a template if one exists.
	ListTemplateParams(context.Context, *ListTemplateParamsRequest) (*ListTemplateParamsResponse, error)
	// Returns a list of profiles within that template
	// `gitops get <template-name> --list-profiles`
	// The template annotations appear in the following form
	// capi.weave.works/profile-<n> where n is a number
	ListTemplateProfiles(context.Context, *ListTemplateProfilesRequest) (*ListTemplateProfilesResponse, error)
	RenderTemplate(context.Context, *RenderTemplateRequest) (*RenderTemplateResponse, error)
	RenderAutomation(context.Context, *RenderAutomationRequest) (*RenderAutomationResponse, error)
	ListGitopsClusters(context.Context, *ListGitopsClustersRequest) (*ListGitopsClustersResponse, error)
	// Creates a pull request for a cluster template.
	// The template name and values will be used to
	// create a new branch for which a new pull request
	// will be created.
	CreatePullRequest(context.Context, *CreatePullRequestRequest) (*CreatePullRequestResponse, error)
	// Creates a pull request for a tfcontroller template.
	// The template name and values will be used to
	// create a new branch for which a new pull request
	// will be created.
	CreateTfControllerPullRequest(context.Context, *CreateTfControllerPullRequestRequest) (*CreateTfControllerPullRequestResponse, error)
	DeleteClustersPullRequest(context.Context, *DeleteClustersPullRequestRequest) (*DeleteClustersPullRequestResponse, error)
	ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error)
	// GetKubeconfig returns the Kubeconfig for the given
	// workload cluster.
	GetKubeconfig(context.Context, *GetKubeconfigRequest) (*httpbody.HttpBody, error)
	// GetEnterpriseVersion returns the WeGO Enterprise version
	GetEnterpriseVersion(context.Context, *GetEnterpriseVersionRequest) (*GetEnterpriseVersionResponse, error)
	// Creates a pull request for the given list of Kustomizations.
	CreateAutomationsPullRequest(context.Context, *CreateAutomationsPullRequestRequest) (*CreateAutomationsPullRequestResponse, error)
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	// ListPolicies list policies available on the management cluster
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	// GetPolicy gets a policy on the management cluster by name
	GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error)
	// ListPolicyValidations list policy validations available on the management cluster
	ListPolicyValidations(context.Context, *ListPolicyValidationsRequest) (*ListPolicyValidationsResponse, error)
	// GetPolicyValidation gets a policy validations on the management cluster by id
	GetPolicyValidation(context.Context, *GetPolicyValidationRequest) (*GetPolicyValidationResponse, error)
	// ListEvents returns the k8s events for a given object
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	// ListChartsForRepository lists the discovered Helm charts in the provided
	// repository.
	ListChartsForRepository(context.Context, *ListChartsForRepositoryRequest) (*ListChartsForRepositoryResponse, error)
	// GetValuesForChart gets the default Values.yaml for the provided Chart
	// reference.
	GetValuesForChart(context.Context, *GetValuesForChartRequest) (*GetValuesForChartResponse, error)
	// GetChartsJob gets the default Values.yaml for the provided Chart
	// reference.
	GetChartsJob(context.Context, *GetChartsJobRequest) (*GetChartsJobResponse, error)
	// ListWorkspaces list workspaces available on all clusters
	ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesResponse, error)
	// GetWorkspace get workspace details
	GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error)
	// GetWorkspaceRoles list workspace roles
	GetWorkspaceRoles(context.Context, *GetWorkspaceRequest) (*GetWorkspaceRolesResponse, error)
	// GetWorkspaceRoleBindings list workspace role bindings
	GetWorkspaceRoleBindings(context.Context, *GetWorkspaceRequest) (*GetWorkspaceRoleBindingsResponse, error)
	// GetWorkspaceServiceAccounts list workspace service accounts
	GetWorkspaceServiceAccounts(context.Context, *GetWorkspaceRequest) (*GetWorkspaceServiceAccountsResponse, error)
	// GetWorkspacePolicies list workspace service accounts
	GetWorkspacePolicies(context.Context, *GetWorkspaceRequest) (*GetWorkspacePoliciesResponse, error)
	// ListExternalSecrets list external secrets available on all clusters
	ListExternalSecrets(context.Context, *ListExternalSecretsRequest) (*ListExternalSecretsResponse, error)
	// GetExternalSecret get secret details
	GetExternalSecret(context.Context, *GetExternalSecretRequest) (*GetExternalSecretResponse, error)
	// ListExternalSecretStores list external secrets stores
	ListExternalSecretStores(context.Context, *ListExternalSecretStoresRequest) (*ListExternalSecretStoresResponse, error)
	mustEmbedUnimplementedClustersServiceServer()
}

// UnimplementedClustersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClustersServiceServer struct {
}

func (UnimplementedClustersServiceServer) ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedClustersServiceServer) GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedClustersServiceServer) ListTemplateParams(context.Context, *ListTemplateParamsRequest) (*ListTemplateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateParams not implemented")
}
func (UnimplementedClustersServiceServer) ListTemplateProfiles(context.Context, *ListTemplateProfilesRequest) (*ListTemplateProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateProfiles not implemented")
}
func (UnimplementedClustersServiceServer) RenderTemplate(context.Context, *RenderTemplateRequest) (*RenderTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderTemplate not implemented")
}
func (UnimplementedClustersServiceServer) RenderAutomation(context.Context, *RenderAutomationRequest) (*RenderAutomationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderAutomation not implemented")
}
func (UnimplementedClustersServiceServer) ListGitopsClusters(context.Context, *ListGitopsClustersRequest) (*ListGitopsClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitopsClusters not implemented")
}
func (UnimplementedClustersServiceServer) CreatePullRequest(context.Context, *CreatePullRequestRequest) (*CreatePullRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePullRequest not implemented")
}
func (UnimplementedClustersServiceServer) CreateTfControllerPullRequest(context.Context, *CreateTfControllerPullRequestRequest) (*CreateTfControllerPullRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTfControllerPullRequest not implemented")
}
func (UnimplementedClustersServiceServer) DeleteClustersPullRequest(context.Context, *DeleteClustersPullRequestRequest) (*DeleteClustersPullRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClustersPullRequest not implemented")
}
func (UnimplementedClustersServiceServer) ListCredentials(context.Context, *ListCredentialsRequest) (*ListCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentials not implemented")
}
func (UnimplementedClustersServiceServer) GetKubeconfig(context.Context, *GetKubeconfigRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeconfig not implemented")
}
func (UnimplementedClustersServiceServer) GetEnterpriseVersion(context.Context, *GetEnterpriseVersionRequest) (*GetEnterpriseVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseVersion not implemented")
}
func (UnimplementedClustersServiceServer) CreateAutomationsPullRequest(context.Context, *CreateAutomationsPullRequestRequest) (*CreateAutomationsPullRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutomationsPullRequest not implemented")
}
func (UnimplementedClustersServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedClustersServiceServer) ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedClustersServiceServer) GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedClustersServiceServer) ListPolicyValidations(context.Context, *ListPolicyValidationsRequest) (*ListPolicyValidationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicyValidations not implemented")
}
func (UnimplementedClustersServiceServer) GetPolicyValidation(context.Context, *GetPolicyValidationRequest) (*GetPolicyValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyValidation not implemented")
}
func (UnimplementedClustersServiceServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedClustersServiceServer) ListChartsForRepository(context.Context, *ListChartsForRepositoryRequest) (*ListChartsForRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChartsForRepository not implemented")
}
func (UnimplementedClustersServiceServer) GetValuesForChart(context.Context, *GetValuesForChartRequest) (*GetValuesForChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValuesForChart not implemented")
}
func (UnimplementedClustersServiceServer) GetChartsJob(context.Context, *GetChartsJobRequest) (*GetChartsJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChartsJob not implemented")
}
func (UnimplementedClustersServiceServer) ListWorkspaces(context.Context, *ListWorkspacesRequest) (*ListWorkspacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaces not implemented")
}
func (UnimplementedClustersServiceServer) GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (UnimplementedClustersServiceServer) GetWorkspaceRoles(context.Context, *GetWorkspaceRequest) (*GetWorkspaceRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceRoles not implemented")
}
func (UnimplementedClustersServiceServer) GetWorkspaceRoleBindings(context.Context, *GetWorkspaceRequest) (*GetWorkspaceRoleBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceRoleBindings not implemented")
}
func (UnimplementedClustersServiceServer) GetWorkspaceServiceAccounts(context.Context, *GetWorkspaceRequest) (*GetWorkspaceServiceAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceServiceAccounts not implemented")
}
func (UnimplementedClustersServiceServer) GetWorkspacePolicies(context.Context, *GetWorkspaceRequest) (*GetWorkspacePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspacePolicies not implemented")
}
func (UnimplementedClustersServiceServer) ListExternalSecrets(context.Context, *ListExternalSecretsRequest) (*ListExternalSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExternalSecrets not implemented")
}
func (UnimplementedClustersServiceServer) GetExternalSecret(context.Context, *GetExternalSecretRequest) (*GetExternalSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalSecret not implemented")
}
func (UnimplementedClustersServiceServer) ListExternalSecretStores(context.Context, *ListExternalSecretStoresRequest) (*ListExternalSecretStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExternalSecretStores not implemented")
}
func (UnimplementedClustersServiceServer) mustEmbedUnimplementedClustersServiceServer() {}

// UnsafeClustersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClustersServiceServer will
// result in compilation errors.
type UnsafeClustersServiceServer interface {
	mustEmbedUnimplementedClustersServiceServer()
}

func RegisterClustersServiceServer(s grpc.ServiceRegistrar, srv ClustersServiceServer) {
	s.RegisterService(&ClustersService_ServiceDesc, srv)
}

func _ClustersService_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListTemplates(ctx, req.(*ListTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListTemplateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListTemplateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListTemplateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListTemplateParams(ctx, req.(*ListTemplateParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListTemplateProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListTemplateProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListTemplateProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListTemplateProfiles(ctx, req.(*ListTemplateProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_RenderTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).RenderTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/RenderTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).RenderTemplate(ctx, req.(*RenderTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_RenderAutomation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderAutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).RenderAutomation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/RenderAutomation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).RenderAutomation(ctx, req.(*RenderAutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListGitopsClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitopsClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListGitopsClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListGitopsClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListGitopsClusters(ctx, req.(*ListGitopsClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_CreatePullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).CreatePullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/CreatePullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).CreatePullRequest(ctx, req.(*CreatePullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_CreateTfControllerPullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTfControllerPullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).CreateTfControllerPullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/CreateTfControllerPullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).CreateTfControllerPullRequest(ctx, req.(*CreateTfControllerPullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_DeleteClustersPullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClustersPullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).DeleteClustersPullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/DeleteClustersPullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).DeleteClustersPullRequest(ctx, req.(*DeleteClustersPullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListCredentials(ctx, req.(*ListCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetKubeconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeconfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetKubeconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetKubeconfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetKubeconfig(ctx, req.(*GetKubeconfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetEnterpriseVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnterpriseVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetEnterpriseVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetEnterpriseVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetEnterpriseVersion(ctx, req.(*GetEnterpriseVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_CreateAutomationsPullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutomationsPullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).CreateAutomationsPullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/CreateAutomationsPullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).CreateAutomationsPullRequest(ctx, req.(*CreateAutomationsPullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListPolicyValidations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPolicyValidationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListPolicyValidations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListPolicyValidations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListPolicyValidations(ctx, req.(*ListPolicyValidationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetPolicyValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetPolicyValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetPolicyValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetPolicyValidation(ctx, req.(*GetPolicyValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListChartsForRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChartsForRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListChartsForRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListChartsForRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListChartsForRepository(ctx, req.(*ListChartsForRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetValuesForChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValuesForChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetValuesForChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetValuesForChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetValuesForChart(ctx, req.(*GetValuesForChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetChartsJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChartsJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetChartsJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetChartsJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetChartsJob(ctx, req.(*GetChartsJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkspacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListWorkspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListWorkspaces(ctx, req.(*ListWorkspacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetWorkspace(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetWorkspaceRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetWorkspaceRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetWorkspaceRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetWorkspaceRoles(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetWorkspaceRoleBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetWorkspaceRoleBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetWorkspaceRoleBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetWorkspaceRoleBindings(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetWorkspaceServiceAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetWorkspaceServiceAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetWorkspaceServiceAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetWorkspaceServiceAccounts(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetWorkspacePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetWorkspacePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetWorkspacePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetWorkspacePolicies(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListExternalSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExternalSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListExternalSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListExternalSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListExternalSecrets(ctx, req.(*ListExternalSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_GetExternalSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).GetExternalSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/GetExternalSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).GetExternalSecret(ctx, req.(*GetExternalSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClustersService_ListExternalSecretStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExternalSecretStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServiceServer).ListExternalSecretStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_services.v1.ClustersService/ListExternalSecretStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServiceServer).ListExternalSecretStores(ctx, req.(*ListExternalSecretStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClustersService_ServiceDesc is the grpc.ServiceDesc for ClustersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClustersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster_services.v1.ClustersService",
	HandlerType: (*ClustersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTemplates",
			Handler:    _ClustersService_ListTemplates_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _ClustersService_GetTemplate_Handler,
		},
		{
			MethodName: "ListTemplateParams",
			Handler:    _ClustersService_ListTemplateParams_Handler,
		},
		{
			MethodName: "ListTemplateProfiles",
			Handler:    _ClustersService_ListTemplateProfiles_Handler,
		},
		{
			MethodName: "RenderTemplate",
			Handler:    _ClustersService_RenderTemplate_Handler,
		},
		{
			MethodName: "RenderAutomation",
			Handler:    _ClustersService_RenderAutomation_Handler,
		},
		{
			MethodName: "ListGitopsClusters",
			Handler:    _ClustersService_ListGitopsClusters_Handler,
		},
		{
			MethodName: "CreatePullRequest",
			Handler:    _ClustersService_CreatePullRequest_Handler,
		},
		{
			MethodName: "CreateTfControllerPullRequest",
			Handler:    _ClustersService_CreateTfControllerPullRequest_Handler,
		},
		{
			MethodName: "DeleteClustersPullRequest",
			Handler:    _ClustersService_DeleteClustersPullRequest_Handler,
		},
		{
			MethodName: "ListCredentials",
			Handler:    _ClustersService_ListCredentials_Handler,
		},
		{
			MethodName: "GetKubeconfig",
			Handler:    _ClustersService_GetKubeconfig_Handler,
		},
		{
			MethodName: "GetEnterpriseVersion",
			Handler:    _ClustersService_GetEnterpriseVersion_Handler,
		},
		{
			MethodName: "CreateAutomationsPullRequest",
			Handler:    _ClustersService_CreateAutomationsPullRequest_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ClustersService_GetConfig_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _ClustersService_ListPolicies_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _ClustersService_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicyValidations",
			Handler:    _ClustersService_ListPolicyValidations_Handler,
		},
		{
			MethodName: "GetPolicyValidation",
			Handler:    _ClustersService_GetPolicyValidation_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _ClustersService_ListEvents_Handler,
		},
		{
			MethodName: "ListChartsForRepository",
			Handler:    _ClustersService_ListChartsForRepository_Handler,
		},
		{
			MethodName: "GetValuesForChart",
			Handler:    _ClustersService_GetValuesForChart_Handler,
		},
		{
			MethodName: "GetChartsJob",
			Handler:    _ClustersService_GetChartsJob_Handler,
		},
		{
			MethodName: "ListWorkspaces",
			Handler:    _ClustersService_ListWorkspaces_Handler,
		},
		{
			MethodName: "GetWorkspace",
			Handler:    _ClustersService_GetWorkspace_Handler,
		},
		{
			MethodName: "GetWorkspaceRoles",
			Handler:    _ClustersService_GetWorkspaceRoles_Handler,
		},
		{
			MethodName: "GetWorkspaceRoleBindings",
			Handler:    _ClustersService_GetWorkspaceRoleBindings_Handler,
		},
		{
			MethodName: "GetWorkspaceServiceAccounts",
			Handler:    _ClustersService_GetWorkspaceServiceAccounts_Handler,
		},
		{
			MethodName: "GetWorkspacePolicies",
			Handler:    _ClustersService_GetWorkspacePolicies_Handler,
		},
		{
			MethodName: "ListExternalSecrets",
			Handler:    _ClustersService_ListExternalSecrets_Handler,
		},
		{
			MethodName: "GetExternalSecret",
			Handler:    _ClustersService_GetExternalSecret_Handler,
		},
		{
			MethodName: "ListExternalSecretStores",
			Handler:    _ClustersService_ListExternalSecretStores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster_services.proto",
}

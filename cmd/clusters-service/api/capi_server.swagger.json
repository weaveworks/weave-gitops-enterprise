{
  "swagger": "2.0",
  "info": {
    "title": "capi_server.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ClustersService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/clusters": {
      "delete": {
        "operationId": "ClustersService_DeleteClustersPullRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteClustersPullRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteClustersPullRequestRequest"
            }
          }
        ],
        "tags": [
          "ClustersService"
        ]
      },
      "post": {
        "summary": "Creates a pull request for a cluster template.\nThe template name and values will be used to\ncreate a new branch for which a new pull request\nwill be created.",
        "operationId": "ClustersService_CreatePullRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreatePullRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePullRequestRequest"
            }
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/clusters/{clusterName}/kubeconfig": {
      "get": {
        "summary": "GetKubeconfig returns the Kubeconfig for the given\nworkload cluster.",
        "operationId": "ClustersService_GetKubeconfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterName",
            "description": "The name of the workload cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/config": {
      "get": {
        "operationId": "ClustersService_GetConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/credentials": {
      "get": {
        "operationId": "ClustersService_ListCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCredentialsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/enterprise/version": {
      "get": {
        "summary": "GetEnterpriseVersion returns the WeGO Enterprise version",
        "operationId": "ClustersService_GetEnterpriseVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEnterpriseVersionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/templates": {
      "get": {
        "operationId": "ClustersService_ListTemplates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTemplatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/templates/{templateName}": {
      "get": {
        "operationId": "ClustersService_GetTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/templates/{templateName}/params": {
      "get": {
        "operationId": "ClustersService_ListTemplateParams",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTemplateParamsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/templates/{templateName}/profiles": {
      "get": {
        "summary": "Returns a list of profiles within that template\n`gitops get \u003ctemplate-name\u003e --list-profiles`\nThe template annotations appear in the following form\ncapi.weave.works/profile-\u003cn\u003e where n is a number",
        "operationId": "ClustersService_ListTemplateProfiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTemplateProfilesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/templates/{templateName}/render": {
      "post": {
        "operationId": "ClustersService_RenderTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RenderTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "values": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "credentials": {
                  "$ref": "#/definitions/v1Credential"
                }
              }
            }
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    }
  },
  "definitions": {
    "apiHttpBody": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "description": "The HTTP Content-Type header value specifying the content type of the body."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The HTTP request/response body as raw binary."
        },
        "extensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Application specific response metadata. Must be set in the first response\nfor streaming APIs."
        }
      },
      "description": "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody) returns\n      (google.protobuf.Empty);\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1CreatePullRequestRequest": {
      "type": "object",
      "properties": {
        "repositoryUrl": {
          "type": "string",
          "description": "The repository to use."
        },
        "headBranch": {
          "type": "string",
          "description": "The new branch that will be created."
        },
        "baseBranch": {
          "type": "string",
          "description": "The target branch."
        },
        "title": {
          "type": "string",
          "description": "The title of the pull request."
        },
        "description": {
          "type": "string",
          "title": "The description of the pull request"
        },
        "templateName": {
          "type": "string",
          "description": "The name of the template to create a pull request for."
        },
        "parameterValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The values that populate the template's parameters."
        },
        "commitMessage": {
          "type": "string",
          "title": "The commit message"
        },
        "credentials": {
          "$ref": "#/definitions/v1Credential",
          "title": "Credentials"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ProfileValues"
          },
          "description": "The values for each profile that will be installed."
        }
      }
    },
    "v1CreatePullRequestResponse": {
      "type": "object",
      "properties": {
        "webUrl": {
          "type": "string",
          "description": "The url of the new pull request."
        }
      }
    },
    "v1Credential": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "v1DeleteClustersPullRequestRequest": {
      "type": "object",
      "properties": {
        "repositoryUrl": {
          "type": "string",
          "description": "The repository to use."
        },
        "headBranch": {
          "type": "string",
          "description": "The new branch that will be created."
        },
        "baseBranch": {
          "type": "string",
          "description": "The target branch."
        },
        "title": {
          "type": "string",
          "description": "The title of the pull request."
        },
        "description": {
          "type": "string",
          "title": "The description of the pull request"
        },
        "clusterNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The name of the clusters to be delete via a PR."
        },
        "commitMessage": {
          "type": "string",
          "title": "The commit message"
        },
        "credentials": {
          "$ref": "#/definitions/v1Credential",
          "title": "Credentials"
        }
      }
    },
    "v1DeleteClustersPullRequestResponse": {
      "type": "object",
      "properties": {
        "webUrl": {
          "type": "string",
          "description": "The url of the new pull request."
        }
      }
    },
    "v1GetConfigResponse": {
      "type": "object",
      "properties": {
        "repositoryURL": {
          "type": "string"
        }
      }
    },
    "v1GetEnterpriseVersionResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "title": "The version of WeGO Enterprise"
        }
      }
    },
    "v1GetTemplateResponse": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/v1Template"
        }
      }
    },
    "v1ListCredentialsResponse": {
      "type": "object",
      "properties": {
        "credentials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Credential"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ListTemplateParamsResponse": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Parameter"
          }
        },
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TemplateObject"
          }
        }
      }
    },
    "v1ListTemplateProfilesResponse": {
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TemplateProfile"
          }
        },
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TemplateObject"
          }
        }
      }
    },
    "v1ListTemplatesResponse": {
      "type": "object",
      "properties": {
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Template"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1Parameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProfileValues": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "values": {
          "type": "string"
        },
        "layer": {
          "type": "string"
        }
      }
    },
    "v1RenderTemplateResponse": {
      "type": "object",
      "properties": {
        "renderedTemplate": {
          "type": "string"
        }
      }
    },
    "v1Template": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Parameter"
          }
        },
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TemplateObject"
          }
        },
        "error": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1TemplateObject": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "v1TemplateProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    }
  }
}

{
  "swagger": "2.0",
  "info": {
    "title": "cluster_services.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ClustersService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/charts/jobs/{jobId}": {
      "get": {
        "summary": "GetChartsJob gets the default Values.yaml for the provided Chart\nreference.",
        "operationId": "ClustersService_GetChartsJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetChartsJobResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/charts/list": {
      "get": {
        "summary": "ListChartsForRepository lists the discovered Helm charts in the provided\nrepository.",
        "operationId": "ClustersService_ListChartsForRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListChartsForRepositoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repository.cluster.namespace",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repository.cluster.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repository.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repository.namespace",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repository.kind",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "kind",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/charts/values": {
      "post": {
        "summary": "GetValuesForChart gets the default Values.yaml for the provided Chart\nreference.",
        "operationId": "ClustersService_GetValuesForChart",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetValuesForChartResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetValuesForChartRequest"
            }
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/clusters": {
      "get": {
        "operationId": "ClustersService_ListGitopsClusters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListGitopsClustersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "label",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "refType",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      },
      "delete": {
        "operationId": "ClustersService_DeleteClustersPullRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteClustersPullRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteClustersPullRequestRequest"
            }
          }
        ],
        "tags": [
          "ClustersService"
        ]
      },
      "post": {
        "summary": "Creates a pull request for a cluster template.\nThe template name and values will be used to\ncreate a new branch for which a new pull request\nwill be created.",
        "operationId": "ClustersService_CreatePullRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreatePullRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePullRequestRequest"
            }
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/clusters/{clusterName}/kubeconfig": {
      "get": {
        "summary": "GetKubeconfig returns the Kubeconfig for the given\nworkload cluster.",
        "operationId": "ClustersService_GetKubeconfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterName",
            "description": "The name of the workload cluster.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterNamespace",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/config": {
      "get": {
        "operationId": "ClustersService_GetConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/credentials": {
      "get": {
        "operationId": "ClustersService_ListCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCredentialsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/encrypt-sops-secret": {
      "post": {
        "summary": "EncryptSopsSecret encrypts a sops secret",
        "operationId": "ClustersService_EncryptSopsSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EncryptSopsSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EncryptSopsSecretRequest"
            }
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/enterprise/automations": {
      "post": {
        "summary": "Creates a pull request for the given list of Kustomizations.",
        "operationId": "ClustersService_CreateAutomationsPullRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateAutomationsPullRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAutomationsPullRequestRequest"
            }
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/enterprise/automations/render": {
      "post": {
        "operationId": "ClustersService_RenderAutomation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RenderAutomationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RenderAutomationRequest"
            }
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/enterprise/events": {
      "get": {
        "summary": "ListEvents returns the k8s events for a given object",
        "operationId": "ClustersService_ListEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "involvedObject.kind",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "involvedObject.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "involvedObject.namespace",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/enterprise/version": {
      "get": {
        "summary": "GetEnterpriseVersion returns the WeGO Enterprise version",
        "operationId": "ClustersService_GetEnterpriseVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEnterpriseVersionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/external-secrets": {
      "get": {
        "summary": "ListExternalSecrets list external secrets available on all clusters",
        "operationId": "ClustersService_ListExternalSecrets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListExternalSecretsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/external-secrets-stores": {
      "get": {
        "summary": "ListExternalSecretStores list external secrets stores",
        "operationId": "ClustersService_ListExternalSecretStores",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListExternalSecretStoresResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/external-secrets/sync": {
      "post": {
        "summary": "SyncExternalSecrets sync externalSecret Operator secrets",
        "operationId": "ClustersService_SyncExternalSecrets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SyncExternalSecretsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SyncExternalSecretsRequest"
            }
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/external-secrets/{externalSecretName}": {
      "get": {
        "summary": "GetExternalSecret get secret details",
        "operationId": "ClustersService_GetExternalSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetExternalSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "externalSecretName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/policy-configs": {
      "get": {
        "summary": "ListPolicyConfigs list policy configs",
        "operationId": "ClustersService_ListPolicyConfigs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPolicyConfigsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/policy-configs/{name}": {
      "get": {
        "summary": "GetPolicyConfig get policy config details",
        "operationId": "ClustersService_GetPolicyConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/sops-kustomizations": {
      "get": {
        "summary": "ListSopsKustomizations list Sops kustomizations",
        "operationId": "ClustersService_ListSopsKustomizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSopsKustomizationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/templates": {
      "get": {
        "operationId": "ClustersService_ListTemplates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTemplatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "templateKind",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/templates/{templateName}": {
      "get": {
        "operationId": "ClustersService_GetTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateKind",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "templateNamespace",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/templates/{templateName}/params": {
      "get": {
        "summary": "Get the Values.yaml for a template if one exists.",
        "operationId": "ClustersService_ListTemplateParams",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTemplateParamsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateKind",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "templateNamespace",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/templates/{templateName}/profiles": {
      "get": {
        "summary": "Returns a list of profiles within that template\n`gitops get \u003ctemplate-name\u003e --list-profiles`\nThe template annotations appear in the following form\ncapi.weave.works/profile-\u003cn\u003e where n is a number",
        "operationId": "ClustersService_ListTemplateProfiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTemplateProfilesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "templateKind",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "templateNamespace",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/templates/{templateName}/render": {
      "post": {
        "operationId": "ClustersService_RenderTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RenderTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "values": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "credentials": {
                  "$ref": "#/definitions/v1Credential"
                },
                "templateKind": {
                  "type": "string"
                },
                "clusterNamespace": {
                  "type": "string"
                },
                "profiles": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1ProfileValues"
                  }
                },
                "kustomizations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1Kustomization"
                  }
                },
                "templateNamespace": {
                  "type": "string"
                },
                "externalSecrets": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1ExternalSecret"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/tfcontrollers": {
      "post": {
        "summary": "Creates a pull request for a tfcontroller template.\nThe template name and values will be used to\ncreate a new branch for which a new pull request\nwill be created.",
        "operationId": "ClustersService_CreateTfControllerPullRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTfControllerPullRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTfControllerPullRequestRequest"
            }
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/workspaces": {
      "get": {
        "summary": "ListWorkspaces list workspaces available on all clusters",
        "operationId": "ClustersService_ListWorkspaces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListWorkspacesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/workspaces/{workspaceName}": {
      "get": {
        "summary": "GetWorkspace get workspace details",
        "operationId": "ClustersService_GetWorkspace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWorkspaceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "workspaceName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/workspaces/{workspaceName}/policies": {
      "get": {
        "summary": "GetWorkspacePolicies list workspace service accounts",
        "operationId": "ClustersService_GetWorkspacePolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWorkspacePoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "workspaceName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/workspaces/{workspaceName}/rolebindings": {
      "get": {
        "summary": "GetWorkspaceRoleBindings list workspace role bindings",
        "operationId": "ClustersService_GetWorkspaceRoleBindings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWorkspaceRoleBindingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "workspaceName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/workspaces/{workspaceName}/roles": {
      "get": {
        "summary": "GetWorkspaceRoles list workspace roles",
        "operationId": "ClustersService_GetWorkspaceRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWorkspaceRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "workspaceName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    },
    "/v1/workspaces/{workspaceName}/serviceaccounts": {
      "get": {
        "summary": "GetWorkspaceServiceAccounts list workspace service accounts",
        "operationId": "ClustersService_GetWorkspaceServiceAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWorkspaceServiceAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "workspaceName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "clusterName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ClustersService"
        ]
      }
    }
  },
  "definitions": {
    "CostEstimateRange": {
      "type": "object",
      "properties": {
        "low": {
          "type": "number",
          "format": "float"
        },
        "high": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "apiHttpBody": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "description": "The HTTP Content-Type header value specifying the content type of the body."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The HTTP request/response body as raw binary."
        },
        "extensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Application specific response metadata. Must be set in the first response\nfor streaming APIs."
        }
      },
      "description": "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody) returns\n      (google.protobuf.Empty);\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1CapiCluster": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/v1CapiClusterStatus"
        },
        "infrastructureRef": {
          "$ref": "#/definitions/v1CapiClusterInfrastructureRef"
        }
      }
    },
    "v1CapiClusterInfrastructureRef": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1CapiClusterStatus": {
      "type": "object",
      "properties": {
        "phase": {
          "type": "string"
        },
        "infrastructureReady": {
          "type": "boolean"
        },
        "controlPlaneInitialized": {
          "type": "boolean"
        },
        "controlPlaneReady": {
          "type": "boolean"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Condition"
          }
        },
        "observedGeneration": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1Chart": {
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/v1ChartSpec"
        }
      }
    },
    "v1ChartSpec": {
      "type": "object",
      "properties": {
        "chart": {
          "type": "string"
        },
        "sourceRef": {
          "$ref": "#/definitions/v1SourceRef"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1ClusterAutomation": {
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/v1ClusterNamespacedName"
        },
        "isControlPlane": {
          "type": "boolean"
        },
        "kustomization": {
          "$ref": "#/definitions/v1Kustomization"
        },
        "helmRelease": {
          "$ref": "#/definitions/v1HelmRelease"
        },
        "filePath": {
          "type": "string",
          "title": "A path to write the resource to in the management git repo"
        },
        "externalSecret": {
          "$ref": "#/definitions/v1ExternalSecret"
        },
        "policyConfig": {
          "$ref": "#/definitions/v1PolicyConfigObject"
        },
        "sopsSecret": {
          "$ref": "#/definitions/v1SopsSecret"
        }
      }
    },
    "v1ClusterNamespacedName": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1CommitFile": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      }
    },
    "v1Condition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      },
      "title": "kubernetes status condition field\nXXX: is dup'd in core, can we share?"
    },
    "v1CostEstimate": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "range": {
          "$ref": "#/definitions/CostEstimateRange"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1CreateAutomationsPullRequestRequest": {
      "type": "object",
      "properties": {
        "repositoryUrl": {
          "type": "string",
          "description": "The repository to use."
        },
        "headBranch": {
          "type": "string",
          "description": "The new branch that will be created."
        },
        "baseBranch": {
          "type": "string",
          "description": "The target branch."
        },
        "title": {
          "type": "string",
          "description": "The title of the pull request."
        },
        "description": {
          "type": "string",
          "title": "The description of the pull request"
        },
        "commitMessage": {
          "type": "string",
          "title": "The commit message"
        },
        "repositoryApiUrl": {
          "type": "string",
          "description": "The repo api url."
        },
        "clusterAutomations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterAutomation"
          },
          "title": "A list of cluster and kustomization"
        }
      }
    },
    "v1CreateAutomationsPullRequestResponse": {
      "type": "object",
      "properties": {
        "webUrl": {
          "type": "string",
          "description": "The url of the new pull request."
        }
      }
    },
    "v1CreatePullRequestRequest": {
      "type": "object",
      "properties": {
        "repositoryUrl": {
          "type": "string",
          "description": "The repository to use."
        },
        "headBranch": {
          "type": "string",
          "description": "The new branch that will be created."
        },
        "baseBranch": {
          "type": "string",
          "description": "The target branch."
        },
        "title": {
          "type": "string",
          "description": "The title of the pull request."
        },
        "description": {
          "type": "string",
          "title": "The description of the pull request"
        },
        "templateName": {
          "type": "string",
          "description": "The name of the template to create a pull request for."
        },
        "parameterValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The values that populate the template's parameters."
        },
        "commitMessage": {
          "type": "string",
          "title": "The commit message"
        },
        "credentials": {
          "$ref": "#/definitions/v1Credential",
          "title": "Credentials"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ProfileValues"
          },
          "description": "The values for each profile that will be installed."
        },
        "repositoryApiUrl": {
          "type": "string",
          "description": "The repo api url."
        },
        "clusterNamespace": {
          "type": "string"
        },
        "kustomizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Kustomization"
          }
        },
        "templateNamespace": {
          "type": "string"
        },
        "templateKind": {
          "type": "string"
        },
        "previousValues": {
          "$ref": "#/definitions/v1PreviousValues"
        },
        "externalSecrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ExternalSecret"
          }
        },
        "policyConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyConfigObject"
          }
        },
        "sopsSecrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SopsSecret"
          }
        }
      }
    },
    "v1CreatePullRequestResponse": {
      "type": "object",
      "properties": {
        "webUrl": {
          "type": "string",
          "description": "The url of the new pull request."
        }
      }
    },
    "v1CreateTfControllerPullRequestRequest": {
      "type": "object",
      "properties": {
        "repositoryUrl": {
          "type": "string",
          "description": "The repository to use."
        },
        "headBranch": {
          "type": "string",
          "description": "The new branch that will be created."
        },
        "baseBranch": {
          "type": "string",
          "description": "The target branch."
        },
        "title": {
          "type": "string",
          "description": "The title of the pull request."
        },
        "description": {
          "type": "string",
          "title": "The description of the pull request"
        },
        "templateName": {
          "type": "string",
          "description": "The name of the template to create a pull request for."
        },
        "parameterValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The values that populate the template's parameters."
        },
        "commitMessage": {
          "type": "string",
          "title": "The commit message"
        },
        "repositoryApiUrl": {
          "type": "string",
          "description": "The repo api url."
        },
        "templateNamespace": {
          "type": "string"
        }
      }
    },
    "v1CreateTfControllerPullRequestResponse": {
      "type": "object",
      "properties": {
        "webUrl": {
          "type": "string",
          "description": "The url of the new pull request."
        }
      }
    },
    "v1Credential": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "v1Decryption": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/v1SecretRef"
        }
      }
    },
    "v1DeleteClustersPullRequestRequest": {
      "type": "object",
      "properties": {
        "repositoryUrl": {
          "type": "string",
          "description": "The repository to use."
        },
        "headBranch": {
          "type": "string",
          "description": "The new branch that will be created."
        },
        "baseBranch": {
          "type": "string",
          "description": "The target branch."
        },
        "title": {
          "type": "string",
          "description": "The title of the pull request."
        },
        "description": {
          "type": "string",
          "title": "The description of the pull request"
        },
        "clusterNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The name of the clusters to be delete via a PR."
        },
        "commitMessage": {
          "type": "string",
          "title": "The commit message"
        },
        "credentials": {
          "$ref": "#/definitions/v1Credential",
          "title": "Credentials"
        },
        "repositoryApiUrl": {
          "type": "string",
          "description": "The repo api url."
        },
        "clusterNamespacedNames": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterNamespacedName"
          }
        }
      }
    },
    "v1DeleteClustersPullRequestResponse": {
      "type": "object",
      "properties": {
        "webUrl": {
          "type": "string",
          "description": "The url of the new pull request."
        }
      }
    },
    "v1EncryptSopsSecretRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "immutable": {
          "type": "boolean"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "stringData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "kustomizationName": {
          "type": "string"
        },
        "kustomizationNamespace": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        }
      }
    },
    "v1EncryptSopsSecretResponse": {
      "type": "object",
      "properties": {
        "encryptedSecret": {
          "type": "object"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "v1Event": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "component": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ExternalSecret": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1Metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1ExternalSecretSpec"
        }
      },
      "title": "External Secrets template"
    },
    "v1ExternalSecretData": {
      "type": "object",
      "properties": {
        "secretKey": {
          "type": "string"
        },
        "remoteRef": {
          "$ref": "#/definitions/v1ExternalSecretRemoteRef"
        }
      }
    },
    "v1ExternalSecretDataFromRemoteRef": {
      "type": "object",
      "properties": {
        "extract": {
          "$ref": "#/definitions/v1ExternalSecretDataRemoteRef"
        }
      }
    },
    "v1ExternalSecretDataRemoteRef": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "v1ExternalSecretItem": {
      "type": "object",
      "properties": {
        "secretName": {
          "type": "string"
        },
        "externalSecretName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "secretStore": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      }
    },
    "v1ExternalSecretRemoteRef": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "property": {
          "type": "string"
        }
      }
    },
    "v1ExternalSecretSpec": {
      "type": "object",
      "properties": {
        "refreshInterval": {
          "type": "string"
        },
        "secretStoreRef": {
          "$ref": "#/definitions/v1ExternalSecretStoreRef"
        },
        "target": {
          "$ref": "#/definitions/v1ExternalSecretTarget"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ExternalSecretData"
          }
        },
        "dataFrom": {
          "$ref": "#/definitions/v1ExternalSecretDataFromRemoteRef"
        }
      }
    },
    "v1ExternalSecretStore": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1ExternalSecretStoreRef": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "v1ExternalSecretTarget": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1GetChartsJobResponse": {
      "type": "object",
      "properties": {
        "values": {
          "type": "string",
          "description": "This is the base64 encoded version of the raw values data."
        },
        "error": {
          "type": "string"
        }
      }
    },
    "v1GetConfigResponse": {
      "type": "object",
      "properties": {
        "repositoryURL": {
          "type": "string"
        },
        "managementClusterName": {
          "type": "string"
        },
        "uiConfig": {
          "type": "string"
        },
        "gitHostTypes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1GetEnterpriseVersionResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "title": "The version of WeGO Enterprise"
        }
      }
    },
    "v1GetExternalSecretResponse": {
      "type": "object",
      "properties": {
        "secretName": {
          "type": "string"
        },
        "externalSecretName": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "secretStore": {
          "type": "string"
        },
        "secretStoreType": {
          "type": "string"
        },
        "secretPath": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "yaml": {
          "type": "string"
        }
      }
    },
    "v1GetPolicyConfigResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "age": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "matchType": {
          "type": "string"
        },
        "match": {
          "$ref": "#/definitions/v1PolicyConfigMatch"
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyConfigPolicy"
          }
        },
        "totalPolicies": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1GetTemplateResponse": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/v1Template"
        }
      }
    },
    "v1GetValuesForChartRequest": {
      "type": "object",
      "properties": {
        "repository": {
          "$ref": "#/definitions/v1RepositoryRef"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1GetValuesForChartResponse": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string"
        }
      }
    },
    "v1GetWorkspacePoliciesResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspacePolicy"
          }
        }
      }
    },
    "v1GetWorkspaceResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetWorkspaceRoleBindingsResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceRoleBinding"
          }
        }
      }
    },
    "v1GetWorkspaceRolesResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceRole"
          }
        }
      }
    },
    "v1GetWorkspaceServiceAccountsResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceServiceAccount"
          }
        }
      }
    },
    "v1GitopsCluster": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Condition"
          }
        },
        "capiClusterRef": {
          "$ref": "#/definitions/v1GitopsClusterRef"
        },
        "secretRef": {
          "$ref": "#/definitions/v1GitopsClusterRef"
        },
        "capiCluster": {
          "$ref": "#/definitions/v1CapiCluster"
        },
        "controlPlane": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1GitopsClusterRef": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1HelmRelease": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1Metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1HelmReleaseSpec"
        }
      }
    },
    "v1HelmReleaseSpec": {
      "type": "object",
      "properties": {
        "chart": {
          "$ref": "#/definitions/v1Chart"
        },
        "values": {
          "type": "string"
        }
      }
    },
    "v1Kustomization": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1Metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1KustomizationSpec"
        }
      }
    },
    "v1KustomizationSpec": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "sourceRef": {
          "$ref": "#/definitions/v1SourceRef"
        },
        "targetNamespace": {
          "type": "string"
        },
        "createNamespace": {
          "type": "boolean"
        },
        "decryption": {
          "$ref": "#/definitions/v1Decryption"
        }
      }
    },
    "v1ListChartsForRepositoryResponse": {
      "type": "object",
      "properties": {
        "charts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1RepositoryChart"
          }
        }
      }
    },
    "v1ListCredentialsResponse": {
      "type": "object",
      "properties": {
        "credentials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Credential"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ListError": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1ListEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Event"
          }
        }
      }
    },
    "v1ListExternalSecretStoresResponse": {
      "type": "object",
      "properties": {
        "stores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ExternalSecretStore"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ListExternalSecretsResponse": {
      "type": "object",
      "properties": {
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ExternalSecretItem"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ListError"
          }
        }
      }
    },
    "v1ListGitopsClustersResponse": {
      "type": "object",
      "properties": {
        "gitopsClusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GitopsCluster"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "nextPageToken": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ListError"
          }
        }
      }
    },
    "v1ListPolicyConfigsResponse": {
      "type": "object",
      "properties": {
        "policyConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyConfigListItem"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ListError"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ListSopsKustomizationsResponse": {
      "type": "object",
      "properties": {
        "kustomizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SopsKustomizations"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ListTemplateParamsResponse": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Parameter"
          }
        },
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TemplateObject"
          }
        }
      }
    },
    "v1ListTemplateProfilesResponse": {
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TemplateProfile"
          }
        },
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TemplateObject"
          }
        }
      }
    },
    "v1ListTemplatesResponse": {
      "type": "object",
      "properties": {
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Template"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ListError"
          }
        }
      }
    },
    "v1ListWorkspacesResponse": {
      "type": "object",
      "properties": {
        "workspaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Workspace"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "nextPageToken": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ListError"
          }
        }
      }
    },
    "v1Metadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1ObjectRef": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "type": "string"
        }
      }
    },
    "v1Parameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "default": {
          "type": "string"
        },
        "editable": {
          "type": "boolean"
        }
      }
    },
    "v1PolicyConfigApplicationMatch": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "v1PolicyConfigConf": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "v1PolicyConfigListItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "totalPolicies": {
          "type": "integer",
          "format": "int32"
        },
        "match": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "age": {
          "type": "string"
        }
      }
    },
    "v1PolicyConfigMatch": {
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "workspaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyConfigApplicationMatch"
          }
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyConfigResourceMatch"
          }
        }
      }
    },
    "v1PolicyConfigObject": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1Metadata"
        },
        "spec": {
          "$ref": "#/definitions/v1PolicyConfigObjectSpec"
        }
      }
    },
    "v1PolicyConfigObjectSpec": {
      "type": "object",
      "properties": {
        "match": {
          "$ref": "#/definitions/v1PolicyConfigMatch"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1PolicyConfigConf"
          }
        }
      }
    },
    "v1PolicyConfigPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1PolicyConfigResourceMatch": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "v1PreviousValues": {
      "type": "object",
      "properties": {
        "parameterValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "credentials": {
          "$ref": "#/definitions/v1Credential"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ProfileValues"
          }
        },
        "kustomizations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Kustomization"
          }
        },
        "externalSecrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ExternalSecret"
          }
        },
        "policyConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PolicyConfigObject"
          }
        },
        "sopsSecrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SopsSecret"
          }
        }
      },
      "description": "Previous values for a CreatePullRequestRequest."
    },
    "v1ProfileValues": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "values": {
          "type": "string"
        },
        "layer": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "v1RenderAutomationRequest": {
      "type": "object",
      "properties": {
        "clusterAutomations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ClusterAutomation"
          }
        }
      }
    },
    "v1RenderAutomationResponse": {
      "type": "object",
      "properties": {
        "kustomizationFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CommitFile"
          }
        },
        "helmReleaseFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CommitFile"
          }
        },
        "externalSecretsFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CommitFile"
          }
        },
        "policyConfigFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CommitFile"
          }
        },
        "sopsSecertFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CommitFile"
          }
        }
      }
    },
    "v1RenderTemplateResponse": {
      "type": "object",
      "properties": {
        "renderedTemplate": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CommitFile"
          }
        },
        "profileFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CommitFile"
          }
        },
        "kustomizationFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CommitFile"
          }
        },
        "costEstimate": {
          "$ref": "#/definitions/v1CostEstimate"
        },
        "externalSecretsFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CommitFile"
          }
        },
        "policyConfigFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CommitFile"
          }
        },
        "sopsSecretFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CommitFile"
          }
        }
      }
    },
    "v1RepositoryChart": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "This is the available versions in reverse semver order."
        },
        "layer": {
          "type": "string"
        }
      }
    },
    "v1RepositoryRef": {
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/v1ClusterNamespacedName"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "v1SecretRef": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1SopsKustomizations": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "v1SopsSecret": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1SopsSecretMetadata"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "stringData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "immutable": {
          "type": "boolean"
        },
        "sops": {
          "type": "object"
        }
      }
    },
    "v1SopsSecretMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1SourceRef": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "v1SyncExternalSecretsRequest": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "externalSecretName": {
          "type": "string"
        }
      }
    },
    "v1SyncExternalSecretsResponse": {
      "type": "object"
    },
    "v1Template": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Parameter"
          }
        },
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TemplateObject"
          }
        },
        "error": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "templateKind": {
          "type": "string"
        },
        "templateType": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "namespace": {
          "type": "string"
        },
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TemplateProfile"
          }
        }
      }
    },
    "v1TemplateObject": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "v1TemplateProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "editable": {
          "type": "boolean"
        },
        "values": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "profileTemplate": {
          "type": "string"
        },
        "layer": {
          "type": "string"
        }
      }
    },
    "v1Workspace": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1WorkspacePolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceRoleRule"
          }
        },
        "manifest": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRoleBinding": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "manifest": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/v1WorkspaceRoleBindingRoleRef"
        },
        "subjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1WorkspaceRoleBindingSubject"
          }
        },
        "kind": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRoleBindingRoleRef": {
      "type": "object",
      "properties": {
        "apiGroup": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRoleBindingSubject": {
      "type": "object",
      "properties": {
        "apiGroup": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "v1WorkspaceRoleRule": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1WorkspaceServiceAccount": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "manifest": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      }
    }
  }
}

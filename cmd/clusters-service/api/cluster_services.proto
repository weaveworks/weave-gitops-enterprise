/**
 * This file holds the protobuf definitions
 * for the Weave GitOps Enterprise gRPC API.
 */
syntax = "proto3";

package cluster_services.v1;

import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/weaveworks/weave-gitops-enterprise/cmd/clusters-service/proto/cluster_services";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "Weave GitOps Enterprise API",
      version: "0.1";
      description: "The API handles operations for Weave GitOps Enterprise";
    };
    consumes: "application/json";
    produces: "application/json";
};


/**
 * Weave GitOps Enterprise ClustersService service definition
 */
service ClustersService {

  // Returns a list of templates.
  rpc ListTemplates(ListTemplatesRequest) returns (ListTemplatesResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["templates"]; };
    option (google.api.http) = {
      get : "/v1/templates"
    };
  }

  // Gets details of a specific template.
  rpc GetTemplate(GetTemplateRequest) returns (GetTemplateResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["templates"]; };
    option (google.api.http) = {
      get : "/v1/namespaces/{template_namespace}/templates/{template_name}"
    };
  }

  
   // Gets the Values.yaml for a template if one exists.
  rpc ListTemplateParams(ListTemplateParamsRequest) returns (ListTemplateParamsResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["templates"]; };
    option (google.api.http) = {
      get : "/v1/namespaces/{template_namespace}/templates/{template_name}/params"
    };
  }

  // Returns a list of profiles within that template.
  rpc ListTemplateProfiles(ListTemplateProfilesRequest) returns (ListTemplateProfilesResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["templates"]; };
    option (google.api.http) = {
      get : "/v1/namespaces/{template_namespace}/templates/{template_name}/profiles"
    };
  }

  // Renders a template using given values.
  rpc RenderTemplate(RenderTemplateRequest) returns (RenderTemplateResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["templates"]; };
    option (google.api.http) = {
      post : "/v1/namespaces/{template_namespace}/templates/{template_name}/render"
      body : "*"
    };
  }

  // Creates a pull request for a cluster template.
  // The template name and values will be used to
  // create a new branch for which a new pull request
  // will be created.
  rpc CreatePullRequest(CreatePullRequestRequest) returns (CreatePullRequestResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["templates"]; };
    option (google.api.http) = {
      post : "/v1/templates/pull-request"
      body : "*"
    };
  }

  // Creates a pull request for the given list of clusters
  // to be deleted.
  rpc CreateDeletionPullRequest(CreateDeletionPullRequestRequest) returns (CreateDeletionPullRequestResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["templates"]; };
    option (google.api.http) = {
      post : "/v1/templates/deletion-pull-request"
      body : "*"
    };
  }


  // Renders an automation template using given cluster automations.
  rpc RenderAutomation(RenderAutomationRequest) returns (RenderAutomationResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["automations"]; };
    option (google.api.http) = {
      post : "/v1/automations/render"
      body : "*"
    };
  }

  // Creates a pull request for the given list of Kustomizations.
  rpc CreateAutomationsPullRequest(CreateAutomationsPullRequestRequest) returns (CreateAutomationsPullRequestResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["automations"]; };
    option (google.api.http) = {
      post : "/v1/automations/pull-request"
      body : "*"
    };
  }

  // List available credentials.
  rpc ListCredentials(ListCredentialsRequest) returns (ListCredentialsResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["templates"]; };
    option (google.api.http) = {
      get : "/v1/credentials"
    };
  }

  // Creates a pull request for a tfcontroller template.
  // The template name and values will be used to
  // create a new branch for which a new pull request
  // will be created.
  rpc CreateTfControllerPullRequest(CreateTfControllerPullRequestRequest) returns (CreateTfControllerPullRequestResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["templates"]; };
    option (google.api.http) = {
      post : "/v1/tfcontrollers/pull-request"
      body : "*"
    };
  }

  // Lists available GitOps clusters.
  rpc ListGitopsClusters(ListGitopsClustersRequest) returns (ListGitopsClustersResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["clusters"]; };
    option (google.api.http) = {
      get : "/v1/clusters"
    };
  }

  // Returns the Kubeconfig for the given
  // workload cluster.
  rpc GetKubeconfig(GetKubeconfigRequest) returns (google.api.HttpBody) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["clusters"]; };
    option (google.api.http) = {
      get : "/v1/namespaces/{cluster_namespace}/clusters/{cluster_name}/kubeconfig"
    };
  }

  // Returns the WeGO Enterprise version
  rpc GetEnterpriseVersion(GetEnterpriseVersionRequest) returns (GetEnterpriseVersionResponse) {
    option (google.api.http) = {
      // Namespaced under /enterprise/ so as not to conflict with the OSS endpoint
      get : "/v1/enterprise/version"
    };
  }

  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse) {
    option (google.api.http) = {
      get : "/v1/config"
    };
  }

  // Returns the k8s events for a given object
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {
    option (google.api.http) = {
      // namespaced under /enterprise/ so as not to conflict with the OSS endpoint
      get : "/v1/enterprise/events"
    };
  }

  // Lists the discovered Helm charts in the provided
  // repository.
  rpc ListChartsForRepository(ListChartsForRepositoryRequest) returns (ListChartsForRepositoryResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["charts"]; };
     option (google.api.http) = {
        get : "/v1/charts/list",
      };
    }

  // Gets the default Values.yaml for the provided Chart
  // reference.
  rpc GetValuesForChart(GetValuesForChartRequest) returns (GetValuesForChartResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["charts"]; };
     option (google.api.http) = {
        post : "/v1/charts/values"
        body : "*"
      };
    }

  // Gets the default Values.yaml for the provided Chart
  // reference.
  rpc GetChartsJob(GetChartsJobRequest) returns (GetChartsJobResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["charts"]; };
     option (google.api.http) = {
        get : "/v1/charts/jobs/{job_id}",
      };
    }


    // List workspaces available on all clusters
  rpc ListWorkspaces(ListWorkspacesRequest) returns (ListWorkspacesResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["workspaces"]; };
    option (google.api.http) = {
      get : "/v1/workspaces"
    };
  }

   // Get workspace details
   rpc GetWorkspace(GetWorkspaceRequest) returns (GetWorkspaceResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["workspaces"]; };
    option (google.api.http) = {
      get : "/v1/namespaces/{cluster_namespace}/clusters/{cluster_name}"
            "/workspaces/{workspace_name}"
    };
  }

   // List workspace roles
   rpc GetWorkspaceRoles(GetWorkspaceRequest) returns (GetWorkspaceRolesResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["workspaces"]; };
    option (google.api.http) = {
      get : "/v1/namespaces/{cluster_namespace}/clusters/{cluster_name}"
            "/workspaces/{workspace_name}/roles"
    };
  }

   // List workspace role bindings
   rpc GetWorkspaceRoleBindings(GetWorkspaceRequest) returns (GetWorkspaceRoleBindingsResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["workspaces"]; };
    option (google.api.http) = {
      get : "/v1/namespaces/{cluster_namespace}/clusters/{cluster_name}"
            "/workspaces/{workspace_name}/rolebindings"
    };
  }

   // List workspace service accounts
   rpc GetWorkspaceServiceAccounts(GetWorkspaceRequest) returns (GetWorkspaceServiceAccountsResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["workspaces"]; };
    option (google.api.http) = {
      get : "/v1/namespaces/{cluster_namespace}/clusters/{cluster_name}"
            "/workspaces/{workspace_name}/serviceaccounts"
    };
  }

  // List workspace service accounts
  rpc GetWorkspacePolicies(GetWorkspaceRequest) returns (GetWorkspacePoliciesResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["workspaces"]; };
    option (google.api.http) = {
      get : "/v1/namespaces/{cluster_namespace}/clusters/{cluster_name}"
            "/workspaces/{workspace_name}/policies"
    };
  }

  // List external secrets available on all clusters
  rpc ListExternalSecrets(ListExternalSecretsRequest) returns (ListExternalSecretsResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["secrets"]; };
    option (google.api.http) = {
      get : "/v1/external-secrets"
    };
  }

  // Get secret details
  rpc GetExternalSecret(GetExternalSecretRequest) returns (GetExternalSecretResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["secrets"]; };
    option (google.api.http) = {
      get : "/v1/namespaces/{cluster_namespace}/clusters/{cluster_name}"
            "/namespaces/{namespace}/external-secrets/{external_secret_name}"
    };
  }

  // List external secrets stores
  rpc ListExternalSecretStores(ListExternalSecretStoresRequest) returns (ListExternalSecretStoresResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["secrets"]; };
    option (google.api.http) = {
      get : "/v1/external-secrets-stores"
    };
  }

  // Sync externalSecret Operator secrets
  rpc SyncExternalSecrets(SyncExternalSecretsRequest) returns (SyncExternalSecretsResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["secrets"]; };
    option (google.api.http) = {
      post : "/v1/external-secrets/sync"
      body : "*"
    };
  }

  // Encrypts a sops secret
  rpc EncryptSopsSecret(EncryptSopsSecretRequest) returns (EncryptSopsSecretResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["secrets"]; };
    option (google.api.http) = {
      post : "/v1/encrypt-sops-secret",
      body : "*"
    };
  }

  // List Sops kustomizations
  rpc ListSopsKustomizations(ListSopsKustomizationsRequest) returns (ListSopsKustomizationsResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["secrets"]; };
    option (google.api.http) = {
      get : "/v1/sops-kustomizations"
    };
  }

  // List policy configs
  rpc ListPolicyConfigs(ListPolicyConfigsRequest) returns (ListPolicyConfigsResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["policies"]; };
    option (google.api.http) = {
      get : "/v1/policy-configs"
    };
  }

  // Get policy config details
  rpc GetPolicyConfig(GetPolicyConfigRequest) returns (GetPolicyConfigResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = { tags: ["policies"]; };
    option (google.api.http) = {
      get : "/v1/namespaces/{cluster_namespace}/clusters/{cluster_name}/policy-configs/{name}"
    };
  }

}

message ListTemplatesRequest {
  string provider = 1;
  string template_kind = 2;
}

message Pagination {
    int32 pageSize = 1;
    string pageToken = 2;
}

message ListError {
    string cluster_name = 1;
    string namespace = 2;
    string message = 3;
}

message ListTemplatesResponse {
  repeated Template templates = 1;
  int32 total = 2;
  repeated ListError errors = 4;
}

message GetTemplateRequest {
  string template_name = 1;
  string template_kind = 2;
  string template_namespace = 3;
}

message GetTemplateResponse { Template template = 1; }

message ListTemplateParamsRequest {
  string template_name = 1;
  string template_kind = 2;
  string template_namespace = 3;
}
message ListTemplateParamsResponse {
  repeated Parameter parameters = 1;
  repeated TemplateObject objects = 2;
}

message ListTemplateProfilesRequest {
  string template_name = 1;
  string template_kind = 2;
  string template_namespace = 3;
}
message ListTemplateProfilesResponse {
  repeated TemplateProfile profiles = 1;
  repeated TemplateObject objects = 2;
}

message RenderTemplateRequest {
  string template_name = 1;
  map<string, string> values = 2;
  Credential credentials = 3;
  string template_kind = 4;
  string cluster_namespace = 5;
  repeated ProfileValues profiles = 6;
  repeated Kustomization kustomizations = 7;
  string template_namespace = 8;
  repeated ExternalSecret external_secrets = 9;
}

message CommitFile {
	string path = 1;
	string content = 2;
}

message CostEstimate{
  message Range {
    float low = 1;
    float high = 2;
  };
  string currency = 1;
  Range range = 2;
  string message = 3;
}

message RenderTemplateResponse {
  repeated CommitFile rendered_templates = 1;
  repeated CommitFile profile_files = 2;
  repeated CommitFile kustomization_files = 3;
  CostEstimate costEstimate = 4;
  repeated CommitFile external_secrets_files = 5;
  repeated CommitFile policy_config_files = 6;
  repeated CommitFile sops_secret_files = 7;

}

message RenderAutomationRequest {
  repeated ClusterAutomation cluster_automations = 1;
}

message RenderAutomationResponse {
  repeated CommitFile kustomization_files = 1;
  repeated CommitFile helm_release_files = 2;
  repeated CommitFile external_secrets_files = 3;
  repeated CommitFile policy_config_files = 4;
  repeated CommitFile sops_secert_files = 5;
}

message ListGitopsClustersRequest {
  string label = 1;
  int64 page_size = 2;
  string page_token = 3;
  string ref_type = 4;
}
message ListGitopsClustersResponse {
  repeated GitopsCluster gitops_clusters = 1;
  int32 total = 2;
  string next_page_token = 3;
  repeated ListError errors = 4;
}

message CreatePullRequestRequest {
  // The repository to use.
  string repository_url = 1;
  // The new branch that will be created.
  string head_branch = 2;
  // The target branch.
  string base_branch = 3;
  // The title of the pull request.
  string title = 4;
  // The description of the pull request
  string description = 5;
  // The name of the template to create a pull request for.
  string template_name = 6;
  // The values that populate the template's parameters.
  map<string, string> parameter_values = 7;
  // The commit message
  string commit_message = 8;
  // Credentials
  Credential credentials = 9;
  // The values for each profile that will be installed.
  repeated ProfileValues values = 10;
  // The repo api url.
  string repository_api_url = 11;
  string cluster_namespace = 12;
  repeated Kustomization kustomizations = 13;
  string template_namespace = 14;
  string template_kind = 15;
  PreviousValues previous_values = 16;
  repeated ExternalSecret external_secrets = 17;
  repeated PolicyConfigObject policy_configs = 18;
  repeated SopsSecret sops_secrets = 19;

}

// Previous values for a CreatePullRequestRequest.
message PreviousValues {
  map<string, string> parameter_values = 1;
  Credential credentials = 2;
  repeated ProfileValues values = 3;
  repeated Kustomization kustomizations = 4;
  repeated ExternalSecret external_secrets = 5;
  repeated PolicyConfigObject policy_configs = 6;
  repeated SopsSecret sops_secrets = 7;
 }

message CreatePullRequestResponse {
  // The url of the new pull request.
  string web_url = 1;
}

message CreateTfControllerPullRequestRequest {
  // The repository to use.
  string repository_url = 1;
  // The new branch that will be created.
  string head_branch = 2;
  // The target branch.
  string base_branch = 3;
  // The title of the pull request.
  string title = 4;
  // The description of the pull request
  string description = 5;
  // The name of the template to create a pull request for.
  string template_name = 6;
  // The values that populate the template's parameters.
  map<string, string> parameter_values = 7;
  // The commit message
  string commit_message = 8;
  // The repo api url.
  string repository_api_url = 11;
  string template_namespace = 12;
}
message CreateTfControllerPullRequestResponse {
  // The url of the new pull request.
  string web_url = 1;
}

message ClusterNamespacedName {
  string namespace = 1;
  string name = 2;
}

message CreateDeletionPullRequestRequest {
  // The repository to use.
  string repository_url = 1;
  // The new branch that will be created.
  string head_branch = 2;
  // The target branch.
  string base_branch = 3;
  // The title of the pull request.
  string title = 4;
  // The description of the pull request
  string description = 5;
  // The name of the clusters to be delete via a PR.
  repeated string cluster_names = 6;
  // The commit message
  string commit_message = 7;
  // Credentials
  Credential credentials = 8;
  // The repo api url.
  string repository_api_url = 9;
  repeated ClusterNamespacedName cluster_namespaced_names = 10;
}
message CreateDeletionPullRequestResponse {
  // The url of the new pull request.
  string web_url = 1;
}

message ListCredentialsRequest {}
message ListCredentialsResponse {
  repeated Credential credentials = 1;
  int32 total = 2;
}

message GetKubeconfigRequest {
  // The name of the workload cluster.
  string cluster_name = 1;
  string cluster_namespace = 2;
}
message GetKubeconfigResponse {
  // The Kubeconfig of the workload cluster.
  string kubeconfig = 1;
}

// kubernetes status condition field
// XXX: is dup'd in core, can we share?
message Condition {
  string type = 1;
  string status = 2;
  string reason = 3;
  string message = 4;
  string timestamp = 5;
}

message GitopsCluster {
  string name = 1;
  string namespace = 2;
  map<string, string> annotations = 4;
  map<string, string> labels = 5;
  repeated Condition conditions = 6;
  GitopsClusterRef capiClusterRef = 7;
  GitopsClusterRef secretRef = 8;
  CapiCluster capi_cluster = 9;
  bool control_plane = 10;
  string type = 11;
}

message CapiCluster {
  string name = 1;
  string namespace = 2;
  map<string, string> annotations = 3;
  map<string, string> labels = 4;
  CapiClusterStatus status = 5;
  CapiClusterInfrastructureRef infrastructure_ref = 6;
}

message CapiClusterStatus {
  string phase = 1;
  bool infrastructure_ready = 2;
  bool control_plane_initialized = 3;
  bool control_plane_ready = 4;
  repeated Condition conditions = 5;
  int64 observed_generation = 6;
}

message CapiClusterInfrastructureRef {
  string api_version = 1;
  string kind = 2;
  string name = 3;
}

message GitopsClusterRef { string name = 1; }

message Credential {
  string group = 1;
  string version = 2;
  string kind = 3;
  string name = 4;
  string namespace = 5;
}

message Template {
  string name = 1;
  string description = 2;
  string provider = 3;
  repeated Parameter parameters = 4;
  repeated TemplateObject objects = 5;
  string error = 6;
  map<string, string> annotations = 7;
  string template_kind = 8;
  string template_type = 9;
  map<string, string> labels = 10;
  string namespace = 11;
  repeated TemplateProfile profiles = 12;
}

message Parameter {
  string name = 1;
  string description = 2;
  bool required = 3;
  repeated string options = 4;
  string default = 5;
  bool editable = 6;
}

message TemplateProfile {
  string name = 1;
  string version = 2;
  bool editable = 3;
  string values = 4;
  string namespace = 5;
  bool required = 6;
  string profile_template = 7;
  string layer = 8;
}

message TemplateObject {
  string kind = 1;
  string api_version = 2;
  repeated string parameters = 3;
  string name = 4;
  string display_name = 5;
}

message GetEnterpriseVersionRequest {}

message GetEnterpriseVersionResponse {
  // The version of WeGO Enterprise
  string version = 1;
}

message CreateAutomationsPullRequestRequest {
  // The repository to use.
  string repository_url = 1;
  // The new branch that will be created.
  string head_branch = 2;
  // The target branch.
  string base_branch = 3;
  // The title of the pull request.
  string title = 4;
  // The description of the pull request
  string description = 5;
  // The commit message
  string commit_message = 6;
  // The repo api url.
  string repository_api_url = 7;
  // A list of cluster and kustomization
  repeated ClusterAutomation cluster_automations = 8;
}

message ClusterAutomation {
  ClusterNamespacedName cluster = 1;
  bool is_control_plane = 2;
  Kustomization kustomization = 3;
  HelmRelease helm_release = 4;
  // A path to write the resource to in the management git repo
  string file_path = 5;
  ExternalSecret external_secret = 6;
  PolicyConfigObject policy_config = 7;
  SopsSecret sops_secret = 8;
}

// External Secrets template
message ExternalSecret {
  Metadata metadata = 1;
  ExternalSecretSpec spec = 2;
}

message ExternalSecretSpec {
  string refresh_interval = 1;
  ExternalSecretStoreRef secret_store_ref = 2;
  ExternalSecretTarget target = 3;
  repeated ExternalSecretData data = 4;
  ExternalSecretDataFromRemoteRef data_from = 5;
}

message ExternalSecretStoreRef {
  string name = 1;
  string kind = 2;
}

message ExternalSecretTarget {
  string name = 1;
}

message ExternalSecretData {
  string secret_key = 1;
  ExternalSecretRemoteRef remote_ref = 2;
}

message ExternalSecretRemoteRef {
  string key = 1;
  string property = 2;
}

message ExternalSecretDataFromRemoteRef {
  ExternalSecretDataRemoteRef extract = 1;
}

message ExternalSecretDataRemoteRef {
  string key = 1;
}

message Kustomization {
  Metadata metadata = 1;
  KustomizationSpec spec = 2;
}

message KustomizationSpec {
  string path = 1;
  SourceRef source_ref = 2;
  string target_namespace = 3;
  bool create_namespace = 4;
  Decryption decryption = 5;
}

message Decryption{
  string provider = 1;
  SecretRef secretRef = 2;
}

message SecretRef{
  string name = 1;
}

message HelmRelease {
  Metadata metadata = 1;
  HelmReleaseSpec spec = 2;
}

message HelmReleaseSpec {
  Chart chart = 1;
  string values = 2;
}

message Chart {
  ChartSpec spec = 1;
}

message ChartSpec {
  string chart = 1;
  SourceRef source_ref = 2;
  string version = 3;
}

message Metadata {
  string name = 1;
  string namespace = 2;
  map<string, string> annotations = 3;
}

message SourceRef {
  string name = 1;
  string namespace = 2;
}

message CreateAutomationsPullRequestResponse {
  // The url of the new pull request.
  string web_url = 1;
}

message Maintainer {
  string name = 1;
  string email = 2;
  string url = 3;
}

message HelmRepository {
  string name = 1;
  string namespace = 2;
}

message Profile {
  string name = 1;
  string home = 2;
  repeated string sources = 3;
  string description = 4;
  repeated string keywords = 5;
  repeated Maintainer maintainers = 6;
  string icon = 7;
  map<string, string> annotations = 8;
  string kube_version = 9;
  HelmRepository helm_repository = 10;
  repeated string available_versions = 11;
}

message ProfileValues {
  string name = 1;
  string version = 2;
  string values = 3;
  string layer = 4;
  string namespace = 5;
}

message GetConfigRequest {}

message GetConfigResponse {
  string repository_url = 1;
  string management_cluster_name = 2;
  string ui_config = 3;
  map<string, string> git_host_types = 4;
}

message PolicyParamRepeatedString { repeated string values = 1; }

message ObjectRef {
  string kind      = 1;
  string name      = 2;
  string namespace = 3;
}

message Event {
  string type      = 1;
  string reason    = 2;
  string message   = 3;
  string timestamp = 4;
  string component = 5;
  string host      = 6;
  string name      = 7;
}

message ListEventsRequest {
  ObjectRef involved_object = 1;
  string    clusterName    = 2;
}

message ListEventsResponse {
  repeated Event events = 1;
}

message RepositoryRef {
  ClusterNamespacedName cluster = 1;
  string name = 2;
  string namespace = 3;
  string kind = 4;
}

message ListChartsForRepositoryRequest {
  RepositoryRef repository = 1;
  string kind = 2;
}

message RepositoryChart {
  string name = 1;
  // This is the available versions in reverse semver order.
  repeated string versions = 2;
  string layer = 3;
}

message ListChartsForRepositoryResponse {
  repeated RepositoryChart charts = 1;
}

message GetValuesForChartRequest {
  RepositoryRef repository = 1;
  string name = 2;
  string version = 3;
}

message GetValuesForChartResponse {
  string job_id = 1;
}

message GetChartsJobRequest {
  string job_id = 1;
}

message GetChartsJobResponse {
  // This is the base64 encoded version of the raw values data.
  string values = 1;
  string error = 2;
}

message Workspace {
  string name = 1;
  string clusterName = 2;
  repeated string namespaces = 3;
}

message ListWorkspacesRequest{
  Pagination pagination = 1;
}

message ListWorkspacesResponse{
  repeated Workspace workspaces = 1;
  int32 total = 2;
  string next_page_token = 3;
  repeated ListError errors = 4;
}

message WorkspaceRoleRule {
  repeated string groups = 1;
  repeated string resources = 2;
  repeated string verbs = 3;
}

message WorkspaceRole {
  string name = 1;
  string namespace = 2;
  repeated WorkspaceRoleRule rules = 3;
  string manifest = 4;
  string timestamp = 5;
  string kind = 6;
}

message WorkspaceRoleBindingRoleRef {
  string api_group = 1;
  string kind = 2;
  string name = 3;
}

message WorkspaceRoleBindingSubject {
  string api_group = 1;
  string kind = 2;
  string name = 3;
  string namespace = 4;
}

message WorkspaceRoleBinding {
  string name = 1;
  string namespace = 2;
  string manifest = 3;
  string timestamp = 4;
  WorkspaceRoleBindingRoleRef role = 5;
  repeated WorkspaceRoleBindingSubject subjects = 6;
  string kind = 7;
}

message WorkspaceServiceAccount {
  string name = 1;
  string namespace = 2;
  string timestamp = 3;
  string manifest = 4;
  string kind = 5;
}

message WorkspacePolicy {
  string id = 1;
  string name = 2;
  string category = 4;
  string severity = 5;
  string timestamp = 6;
}

message GetWorkspaceRequest{
  string cluster_name = 1;
  string workspace_name = 2;
  string cluster_namespace = 3;
}

message GetWorkspaceResponse{
  string name = 1;
  string cluster_name = 2;
  repeated string namespaces = 3;
}

message GetWorkspaceRolesResponse{
  string name = 1;
  string cluster_name = 2;
  repeated WorkspaceRole objects = 3;
}

message GetWorkspaceRoleBindingsResponse{
  string name = 1;
  string cluster_name = 2;
  repeated WorkspaceRoleBinding objects = 3;
}

message GetWorkspaceServiceAccountsResponse{
  string name = 1;
  string cluster_name = 2;
  repeated WorkspaceServiceAccount objects = 3;
}

message GetWorkspacePoliciesResponse{
  string name = 1;
  string cluster_name = 2;
  repeated WorkspacePolicy objects = 3;
}

message ExternalSecretItem {
  string secret_name = 1;
  string external_secret_name = 2;
  string namespace = 3;
  string cluster_name = 4;
  string secret_store = 5;
  string status = 6;
  string timestamp = 7;
}

message ListExternalSecretsRequest {}

message ListExternalSecretsResponse {
  repeated ExternalSecretItem secrets = 1;
  int32 total = 2;
  repeated ListError errors = 4;
}

message GetExternalSecretRequest{
  string cluster_name = 1;
  string namespace = 2;
  string external_secret_name = 3;
  string cluster_namespace = 4;
}

message GetExternalSecretResponse{
  string secret_name = 1;
  string external_secret_name = 2;
  string cluster_name = 3;
  string namespace = 4;
  string secret_store = 5;
  string secret_store_type = 6;
  string secret_path = 7;
  map <string,string> properties = 8;
  string version = 9;
  string status = 10;
  string timestamp = 11;
  string yaml = 12;
}

message ExternalSecretStore {
  string kind = 1;
  string name = 2;
  string namespace = 3;
  string type = 4;
}

message ListExternalSecretStoresRequest{
  string cluster_name = 1;
}

message ListExternalSecretStoresResponse{
  repeated ExternalSecretStore stores = 1;
  int32 total = 2;
}

message SyncExternalSecretsRequest{
  string cluster_name = 1;
  string namespace = 2;
  string external_secret_name = 3;
}

message SyncExternalSecretsResponse{
}

message PolicyConfigListItem {
  string name = 1;
  string cluster_name = 2;
  int32 total_policies = 3;
  string match = 4;
  string status = 5;
  string age = 6;
}

message ListPolicyConfigsRequest {}

message ListPolicyConfigsResponse{
  repeated PolicyConfigListItem policy_configs = 1;
  repeated ListError errors = 2;
  int32 total = 3;
}

message GetPolicyConfigRequest{
  string cluster_name = 1;
  string name = 2;
  string cluster_namespace = 3;
}

message GetPolicyConfigResponse{
  string name = 1;
  string cluster_name = 2;
  string age = 3;
  string status = 4;
  string match_type = 5;
  PolicyConfigMatch match = 6;
  repeated PolicyConfigPolicy policies = 7;
  int32 total_policies = 8;
}

message PolicyConfigApplicationMatch {
  string name = 1;
  string kind = 2;
  string namespace = 3;
}

message PolicyConfigResourceMatch {
  string name = 1;
  string kind = 2;
  string namespace = 3;
}

message PolicyConfigMatch {
  repeated string namespaces = 1;
  repeated string workspaces = 2;
  repeated PolicyConfigApplicationMatch apps = 3;
  repeated PolicyConfigResourceMatch resources = 4;
}

message PolicyConfigPolicy {
  string id = 1;
  string name = 2;
  string description = 3;
  map<string, google.protobuf.Value> parameters = 4;
  string status = 5;
}

message PolicyConfigConf {
  map<string, google.protobuf.Value>  parameters  = 2;
}

message PolicyConfigObjectSpec {
  PolicyConfigMatch match = 1;
  map<string, PolicyConfigConf>  config  = 2;
}

message PolicyConfigObject {
  Metadata metadata = 1;
  PolicyConfigObjectSpec spec  = 2;
}

message EncryptSopsSecretRequest {
  string name = 1;
  string namespace = 2;
  map<string, string> labels = 3;
  string type = 4;
  bool immutable = 5;
  map<string, string> data = 6;
  map<string, string> string_data = 7;
  string kustomization_name = 8;
  string kustomization_namespace = 9;
  string cluster_name = 10;
}

message EncryptSopsSecretResponse {
  google.protobuf.Value encrypted_secret = 1;
  string path = 2;
}

message ListSopsKustomizationsRequest {
  string cluster_name = 1;
}

message ListSopsKustomizationsResponse {
  repeated SopsKustomizations kustomizations = 1;
  int32 total = 2;
}

message SopsKustomizations {
  string name = 1;
  string namespace = 2;
}

message SopsSecretMetadata {
  string name = 1;
  string namespace = 2;
  map<string, string> labels = 3;
}

message SopsSecret {
  string apiVersion = 1;
  string kind = 2;
  SopsSecretMetadata metadata = 3;
  map<string,string> data = 4;
  map<string,string> string_data = 5;
  string type = 6;
  bool immutable = 7;
  google.protobuf.Value sops = 8;
}

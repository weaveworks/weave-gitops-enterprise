syntax = "proto3";

package capi_server.v1;

option go_package = "github.com/weaveworks/weave-gitops-enterprise/cmd/clusters-service/proto/capi_server";

import "google/api/annotations.proto";
import "google/api/httpbody.proto";

service ClustersService {
  rpc ListTemplates(ListTemplatesRequest) returns (ListTemplatesResponse) {
    option (google.api.http) = {
      get : "/v1/templates"
    };
  }
  rpc GetTemplate(GetTemplateRequest) returns (GetTemplateResponse) {
    option (google.api.http) = {
      get : "/v1/templates/{template_name}"
    };
  }
  rpc ListTemplateParams(ListTemplateParamsRequest)
      returns (ListTemplateParamsResponse) {
    option (google.api.http) = {
      get : "/v1/templates/{template_name}/params"
    };
  }
  // Returns a list of profiles within that template
  // `gitops get <template-name> --list-profiles`
  // The template annotations appear in the following form
  // capi.weave.works/profile-<n> where n is a number
  rpc ListTemplateProfiles(ListTemplateProfilesRequest)
      returns (ListTemplateProfilesResponse) {
    option (google.api.http) = {
      get : "/v1/templates/{template_name}/profiles"
    };
  }
  rpc RenderTemplate(RenderTemplateRequest) returns (RenderTemplateResponse) {
    option (google.api.http) = {
      post : "/v1/templates/{template_name}/render"
      body : "*"
    };
  }
  // Creates a pull request for a cluster template.
  // The template name and values will be used to
  // create a new branch for which a new pull request
  // will be created.
  rpc CreatePullRequest(CreatePullRequestRequest)
      returns (CreatePullRequestResponse) {
    option (google.api.http) = {
      post : "/v1/clusters"
      body : "*"
    };
  }
  rpc DeleteClustersPullRequest(DeleteClustersPullRequestRequest)
      returns (DeleteClustersPullRequestResponse) {
    option (google.api.http) = {
      delete : "/v1/clusters"
      body : "*"
    };
  }
  rpc ListCredentials(ListCredentialsRequest)
      returns (ListCredentialsResponse) {
    option (google.api.http) = {
      get : "/v1/credentials"
    };
  }
  // GetKubeconfig returns the Kubeconfig for the given
  // workload cluster.
  rpc GetKubeconfig(GetKubeconfigRequest)
    returns (google.api.HttpBody) {
      option (google.api.http) = {
        get: "/v1/clusters/{cluster_name}/kubeconfig"
      };
    }
  // GetEnterpriseVersion returns the WeGO Enterprise version
  rpc GetEnterpriseVersion(GetEnterpriseVersionRequest)
    returns (GetEnterpriseVersionResponse){
      option (google.api.http) = {
        get: "/v1/enterprise/version"
    };
  }

  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse) {
    option (google.api.http) = {
      get : "/v1/config"
    };
  }
}

message ListTemplatesRequest { string provider = 1; }
message ListTemplatesResponse {
  repeated Template templates = 1;
  int32 total = 2;
}

message GetTemplateRequest { string template_name = 1; }
message GetTemplateResponse { Template template = 1; }

message ListTemplateParamsRequest { string template_name = 1; }
message ListTemplateParamsResponse {
  repeated Parameter parameters = 1;
  repeated TemplateObject objects = 2;
}

message ListTemplateProfilesRequest { string template_name = 1; }
message ListTemplateProfilesResponse {
  repeated TemplateProfile profiles = 1;
  repeated TemplateObject objects = 2;
}

message RenderTemplateRequest {
  string template_name = 1;
  map<string, string> values = 2;
  Credential credentials = 3;
}
message RenderTemplateResponse { string rendered_template = 1; }

message CreatePullRequestRequest {
  // The repository to use.
  string repository_url = 1;
  // The new branch that will be created.
  string head_branch = 2;
  // The target branch.
  string base_branch = 3;
  // The title of the pull request.
  string title = 4;
  // The description of the pull request
  string description = 5;
  // The name of the template to create a pull request for.
  string template_name = 6;
  // The values that populate the template's parameters.
  map<string, string> parameter_values = 7;
  // The commit message
  string commit_message = 8;
  // Credentials
  Credential credentials = 9;
  // The values for each profile that will be installed.
  repeated ProfileValues values = 10;
}
message CreatePullRequestResponse {
  // The url of the new pull request.
  string web_url = 1;
}

message DeleteClustersPullRequestRequest {
  // The repository to use.
  string repository_url = 1;
  // The new branch that will be created.
  string head_branch = 2;
  // The target branch.
  string base_branch = 3;
  // The title of the pull request.
  string title = 4;
  // The description of the pull request
  string description = 5;
  // The name of the clusters to be delete via a PR.
  repeated string cluster_names = 6;
  // The commit message
  string commit_message = 7;
  // Credentials
  Credential credentials = 8;
}
message DeleteClustersPullRequestResponse {
  // The url of the new pull request.
  string web_url = 1;
}

message ListCredentialsRequest {}
message ListCredentialsResponse {
  repeated Credential credentials = 1;
  int32 total = 2;
}

message GetKubeconfigRequest{
  // The name of the workload cluster.
  string cluster_name = 1;
}
message GetKubeconfigResponse{
  // The Kubeconfig of the workload cluster.
  string kubeconfig = 1;
}

message Credential {
  string group = 1;
  string version = 2;
  string kind = 3;
  string name = 4;
  string namespace = 5;
}

message Template {
  string name = 1;
  string description = 2;
  string provider = 3;
  repeated Parameter parameters = 4;
  repeated TemplateObject objects = 5;
  string error = 6;
  map<string, string> annotations = 7;
}

message Parameter {
  string name = 1;
  string description = 2;
  bool required = 3;
  repeated string options = 4;
}

message TemplateProfile {
  string name = 1;
  string version = 2;
}

message TemplateObject {
  string kind = 1;
  string api_version = 2;
  repeated string parameters = 3;
  string name = 4;
  string display_name = 5;
}

message GetEnterpriseVersionRequest {
}

message GetEnterpriseVersionResponse {
  // The version of WeGO Enterprise
  string version = 1;
}

message Maintainer {
  string name = 1;
  string email = 2;
  string url = 3;
}

message HelmRepository {
  string name = 1;
  string namespace = 2;
}

message Profile {
  string name = 1;
  string home = 2;
  repeated string sources = 3;
  string description = 4;
  repeated string keywords = 5;
  repeated Maintainer maintainers = 6;
  string icon = 7;
  map<string, string> annotations = 8;
  string kube_version = 9;
  HelmRepository helm_repository = 10;
  repeated string available_versions = 11;
}

message ProfileValues {
  string name = 1;
  string version = 2;
  string values = 3;
  string layer = 4;
}
 
message GetConfigRequest {}

message GetConfigResponse {
  string repositoryURL = 1;
}


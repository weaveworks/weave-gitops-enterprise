/**
 * This file holds the protobuf definitions for the Weave GitOps Terraform API.
 * Messages and enums are defined in types.proto.
 */
syntax = "proto3";

package terraform.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "api/terraform/types.proto";

option go_package = "github.com/weaveworks/weave-gitops-enterprise/terraform/api";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "Weave GitOps Terraform API",
      version: "0.1";
      description: "The API handles resources for the Terraform controller";
    };
    consumes: "application/json";
    produces: "application/json";
};

/**
 * Weave GitOps Terraform service definition
 */
service Terraform {
    // List terraform objects across all clusters
    rpc ListTerraformObjects(ListTerraformObjectsRequest)
        returns (ListTerraformObjectsResponse) {
        option (google.api.http) = {
            get : "/v1/terraform-objects"
        };
    }

    // Get a terraform object
    rpc GetTerraformObject(GetTerraformObjectRequest)
        returns (GetTerraformObjectResponse) {
        option (google.api.http) = {
            get : "/v1/namespaces/{namespace}/terraform-objects/{name}"
        };
    }

    // Sync multiple terraform objects
    rpc SyncTerraformObjects(SyncTerraformObjectsRequest)
        returns (SyncTerraformObjectsResponse) {
        option (google.api.http) = {
            patch : "/v1/terraform-objects/sync"
            body: "*"
        };  
    }

    // Toggle suspend on multiple terraform objects
    rpc ToggleSuspendTerraformObjects(ToggleSuspendTerraformObjectsRequest)
        returns (ToggleSuspendTerraformObjectsResponse) {
        option (google.api.http) = {
            patch : "/v1/terraform-objects/suspend"
            body: "*"
        }; 
    }

    // Get the plan for a terraform object
    rpc GetTerraformObjectPlan(GetTerraformObjectPlanRequest)
        returns (GetTerraformObjectPlanResponse) {
        option (google.api.http) = {
            get : "/v1/namespaces/{namespace}/terraform-objects/{name}/plan"
        };
    }

    // Replan a terraform object
    rpc ReplanTerraformObject(ReplanTerraformObjectRequest)
        returns (ReplanTerraformObjectResponse) {
        option (google.api.http) = {
            post : "/v1/namespaces/{namespace}/terraform-objects/{name}/replan"
            body: "*"
        };  
    }
}

message ListTerraformObjectsRequest {
    string cluster_name = 1;
    string namespace   = 2;

    Pagination pagination = 3;
}

message ListTerraformObjectsResponse {
    repeated TerraformObject objects = 1;
    repeated TerraformListError errors = 2;
}

message GetTerraformObjectRequest {
    string cluster_name = 1;
    string name        = 2;
    string namespace   = 3;
    string cluster_namespace = 4;
}

message GetTerraformObjectResponse {
    TerraformObject object = 1;
    string          yaml   = 2;
    string          type   = 3;
}

message SyncTerraformObjectsRequest {
    repeated ObjectRef objects = 1;
}

message  SyncTerraformObjectsResponse {
    bool success = 1;
}

message ToggleSuspendTerraformObjectsRequest {
    repeated ObjectRef objects = 1;
    bool               suspend = 2;
}

message ToggleSuspendTerraformObjectsResponse {

}

message GetTerraformObjectPlanRequest {
    string cluster_name = 1;
    string name        = 2;
    string namespace   = 3;
}

message  GetTerraformObjectPlanResponse {
    string plan              = 1;
    bool   enable_plan_viewing = 2;
    string error             = 3;
}

message ReplanTerraformObjectRequest {
    string cluster_name = 1;
    string name        = 2;
    string namespace   = 3;
}

message  ReplanTerraformObjectResponse {
    bool replan_requested = 1;
}

syntax = "proto3";

package gitauth.v1;

option go_package = "github.com/weaveworks/weave-gitops-enterprise/gitauth/api";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "Weave Gitops Enterprise GitAuth API",
      version: "0.1";
      description: "Weave Gitops Enterprise GitAuth API handles authentication via Github and Gitlab";
    };
    consumes: "gitauth/json";
    produces: "gitauth/json";
};

service GitAuth {
    /**
    * Authenticate generates jwt token using git provider name and git provider token arguments
    */
    rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {
        option (google.api.http) = {
            post : "/v1/authenticate/{provider_name}"
            body: "*"
        };
    }

    /**
    * GetGithubDeviceCode retrieves a temporary device code for Github authentication.
    * This code is used to start the Github device-flow.
    */
    rpc GetGithubDeviceCode(GetGithubDeviceCodeRequest) returns (GetGithubDeviceCodeResponse) {
        option (google.api.http) = {
            get : "/v1/gitauth/auth_providers/github"
        };
    }

    /**
    * GetGithubAuthStatus gets the status of the Github device flow authentication requests.
    * Once the user has completed the Github device flow, an access token will be returned.
    * This token will expired in 15 minutes, after which the user will need to complete the flow again
    * to do Git Provider operations.
    */
    rpc GetGithubAuthStatus(GetGithubAuthStatusRequest) returns (GetGithubAuthStatusResponse) {
        option (google.api.http) = {
            post : "/v1/gitauth/auth_providers/github/status"
            body: "*"
        };
    }

    /**
    * GetGitlabAuthURL returns the URL to initiate a GitLab OAuth PKCE flow.
    * The user must browse to the returned URL to authorize the OAuth callback to the GitOps UI.
    * See the GitLab OAuth docs for more more information:
    * https://docs.gitlab.com/ee/api/oauth2.html#supported-oauth-20-flows
    */
    rpc GetGitlabAuthURL(GetGitlabAuthURLRequest) returns (GetGitlabAuthURLResponse) {
        option (google.api.http) = {
            get : "/v1/gitauth/auth_providers/gitlab"
        };
    }

    /**
    */
    rpc GetBitbucketServerAuthURL(GetBitbucketServerAuthURLRequest) returns (GetBitbucketServerAuthURLResponse) {
        option (google.api.http) = {
            get : "/v1/gitauth/auth_providers/bitbucketserver"
        };
    }

    /**
    */
    rpc AuthorizeBitbucketServer (AuthorizeBitbucketServerRequest) returns (AuthorizeBitbucketServerResponse) {
        option (google.api.http) = {
            post : "/v1/gitauth/auth_providers/bitbucketserver/authorize"
            body: "*"
        };
    }

    /**
    */
    rpc GetAzureServerAuthURL(GetAzureServerAuthURLRequest) returns (GetAzureServerAuthURLResponse) {
        option (google.api.http) = {
            get : "/v1/gitauth/auth_providers/azureserver"
        };
    }

    /**
    */
    rpc AuthorizeAzureServer (AuthorizeAzureServerRequest) returns (AuthorizeAzureServerResponse) {
        option (google.api.http) = {
            post : "/v1/gitauth/auth_providers/azureserver/authorize"
            body: "*"
        };
    }

    /**
    * AuthorizeGitlab exchanges a GitLab code obtained via OAuth callback.
    * The returned token is useable for authentication with the GitOps server only.
    * See the GitLab OAuth docs for more more information:
    * https://docs.gitlab.com/ee/api/oauth2.html#supported-oauth-20-flows
    */
    rpc AuthorizeGitlab(AuthorizeGitlabRequest) returns (AuthorizeGitlabResponse) {
        option (google.api.http) = {
            post : "/v1/gitauth/auth_providers/gitlab/authorize"
            body: "*"
        };
    }

    /**
    * ParseRepoURL returns structured data about a git repository URL
    */
    rpc ParseRepoURL(ParseRepoURLRequest) returns(ParseRepoURLResponse) {
        option (google.api.http) = {
            get : "/v1/gitauth/parse_repo_url"
        };
    }

    /**
    * ValidateProviderToken check to see if the git provider token is still valid
    */
    rpc ValidateProviderToken(ValidateProviderTokenRequest) returns (ValidateProviderTokenResponse) {
        option (google.api.http) = {
            post : "/v1/gitauth/validate_token"
            body: "*"
        };
    }
}

message AuthenticateRequest {
    string provider_name = 1;  // The name of the git provider
    string access_token  = 2;  // The token of the git provider
}

message AuthenticateResponse {
    string token = 1;  // The jwt token that was generated using git provider name and git provider token
}

message GetGithubDeviceCodeRequest {

}

message GetGithubDeviceCodeResponse {
    string userCode      = 1; // The Github Device Flow code that will be shown to the user
    string deviceCode    = 2; // A code that uniquely identifies a device
    string validationURI = 3; // The URI that the user will visit to complete the flow
    int32  interval      = 4; // How often the client should retry the request
}

message GetGithubAuthStatusRequest {
    string deviceCode = 1; // The deviceCode returned from a GetGithubDeviceCodeResponse
}

message GetGithubAuthStatusResponse {
    string accessToken = 1; // An access token that can be used to interact with the Weave GitOps API.
    string error       = 2; // An error message.
}

enum GitProvider {
    Unknown         = 0;
    GitHub          = 1;
    GitLab          = 2;
    BitBucketServer = 3;
    AzureServer     = 4;
}

message ParseRepoURLRequest {
    string url = 1; // The URL to be parsed
}

message ParseRepoURLResponse {
    string      name     = 1; // The name of the git repository
    GitProvider provider = 2; // The GitProvider for the repository
    string      owner    = 3; // The person or organization to which this repo belongs
}

message GetGitlabAuthURLRequest {
    string redirectUri = 1; // The URI that GitLab will use to send users back to GitOps.
}

message GetGitlabAuthURLResponse {
    string url = 1; // The URL that users must visit to authorize GitLab authentication.
}

message AuthorizeGitlabRequest {
    string code        = 1; // The challenge code obtained from the OAuth callback
    string redirectUri = 2; // The redirect URI that originated the OAuth flow
}

message AuthorizeGitlabResponse {
    string token = 1; // A token that can be used to authenticate the GitOps API server.
}

message ValidateProviderTokenRequest {
    GitProvider provider = 1;
}

message ValidateProviderTokenResponse {
    bool valid = 1;
}

message GetBitbucketServerAuthURLRequest {
    string redirectUri = 1; // The URI that Bitbucket Server will use to send users back to GitOps.
}

message GetBitbucketServerAuthURLResponse {
    string url = 1; // The URL that users must visit to authorize BitBucket Server authentication.
}

message GetAzureServerAuthURLRequest {
    string redirectUri = 1; // The URI that Azure will use to send users back to GitOps.
}

message GetAzureServerAuthURLResponse {
    string url = 1; // The URL that users must visit to authorize Azure Server authentication.
}

message AuthorizeBitbucketServerRequest {
    string code        = 1; // The challenge code obtained from the OAuth callback
    string redirectUri = 2; // The redirect URI that originated the OAuth flow
}

message AuthorizeBitbucketServerResponse {
    string token = 1; // A token that can be used to authenticate the GitOps API server. 
}

message AuthorizeAzureServerRequest {
    string code        = 1; // The challenge code obtained from the OAuth callback
    string redirectUri = 2; // The redirect URI that originated the OAuth flow
}

message AuthorizeAzureServerResponse {
    string token = 1; // A token that can be used to authenticate the GitOps API server. 
}
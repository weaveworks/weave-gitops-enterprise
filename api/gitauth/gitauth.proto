/**
 * This file holds the protobuf definitions
 * for the Weave Gitops Enterprise Git Provider Authentication API.
 */
syntax = "proto3";

package gitauth.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/weaveworks/weave-gitops-enterprise/gitauth/api";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "Weave Gitops Enterprise GitAuth API",
      version: "0.1";
      description:
          "Weave Gitops Enterprise GitAuth API handles authentication"
          " via Github and Gitlab";
    };
    consumes: "gitauth/json";
    produces: "gitauth/json";
};

/**
 * Weave GitOps Enterprise Git Provider Authentication service definition
 */
service GitAuth {
    /**
    * Wrap a git provider token in a JWT
    */
    rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {
        option (google.api.http) = {
            post : "/v1/authenticate/{provider_name}"
            body: "*"
        };
    }

    /**
    * Get a temporary device code for Github authentication
    *
    * This code is used to start the Github device-flow.
    */
    rpc GetGithubDeviceCode(GetGithubDeviceCodeRequest)
        returns (GetGithubDeviceCodeResponse) {
        option (google.api.http) = {
            get : "/v1/gitauth/auth-providers/github"
        };
    }

    /**
    * Get the status of the Github device flow authentication requests
    *
    * Once the user has completed the Github device flow, an access token will be returned.
    * This token will expire in 15 minutes,
    * after which the user will need to complete the flow again
    * to do Git Provider operations.
    */
    rpc GetGithubAuthStatus(GetGithubAuthStatusRequest)
        returns (GetGithubAuthStatusResponse) {
        option (google.api.http) = {
            post : "/v1/gitauth/auth-providers/github/status"
            body: "*"
        };
    }

    /**
    * Get the URL to initiate a GitLab OAuth flow.
    *
    * The user must browse to the returned URL to authorize the OAuth callback
    * to the GitOps UI.
    * See the GitLab OAuth docs for more more information:
    * https://docs.gitlab.com/ee/api/oauth2.html#supported-oauth-20-flows
    */
    rpc GetGitlabAuthURL(GetGitlabAuthURLRequest)
        returns (GetGitlabAuthURLResponse) {
        option (google.api.http) = {
            get : "/v1/gitauth/auth-providers/gitlab"
        };
    }

    /**
    * Get the URL to initiate a Bitbucket Server OAuth flow.
    */
    rpc GetBitbucketServerAuthURL(GetBitbucketServerAuthURLRequest)
        returns (GetBitbucketServerAuthURLResponse) {
        option (google.api.http) = {
            get : "/v1/gitauth/auth-providers/bitbucketserver"
        };
    }

    /**
    * Exchange a Bitbucket Server code obtained via OAuth callback.
    *
    * The returned token is useable for authentication with the GitOps server only.
    */
    rpc AuthorizeBitbucketServer (AuthorizeBitbucketServerRequest)
        returns (AuthorizeBitbucketServerResponse) {
        option (google.api.http) = {
            post : "/v1/gitauth/auth-providers/bitbucketserver/authorize"
            body: "*"
        };
    }

    /**
    * Exchange a GitLab code obtained via OAuth callback.
    *
    * The returned token is useable for authentication with the GitOps server only.
    * See the GitLab OAuth docs for more more information:
    * https://docs.gitlab.com/ee/api/oauth2.html#supported-oauth-20-flows
    */
    rpc AuthorizeGitlab(AuthorizeGitlabRequest)
        returns (AuthorizeGitlabResponse) {
        option (google.api.http) = {
            post : "/v1/gitauth/auth-providers/gitlab/authorize"
            body: "*"
        };
    }

    /**
    * Get the Azure DevOps authorization URL used to initiate the OAuth flow.
    */
    rpc GetAzureDevOpsAuthURL(GetAzureDevOpsAuthURLRequest)
        returns (GetAzureDevOpsAuthURLResponse) {
        option (google.api.http) = {
            get : "/v1/gitauth/auth-providers/azuredevops"
        };
    }

    /**
    * Exchange an Azure DevOps code obtained via OAuth callback.
    *
    * Get a token after a user authorizes Azure DevOps to grant access to their account
    * on behalf of Weave GitOps Enterprise.
    */
    rpc AuthorizeAzureDevOps (AuthorizeAzureDevOpsRequest)
        returns (AuthorizeAzureDevOpsResponse) {
        option (google.api.http) = {
            post : "/v1/gitauth/auth-providers/azuredevops/authorize"
            body: "*"
        };
    }

    /**
    * Get structured data about a git repository URL
    */
    rpc ParseRepoURL(ParseRepoURLRequest) returns(ParseRepoURLResponse) {
        option (google.api.http) = {
            get : "/v1/gitauth/parse-repo-url"
        };
    }

    /**
    * Check if a git provider token is still valid
    */
    rpc ValidateProviderToken(ValidateProviderTokenRequest)
        returns (ValidateProviderTokenResponse) {
        option (google.api.http) = {
            post : "/v1/gitauth/validate-token"
            body: "*"
        };
    }
}

message AuthenticateRequest {
    string provider_name = 1;  // The name of the git provider
    string access_token  = 2;  // The token of the git provider
}

message AuthenticateResponse {
    /* The jwt token that was generated using git provider name
    and git provider token */
    string token = 1;
}

message GetGithubDeviceCodeRequest {

}

message GetGithubDeviceCodeResponse {
    // The Github Device Flow code that will be shown to the user
    string userCode      = 1;
    string deviceCode    = 2; // A code that uniquely identifies a device
    // The URI that the user will visit to complete the flow
    string validationURI = 3;
    int32  interval      = 4; // How often the client should retry the request
}

message GetGithubAuthStatusRequest {
    // The deviceCode returned from a GetGithubDeviceCodeResponse
    string deviceCode = 1;
}

message GetGithubAuthStatusResponse {
    // An access token that can be used to interact with the Weave GitOps API.
    string accessToken = 1;
    string error       = 2; // An error message.
}

/**
 * GitProvider enum defines the Git provider used in the GitAuth API.
 */
enum GitProvider {
    Unknown         = 0;
    GitHub          = 1;
    GitLab          = 2;
    BitBucketServer = 3;
    AzureDevOps     = 4;
}

message ParseRepoURLRequest {
    string url = 1; // The URL to be parsed
}

message ParseRepoURLResponse {
    string      name     = 1; // The name of the git repository
    GitProvider provider = 2; // The GitProvider for the repository
    // The person or organization to which this repo belongs
    string      owner    = 3;
}

message GetGitlabAuthURLRequest {
    // The URI that GitLab will use to send users back to GitOps.
    string redirectUri = 1;
}

message GetGitlabAuthURLResponse {
    // The URL that users must visit to authorize GitLab authentication.
    string url = 1;
}

message AuthorizeGitlabRequest {
    // The challenge code obtained from the OAuth callback
    string code        = 1;
    string redirectUri = 2; // The redirect URI that originated the OAuth flow
}

message AuthorizeGitlabResponse {
    // A token that can be used to authenticate the GitOps API server.
    string token = 1;
}

message ValidateProviderTokenRequest {
    GitProvider provider = 1;
}

message ValidateProviderTokenResponse {
    bool valid = 1;
}

message GetBitbucketServerAuthURLRequest {
    // The URI that Bitbucket Server will use to send users back to GitOps.
    string redirectUri = 1;
}

message GetBitbucketServerAuthURLResponse {
    /* The URL that users must visit
    to authorize BitBucket Server authentication.*/
    string url = 1;
}

message AuthorizeBitbucketServerRequest {
    // The challenge code obtained from the OAuth callback
    string code        = 1;
    // The state parameter provided in the authorization URL
    string state       = 2; 
    string redirectUri = 3; // The redirect URI that originated the OAuth flow
}

message AuthorizeBitbucketServerResponse {
    // A token that can be used to authenticate the GitOps API server.
    string token = 1;
}

message GetAzureDevOpsAuthURLRequest {
    // The URI that Azure DevOps will use to send users back to GitOps.
    string redirectUri = 1;
}

message GetAzureDevOpsAuthURLResponse {
    // The URL that users must visit to initiate the Azure DevOps OAuth flow.
    string url = 1;
}

message AuthorizeAzureDevOpsRequest {
    // The challenge code obtained from the OAuth callback
    string code        = 1;
    // The state parameter provided in the authorization URL
    string state       = 2;
    string redirectUri = 3; // The redirect URI that originated the OAuth flow
}

message AuthorizeAzureDevOpsResponse {
    // A token that can be used to authenticate the GitOps API server.
    string token = 1; 
}
